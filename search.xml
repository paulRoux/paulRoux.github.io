<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>随笔2019-06-02</title>
      <link href="/2019/06/02/%E9%9A%8F%E7%AC%942019-06-02/"/>
      <url>/2019/06/02/%E9%9A%8F%E7%AC%942019-06-02/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><ul><li>关于视频行业的胡思乱想</li></ul><a id="more"></a><h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><p>&emsp;&emsp;近几年来，国内视频业的发展依旧不是那么的乐观。身边的人怪广电的还是比较多的，我个人觉得，这个锅不能全让广电背。没出现好的作品，这个固然有以前广电方面的监管审查，导致导演与编剧都不敢过于发挥，但如果广电放松了监管，作品的质量也好不到哪去，说不定好的更好，烂的更烂，原因还是在于导演和编剧本身。一想到手撕鬼子，被强暴后才勇猛的这些作品，我真的觉得智商受到了侮辱。真的是林子大了，什么鸟都有。还有一点就是人民的素质需要提升。<br>&emsp;&emsp;去年和今年，出了几部还不错的作品，是一个不小的进步。后面随着5G技术的普及，人民素质和消费水平的提高，国家监管的放松，应该会有更多优秀的作品呈现给大家。同时，各大视频平台也会得到一个快速的发展，但是这个时间不会太短，还是需要长期来看。<br>&emsp;&emsp;根据我的一些了解来看，目前受大家欢迎的作品主要类型还是爆米花、现实、科幻、讽刺这些。国内估计还会持续很长时间古装、穿越等类型，在新类型的探索上我觉得还有很大的空间。就目前来看视频行业还有很长的路要走。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>那些忧伤的年轻人</title>
      <link href="/2019/06/01/%E9%82%A3%E4%BA%9B%E5%BF%A7%E4%BC%A4%E7%9A%84%E5%B9%B4%E8%BD%BB%E4%BA%BA/"/>
      <url>/2019/06/01/%E9%82%A3%E4%BA%9B%E5%BF%A7%E4%BC%A4%E7%9A%84%E5%B9%B4%E8%BD%BB%E4%BA%BA/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><ul><li>其实，每一代人的青春都有相通的地方，他们的迷茫、彷徨和忧伤。</li></ul><a id="more"></a><h4 id="那些忧伤的年轻人"><a href="#那些忧伤的年轻人" class="headerlink" title="那些忧伤的年轻人"></a>那些忧伤的年轻人</h4><p>&emsp;&emsp;起初看到这本书，就像是发现了不一样的“蓝天”一般，一瞬间就被他的名字所吸引。这本书，读时也许会觉得写的挺杂乱的，读完回想一番就会明了其实一直在说一件事——“青春”。<br>&emsp;&emsp;其实我们不难发现：每个年代，都会有“那些忧伤的年轻人”在路上，迷茫、彷徨。这就如同“轮回”一样，不变的是这个过程，变得只是每一代的迷茫与彷徨。这一代的我们，也被称作“最幸福”的一代，却一直在“流浪”，身体和心灵尽无处安放。我们接受更好的教育，也目睹着大学沦为“工厂”；我们追逐风口，也被割了一季又一季；我们那些无从说起的忧伤，也只能藏了又藏。<br>&emsp;&emsp;我不喜欢定义或是去概括一个时代，这样显得过于草率与无知。年轻人的忧伤也是如此，三两句话，是无法明了的，因为那可是我们的“青春”啊！“青春”这个词代表了太多太多的东西，对一切幻想，也对一切迷茫，见证着我们的成长。大学里的日子，荒废了太多的时光，用来打游戏或是无所事事。还好一切领悟的都不太晚，现在还能保持一丝“轻狂”，还愿意去反抗。以后再来看现在的一切，<a href="https://music.163.com/#/song?id=1305960097" target="_blank" rel="noopener">我还年轻</a>，也许就是最好的解释。</p><h4 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h4><p><a href="https://book.douban.com/subject/6802373/" target="_blank" rel="noopener">那些忧伤的年轻人</a></p>]]></content>
      
      
      <categories>
          
          <category> 文学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 观后感 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Scrapy中的get与extract系列函数</title>
      <link href="/2019/05/31/Scrapy%E4%B8%AD%E7%9A%84get%E4%B8%8Eextract/"/>
      <url>/2019/05/31/Scrapy%E4%B8%AD%E7%9A%84get%E4%B8%8Eextract/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><ul><li>在使用<code>Scrapy</code>框架爬取页面数据的时候经常会出现数据获取不到或者数据并非想要的数据，于是对这里面的<code>get()</code>、<code>getall()</code>、<code>extract()</code>、<code>extract_first()</code>函数的使用进行记录。</li></ul><a id="more"></a><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><ul><li><p>一般使用<code>response.xpath()</code>解析得到的是一个<code>SelectorList</code>列表，可以使用<code>type（response.xpath()）</code>查看。<code>SelectorList</code>里面存放的是多个<code>Selector</code>对象。</p><ul><li><p>测试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>scrapy shell http://www.baidu.com</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>res = response.xpath(<span class="string">"//span//input/@value"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>res</span><br><span class="line">[&lt;Selector xpath=<span class="string">'//span//input/@value'</span> data=<span class="string">''</span>&gt;, &lt;Selector xpath=<span class="string">'//span//input/@value'</span> data=<span class="string">'百度一下'</span>&gt;]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(res)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">scrapy</span>.<span class="title">selector</span>.<span class="title">unified</span>.<span class="title">SelectorList</span>'&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>对于<code>SelectorList</code>，<code>getall()</code>与<code>extract()</code>函数会得到所有的数据，包括制表符和换行符等。<code>get()</code>和<code>extract_first()</code>都会获得列表第一个元素的数据。</p><ul><li><p>测试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>res.get()</span><br><span class="line"><span class="string">''</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(res.get())</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">str</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">res</span>.<span class="title">getall</span><span class="params">()</span></span></span><br><span class="line">['', '百度一下']</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(res.getall())</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">list</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">res</span>.<span class="title">extract</span><span class="params">()</span></span></span><br><span class="line">['', '百度一下']</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(res.extract())</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">list</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">res</span>.<span class="title">extract_first</span><span class="params">()</span></span></span><br><span class="line"><span class="class">''</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span><span class="params">(res.extract_first<span class="params">()</span>)</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">str</span>'&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>对于<code>Selector</code>，<code>getall()</code>与<code>extract()</code>函数会得到所有的数据(一个元素的情况下，<code>getall()</code>得到的是一个列表，<code>extract()</code>得到的是字符串。多个元素都是列表)。<code>get()</code>会获得元素的数据，<code>extract_first()</code>会出错。</p><ul><li><p>测试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(res[<span class="number">1</span>])</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">scrapy</span>.<span class="title">selector</span>.<span class="title">unified</span>.<span class="title">Selector</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">res</span>[1].<span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="class">'百度一下'</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span><span class="params">(res[<span class="number">1</span>].get<span class="params">()</span>)</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">str</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">res</span>[1].<span class="title">getall</span><span class="params">()</span></span></span><br><span class="line"><span class="class">['百度一下']</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span><span class="params">(res[<span class="number">1</span>].getall<span class="params">()</span>)</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">list</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">res</span>[1].<span class="title">extract</span><span class="params">()</span></span></span><br><span class="line"><span class="class">'百度一下'</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span><span class="params">(res[<span class="number">1</span>].extract<span class="params">()</span>)</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">str</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">res</span>[1].<span class="title">extract_first</span><span class="params">()</span></span></span><br><span class="line"><span class="class"><span class="title">Traceback</span> <span class="params">(most recent call last)</span>:</span></span><br><span class="line">File <span class="string">"&lt;console&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: <span class="string">'Selector'</span> object has no attribute <span class="string">'extract_first'</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><ul><li>对于<code>scrapy.selector.unified.SelectorList</code>对象，<code>getall() == extract()</code>返回字符串, <code>get() == extract_first()</code>返回列表。</li><li>对于<code>scrapy.selector.unified.Selector</code>对象， <code>get() != extract_first()</code>,<code>getall()与extract()看元素个数多少</code></li></ul><h4 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h4><ul><li><a href="https://docs.scrapy.org/en/latest/topics/selectors.html" target="_blank" rel="noopener">官方文档</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Function </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>pymongo使用</title>
      <link href="/2019/05/17/pymongo%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/05/17/pymongo%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><ul><li>最近做毕设用到pymongo，对平常的使用记录一下。</li></ul><a id="more"></a><h4 id="pymongo"><a href="#pymongo" class="headerlink" title="pymongo"></a>pymongo</h4><ul><li><p><strong>配置环境</strong></p><ul><li><code>python3.6</code>，<code>pymongo</code>，<code>MongoDB数据库</code> </li><li>数据库配置：<ul><li><strong>uri</strong>：<code>localhost:27017</code></li><li><strong>db</strong>：<code>douban</code></li><li><strong>collection</strong>：<code>human</code></li></ul></li></ul></li><li><p><strong>连接MongoDB</strong></p><ul><li>连接MongoDB我们需要使用PyMongo库里面的MongoClient，一般来说传入MongoDB的IP及端口即可，第一个参数为地址host，第二个参数为端口port，端口默认是27017。</li><li><p>代码：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>)</span><br><span class="line"><span class="comment"># 或者如下</span></span><br><span class="line">client = pymongo.MongoClient(<span class="string">'mongodb://localhost:27017'</span>)</span><br></pre></td></tr></table></figure></li><li><p><strong>指定数据库</strong></p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db = client.douban</span><br><span class="line">db = client[<span class="string">'douban'</span>]</span><br><span class="line"><span class="comment"># 上面两种方式是等价的</span></span><br></pre></td></tr></table></figure></li><li><p><strong>指定集合</strong></p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">collection = db.peoples</span><br><span class="line">collection = db[<span class="string">'peoples'</span>]</span><br><span class="line"><span class="comment"># 上面两种方式是等价的</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>插入数据(以字典的形式表示)</strong></p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">在PyMongo <span class="number">3.</span>X版本中，insert()方法官方已经不推荐使用</span><br><span class="line">people = &#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'roux'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="string">'sex'</span>: <span class="string">'male'</span></span><br><span class="line">&#125;</span><br><span class="line">result = collection.insert(people)</span><br><span class="line">print(result)</span><br><span class="line"><span class="comment"># 在MongoDB中，每条数据其实都有一个_id属性来唯一标识，如果没有显式指明_id，MongoDB会自动产生一个ObjectId类型的_id属性</span></span><br><span class="line"><span class="comment"># insert()方法会在执行后返回的_id值</span></span><br></pre></td></tr></table></figure>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 同时插入多条数据，只需要以列表形式传递即可，示例如下：</span></span><br><span class="line"></span><br><span class="line">people1 = &#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'roux'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="string">'sex'</span>: <span class="string">'male'</span></span><br><span class="line">&#125;</span><br><span class="line">people2 = &#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'shirsen'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">21</span>,</span><br><span class="line">    <span class="string">'sex'</span>: <span class="string">'female'</span></span><br><span class="line">&#125;</span><br><span class="line">result = collection.insert([people1, people2])</span><br><span class="line">print(result)</span><br><span class="line"><span class="comment"># 返回的结果是对应的_id的集合</span></span><br></pre></td></tr></table></figure>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 官方推荐使用insert_one()和insert_many()方法将插入单条和多条记录分开。</span></span><br><span class="line"></span><br><span class="line">people = &#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'roux'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="string">'sex'</span>: <span class="string">'male'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result = collection.insert_one(people)</span><br><span class="line">print(result)</span><br><span class="line">print(result.inserted_id)</span><br><span class="line"><span class="comment"># 返回结果和insert()方法不同，这次返回的是InsertOneResult对象，我们可以调用其inserted_id属性获取_id。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对于insert_many()方法，我们可以将数据以列表形式传递即可，示例如下：</span></span><br><span class="line"></span><br><span class="line">people1 = &#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'roux'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="string">'sex'</span>: <span class="string">'male'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">people2 = &#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'shirsen'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">21</span>,</span><br><span class="line">    <span class="string">'sex'</span>: <span class="string">'male'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result = collection.insert_many([people1, people2])</span><br><span class="line">print(result)</span><br><span class="line">print(result.inserted_ids)</span><br><span class="line"><span class="comment"># insert_many()方法返回的类型是InsertManyResult，调用inserted_ids属性可以获取插入数据的_id列表</span></span><br></pre></td></tr></table></figure></li><li><p><strong>查询</strong></p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">result = collection.find_one(&#123;<span class="string">'name'</span>: <span class="string">'shirsen'</span>&#125;)</span><br><span class="line">print(type(result))</span><br><span class="line">print(result)</span><br><span class="line"><span class="comment"># 在这里我们查询name为shirsen的数据，它的返回结果是字典类型</span></span><br><span class="line"><span class="comment"># 可以发现它多了一个_id属性，这就是MongoDB在插入的过程中自动添加的。</span></span><br></pre></td></tr></table></figure>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 我们也可以直接根据ObjectId来查询，这里需要使用bson库里面的ObjectId。</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">from</span> bson.objectid <span class="keyword">import</span> ObjectId</span><br><span class="line"></span><br><span class="line">   result = collection.find_one(&#123;<span class="string">'_id'</span>: ObjectId(<span class="string">'593278c115c2602667ec6bae'</span>)&#125;)</span><br><span class="line">   print(result)</span><br><span class="line">   <span class="comment"># 其查询结果依然是字典类型</span></span><br><span class="line">   <span class="comment"># 如果查询_id':结果不存在则会返回None。</span></span><br></pre></td></tr></table></figure>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对于多条数据的查询，我们可以使用find()方法，例如在这里查找年龄为20的数据</span></span><br><span class="line"></span><br><span class="line">results = collection.find(&#123;<span class="string">'age'</span>: <span class="number">20</span>&#125;)</span><br><span class="line">print(results)</span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">    print(result)</span><br><span class="line"><span class="comment"># 返回结果是Cursor类型，相当于一个生成器，我们需要遍历取到所有的结果，每一个结果都是字典类型。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果要查询年龄大于20的数据，则写法如下：</span></span><br><span class="line"></span><br><span class="line">results = collection.find(&#123;<span class="string">'age'</span>: &#123;<span class="string">'$gt'</span>: <span class="number">20</span>&#125;&#125;)</span><br><span class="line"><span class="comment"># 在这里查询的条件键值已经不是单纯的数字了，而是一个字典，其键名为比较符号$gt，意思是大于，键值为20，这样便可以查询出所有年龄大于20的数据。</span></span><br></pre></td></tr></table></figure>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 比较符号归纳如下表：</span></span><br><span class="line"></span><br><span class="line">符号含义示例</span><br><span class="line">$lt 小于: &#123;<span class="string">'age'</span>: &#123;<span class="string">'$lt'</span>: <span class="number">20</span>&#125;&#125;</span><br><span class="line">$gt 大于: &#123;<span class="string">'age'</span>: &#123;<span class="string">'$gt'</span>: <span class="number">20</span>&#125;&#125;</span><br><span class="line">$lte 小于等于: &#123;<span class="string">'age'</span>: &#123;<span class="string">'$lte'</span>: <span class="number">20</span>&#125;&#125;</span><br><span class="line">$gte 大于等于: &#123;<span class="string">'age'</span>: &#123;<span class="string">'$gte'</span>: <span class="number">20</span>&#125;&#125;</span><br><span class="line">$ne 不等于: &#123;<span class="string">'age'</span>: &#123;<span class="string">'$ne'</span>: <span class="number">20</span>&#125;&#125;</span><br><span class="line">$<span class="keyword">in</span> 在范围内: &#123;<span class="string">'age'</span>: &#123;<span class="string">'$in'</span>: [<span class="number">20</span>, <span class="number">23</span>]&#125;&#125;</span><br><span class="line">$nin 不在范围内: &#123;<span class="string">'age'</span>: &#123;<span class="string">'$nin'</span>: [<span class="number">20</span>, <span class="number">23</span>]&#125;&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 另外还可以进行正则匹配查询，例如查询名字以M开头的学生数据，示例如下：</span></span><br><span class="line"></span><br><span class="line">results = collection.find(&#123;<span class="string">'name'</span>: &#123;<span class="string">'$regex'</span>: <span class="string">'^M.*'</span>&#125;&#125;)</span><br><span class="line"><span class="comment"># 在这里使用了$regex来指定正则匹配，^M.*代表以M开头的正则表达式，这样就可以查询所有符合该正则的结果。</span></span><br></pre></td></tr></table></figure>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 功能符号归类如下：</span></span><br><span class="line"></span><br><span class="line">符号含义示例示例含义</span><br><span class="line">$regex 匹配正则: &#123;<span class="string">'name'</span>: &#123;<span class="string">'$regex'</span>: <span class="string">'^M.*'</span>&#125;&#125;, name以M开头</span><br><span class="line">$exists 属性是否存在: &#123;<span class="string">'name'</span>: &#123;<span class="string">'$exists'</span>: <span class="keyword">True</span>&#125;&#125;, name属性存在</span><br><span class="line">$type 类型判断: &#123;<span class="string">'age'</span>: &#123;<span class="string">'$type'</span>: <span class="string">'int'</span>&#125;&#125;, age的类型为int</span><br><span class="line">$mod 数字模操作: &#123;<span class="string">'age'</span>: &#123;<span class="string">'$mod'</span>: [<span class="number">5</span>, <span class="number">0</span>]&#125;&#125;, 年龄模<span class="number">5</span>余<span class="number">0</span></span><br><span class="line">$text 文本查询: &#123;<span class="string">'$text'</span>: &#123;<span class="string">'$search'</span>: <span class="string">'shirsen'</span>&#125;&#125;, text类型的属性中包含shirsen字符串</span><br><span class="line">$where 高级条件查询: &#123;<span class="string">'$where'</span>: <span class="string">'obj.fans_count == obj.follows_count'</span>&#125;, 自身粉丝数等于关注数</span><br></pre></td></tr></table></figure></li><li><p><strong>计数</strong></p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 要统计查询结果有多少条数据，可以调用count()方法，如统计所有数据条数：</span></span><br><span class="line">count = collection.find().count()</span><br><span class="line">print(count)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者统计符合某个条件的数据：</span></span><br><span class="line">count = collection.find(&#123;<span class="string">'age'</span>: <span class="number">20</span>&#125;).count()</span><br><span class="line">print(count)</span><br></pre></td></tr></table></figure></li><li><p><strong>排序</strong></p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以调用sort方法，传入排序的字段及升降序标志即可</span></span><br><span class="line">results = collection.find().sort(<span class="string">'name'</span>, pymongo.ASCENDING)</span><br><span class="line">print([result[<span class="string">'name'</span>] <span class="keyword">for</span> result <span class="keyword">in</span> results])</span><br><span class="line"><span class="comment"># 偏移,可能想只取某几个元素，在这里可以利用skip()方法偏移几个位置，比如偏移2，就忽略前2个元素，得到第三个及以后的元素。</span></span><br><span class="line"></span><br><span class="line">results = collection.find().sort(<span class="string">'name'</span>, pymongo.ASCENDING).skip(<span class="number">2</span>)</span><br><span class="line">print([result[<span class="string">'name'</span>] <span class="keyword">for</span> result <span class="keyword">in</span> results])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 另外还可以用limit()方法指定要取的结果个数</span></span><br><span class="line">results = collection.find().sort(<span class="string">'name'</span>, pymongo.ASCENDING).skip(<span class="number">2</span>).limit(<span class="number">2</span>)</span><br><span class="line">print([result[<span class="string">'name'</span>] <span class="keyword">for</span> result <span class="keyword">in</span> results])</span><br><span class="line"><span class="comment"># 如果不加limit()原本会返回三个结果，加了限制之后，会截取2个结果返回。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 值得注意的是，在数据库数量非常庞大的时候，如千万、亿级别，最好不要使用大的偏移量来查询数据，很可能会导致内存溢出，</span></span><br><span class="line"><span class="comment"># 可以使用类似find(&#123;'_id': &#123;'$gt': ObjectId('593278c815c2602678bb2b8d')&#125;&#125;) 这样的方法来查询，记录好上次查询的_id。</span></span><br></pre></td></tr></table></figure></li><li><p><strong>更新</strong></p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对于数据更新可以使用update()方法，指定更新的条件和更新后的数据即可，例如：</span></span><br><span class="line">  </span><br><span class="line">condition = &#123;<span class="string">'name'</span>: <span class="string">'Kevin'</span>&#125;</span><br><span class="line">people = collection.find_one(condition)</span><br><span class="line">people[<span class="string">'age'</span>] = <span class="number">25</span></span><br><span class="line">result = collection.update(condition, people)</span><br><span class="line">print(result)</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 在这里我们将name为Kevin的数据的年龄进行更新，首先指定查询条件，然后将数据查询出来，修改年龄，</span></span><br><span class="line"><span class="comment"># 之后调用update方法将原条件和修改后的数据传入，即可完成数据的更新。</span></span><br><span class="line"><span class="comment"># 返回结果是字典形式，ok即代表执行成功，nModified代表影响的数据条数。</span></span><br><span class="line"><span class="comment"># 另外update()方法其实也是官方不推荐使用的方法</span></span><br></pre></td></tr></table></figure>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment"># 在这里也分了update_one()方法和update_many()方法，用法更加严,第二个参数需要使用$类型操作符作为字典的键名，我们用示例感受一下。</span></span><br><span class="line"></span><br><span class="line">condition = &#123;<span class="string">'name'</span>: <span class="string">'Kevin'</span>&#125;</span><br><span class="line">people = collection.find_one(condition)</span><br><span class="line">people[<span class="string">'age'</span>] = <span class="number">26</span></span><br><span class="line">result = collection.update_one(condition, &#123;<span class="string">'$set'</span>: people&#125;)</span><br><span class="line">print(result)</span><br><span class="line">print(result.matched_count, result.modified_count)</span><br><span class="line"><span class="comment"># 在这里调用了update_one方法，第二个参数不能再直接传入修改后的字典，而是需要使用&#123;'$set': people&#125;这样的形式，</span></span><br><span class="line"><span class="comment"># 其返回结果是UpdateResult类型，然后调用matched_count和modified_count属性分别可以获得匹配的数据条数和影响的数据条数。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 再看一个例子：</span></span><br><span class="line">condition = &#123;<span class="string">'age'</span>: &#123;<span class="string">'$gt'</span>: <span class="number">20</span>&#125;&#125;</span><br><span class="line">result = collection.update_one(</span><br><span class="line">condition,</span><br><span class="line">&#123;<span class="string">'$inc'</span>: &#123;<span class="string">'age'</span>: <span class="number">1</span>&#125;&#125;</span><br><span class="line">)</span><br><span class="line">print(result)</span><br><span class="line">print(result.matched_count, result.modified_count)</span><br><span class="line"><span class="comment"># 在这里我们指定查询条件为年龄大于20，然后更新条件为&#123;'$inc': &#123;'age': 1&#125;&#125;，执行之后会讲第一条符合条件的数据年龄加1。</span></span><br></pre></td></tr></table></figure>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果调用update_many()方法，则会将所有符合条件的数据都更新</span></span><br><span class="line"></span><br><span class="line">condition = &#123;<span class="string">'age'</span>: &#123;<span class="string">'$gt'</span>: <span class="number">20</span>&#125;&#125;</span><br><span class="line">result = collection.update_many(</span><br><span class="line">    condition,</span><br><span class="line">    &#123;<span class="string">'$inc'</span>: &#123;<span class="string">'age'</span>: <span class="number">1</span>&#125;&#125;</span><br><span class="line">)</span><br><span class="line">print(result)</span><br><span class="line">print(result.matched_count, result.modified_count)</span><br><span class="line"><span class="comment"># 这时所有匹配到的数据都会被更新。</span></span><br></pre></td></tr></table></figure></li><li><p><strong>删除</strong></p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除操作比较简单，直接调用remove()方法指定删除的条件即可，符合条件的所有数据均会被删除</span></span><br><span class="line"></span><br><span class="line">result = collection.remove(&#123;<span class="string">'name'</span>: <span class="string">'Kevin'</span>&#125;)</span><br><span class="line">print(result)</span><br><span class="line"><span class="comment"># 另外依然存在两个新的推荐方法，delete_one()和delete_many()方法</span></span><br><span class="line"></span><br><span class="line">result = collection.delete_one(&#123;<span class="string">'name'</span>: <span class="string">'Kevin'</span>&#125;)</span><br><span class="line">print(result)</span><br><span class="line">print(result.deleted_count)</span><br><span class="line">result = collection.delete_many(&#123;<span class="string">'age'</span>: &#123;<span class="string">'$lt'</span>: <span class="number">25</span>&#125;&#125;)</span><br><span class="line">print(result.deleted_count)</span><br><span class="line"><span class="comment"># delete_one()即删除第一条符合条件的数据，delete_many()即删除所有符合条件的数据，返回结果是DeleteResult类型，</span></span><br><span class="line"><span class="comment"># 可以调用deleted_count属性获取删除的数据条数。</span></span><br></pre></td></tr></table></figure></li><li><p><strong>更多</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 另外PyMongo还提供了一些组合方法，如find_one_and_delete()、find_one_and_replace()、find_one_and_update()，查找后删除、替换、更新操作，用法与上述方法基本一致。</span><br><span class="line"></span><br><span class="line"># 另外还可以对索引进行操作，如create_index()、create_indexes()、drop_index()等。</span><br></pre></td></tr></table></figure></li></ul><h4 id="特殊查询"><a href="#特殊查询" class="headerlink" title="特殊查询"></a>特殊查询</h4><ul><li><p><strong>忽略大小写</strong></p><ul><li><p>可以使用正则查询</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">name = <span class="string">r"^&#123;&#125;s$"</span>.format(filename)</span><br><span class="line">name = re.complie(name, re.I)</span><br><span class="line">client = pymongo.MongoClient(host, port)</span><br><span class="line">db = client[<span class="string">'database'</span>]</span><br><span class="line">col = db[<span class="string">'collection'</span>]</span><br><span class="line">result = col.find(&#123;<span class="string">'filename'</span>: name&#125;, project=&#123;<span class="string">'_id'</span>: <span class="keyword">False</span>&#125;)</span><br><span class="line"><span class="comment"># 或者使用 $regex 表达式</span></span><br><span class="line">result = col.find(&#123;<span class="string">'filename'</span>: &#123;<span class="string">'$regex'</span>: <span class="string">r"^&#123;&#125;s$"</span>.format(filename), <span class="string">'$options'</span>: <span class="string">'i'</span>&#125;&#125;, project=&#123;<span class="string">'_id'</span>: <span class="keyword">False</span>&#125;)</span><br></pre></td></tr></table></figure></li><li><p><strong>$options</strong> 支持如下：</p></li></ul></li></ul><style>    table th:nth-of-type(1){        width: 15%;    }    table th:nth-of-type(2){        width: 55%;    }    table th:nth-of-type(3){        width: 30%;    }</style><table><thead><tr><th style="text-align:left">选型</th><th style="text-align:left">含义</th><th style="text-align:left">要求</th></tr></thead><tbody><tr><td style="text-align:left">i</td><td style="text-align:left">大小写不敏感</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">m</td><td style="text-align:left">查询中使用了锚，如<code>^</code>或者<code>$</code>，以及匹配<code>\n</code>后的字符串</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">x</td><td style="text-align:left">忽视所有空白字符</td><td style="text-align:left">要求<code>$regex</code>与<code>$option</code>合用</td></tr><tr><td style="text-align:left">s</td><td style="text-align:left">允许点字符 <code>.</code> 匹配所有的字符，包括换行符</td><td style="text-align:left">要求<code>$regex</code>与<code>$option</code>合用</td></tr></tbody></table><ul><li><p><strong>是否含有</strong></p><ul><li><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查找存在name属性的数据</span></span><br><span class="line">col.find_one(&#123;<span class="string">'name'</span>: &#123;<span class="string">'$exists'</span>: <span class="keyword">True</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找name为None的数据</span></span><br><span class="line">col.find(&#123;<span class="string">'name'</span>: &#123;<span class="string">'$exists'</span>: <span class="keyword">True</span>, <span class="string">'$in'</span>: [<span class="keyword">None</span>]&#125;&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>多层结构查询</strong></p><ul><li><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># info 里面嵌套 name</span></span><br><span class="line">col.find_one(&#123;<span class="string">'info.name'</span>: <span class="string">'roux'</span>&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>逻辑查询</strong></p><ul><li><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># and 查询</span></span><br><span class="line">col.find_one(&#123;<span class="string">'name'</span>: <span class="string">'roux'</span>, <span class="string">'id'</span>: <span class="number">1</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># or 查询</span></span><br><span class="line">col.find(&#123;<span class="string">"$or"</span>: [&#123;<span class="string">'name'</span>: <span class="string">'roux'</span>&#125;, &#123;<span class="string">'id'</span>: <span class="number">1</span>&#125;]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># in 查询</span></span><br><span class="line">col.find(&#123;<span class="string">'name'</span>: &#123;<span class="string">"$in"</span>: [<span class="string">'roux'</span>, <span class="string">'shirsen'</span>]&#125;&#125;)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h4><ul><li><p><a href="http://api.mongodb.com/python/current/api/pymongo/collection.html" target="_blank" rel="noopener">详细用法</a></p></li><li><p><a href="http://api.mongodb.com/python/current/api/pymongo/" target="_blank" rel="noopener">官方文档</a></p></li><li><p><a href="https://www.jianshu.com/p/b5427af1f2a4" target="_blank" rel="noopener">特殊查询</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Git设置代理</title>
      <link href="/2019/05/15/Git%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/"/>
      <url>/2019/05/15/Git%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><ul><li>最近经常出现<code>github</code>仓库<code>clone</code>到本地发生<code>timeout</code>的情况，就想着设置代理来访问下载，果真下载速度从Kb变为Mb了</li></ul><a id="more"></a><h4 id="设置代理："><a href="#设置代理：" class="headerlink" title="设置代理："></a>设置代理：</h4><ul><li><p>设置代理前，你需要能够<code>科学上网</code>。否则的话直接查看<code>文末</code>修改<code>hosts文件</code>来加速的方法。</p></li><li><p>全局代理</p><ul><li><code>git config --global http.proxy [ip:port]</code></li><li><code>[ip:port]</code>这个是你自己的代理ip和端口</li></ul></li><li><p>局部代理，在已经<code>clone</code> 好的仓库内执行</p><ul><li><code>git config --local http.proxy [ip:port]</code></li><li><code>[ip:port]</code>这个是你自己的代理ip和端口</li></ul></li><li><p>查询是否使用代理：</p><ul><li><p>查询全局代理</p><ul><li><code>git config --global http.proxy</code></li></ul></li><li><p>查询局部代理</p><ul><li><code>git config --local http.proxy</code></li></ul></li></ul></li><li><p>取消代理：</p><ul><li><code>git config --global --unset http.proxy</code></li><li><code>git config --local --unset http.proxy</code></li></ul></li></ul><h4 id="修改hosts"><a href="#修改hosts" class="headerlink" title="修改hosts"></a>修改hosts</h4><ul><li><a href="https://blog.csdn.net/tsq292978891/article/details/78260066" target="_blank" rel="noopener">参考链接</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>活着</title>
      <link href="/2019/05/01/%E6%B4%BB%E7%9D%80/"/>
      <url>/2019/05/01/%E6%B4%BB%E7%9D%80/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><ul><li>生下来，活下去。</li></ul><a id="more"></a><h4 id="活着"><a href="#活着" class="headerlink" title="活着"></a>活着</h4><p>&emsp;&emsp;印象中小时候看过一部电视剧主人公也叫富贵，一切都在失去，直到一无所有。那个时候的什么也不懂，也没有兴趣和能力去懂，也只能在记忆里留下一丝片段。年龄增长，我生活的环境却没有多大的变化，不过是几次搬家与换学校，身边亲人健在，朋友如旧。记忆中的那些片段更加模糊了。可是忽然有一天，不知怎么的，自己就突然长大了，心理的逐渐成熟让我不知所措，忧虑、迷茫、孤独是我无法避免却又时刻在回避的。高考的失利，亲人的离世，父母逐渐斑白鬓角与佝偻的背脊，让我落泪。我仿佛明白了那么一丝活着的意义。<br>&emsp;&emsp;春去秋来，生活还在继续。大学真的是一个神奇的地方，我们每个人都会在这里开始属于自己的蜕变，也许就是命中注定，说不清，道不明。岁月如水，还没好好开始享受，就开始了实习生涯，曾经的自我以为，在那段日子里破碎一地，快乐、委屈、辛酸…… 还记得那段日子结束后，我做的第一个决定就是好好享受大学生活。我们没有那么多可以失去，也没有那么多值得珍惜。也许这就是这个阶段的活着。<br>&emsp;&emsp;以后谁也说不清，只能努力让自己更加充实与“皮实”。我希望：我既为活着本身而活着，也能为活着之外的一些人和事而活。</p><h4 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h4><ul><li><a href="https://book.douban.com/subject/4913064/" target="_blank" rel="noopener">活着</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 文学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 观后感 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>爱你就像爱生命</title>
      <link href="/2019/04/30/%E7%88%B1%E4%BD%A0%E5%B0%B1%E5%83%8F%E7%88%B1%E7%94%9F%E5%91%BD/"/>
      <url>/2019/04/30/%E7%88%B1%E4%BD%A0%E5%B0%B1%E5%83%8F%E7%88%B1%E7%94%9F%E5%91%BD/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><ul><li>手里有本好书在读的日子就像是节日一样。</li></ul><a id="more"></a><h4 id="爱情本来的样子"><a href="#爱情本来的样子" class="headerlink" title="爱情本来的样子"></a>爱情本来的样子</h4><p>&emsp;&emsp;我在翻开这本书前，脑海中有不少的假设，最后无一成立。一页页读过去，并没有我认为的浪漫和甜言蜜语，也没有什么山盟海誓，更没有现在那种爱情就是高级消费品的感觉。但在他们温润的语句中，有的是那些点点滴滴，有的是孩子一般的欢喜和担忧，有的是爱情本来的样子。<br>&emsp;&emsp;其实在书中并没有多少惊天动地的浪漫言语，留下的却缓缓流入人的心房，暖了每个季节。<code>我的灵魂里有很多地方玩世不恭，对人傲慢无礼，但是它有一个核心，这个核心害怕黑暗，柔弱的像绵羊一样。</code> 转念一想，我们每个人何尝不是这样的呢。<code>但愿我和你，是一支唱不完的歌</code> <code>我老把和你在一起的时间当节日来度过，我看你也是</code> 可能现这些话已经带不起多少波澜，孩子的真挚的确在成年人看来有些无力，面对现实深深的无力。但不得不承认的是：<code>我老觉得爱情奇怪，它是一种宿命的东西。对我来说，它的内容就是“碰上了，然后就爱上，然后一点办法也没有了”。它就是这样！</code> 这也许就是爱情本来的样子。<br>&emsp;&emsp;关于李银河对王小波的评价：<code>一位浪漫骑士，一位行吟诗人，一位自由思想者</code> 一点不过。王小波与李银河的书信中没有具体的诗和浪漫，因为都在字里行间流淌着，自由的思想也能在《绿毛水怪》里窥见。<br>&emsp;&emsp;这本书里我读出的更多是爱情本身的样子，没有过多的掺杂。浪漫的就如 <code>我们好像在池塘的水底，从一个月亮走向另一个月亮。</code>可在如今，功利和名誉，空荡的精神世界，我们忘记了爱情的模样，就如 <code>奥克塔维奥-帕斯</code> 所说：<code>在20世纪各项伟大的起义中，爱情缺席了......</code> 21世纪的爱情也变了味道，逐渐缺失了曾经的优雅与浪漫，变得形式主义、功利，成为了一种有点昂贵与费神的高级消费品。<br>&emsp;&emsp;到底是谁变了？</p><h4 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h4><ul><li><a href="https://book.douban.com/subject/27071421/" target="_blank" rel="noopener">爱你就像爱生命</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 文学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 观后感 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Windows10更新系统导致控制台和部分软件中文乱码</title>
      <link href="/2019/04/29/Windows10%E8%BD%AF%E4%BB%B6%E4%B9%B1%E7%A0%81/"/>
      <url>/2019/04/29/Windows10%E8%BD%AF%E4%BB%B6%E4%B9%B1%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><ul><li>昨天更新windows10家庭版的1803版本到最新的版本，更新完成后发现控制台和部分软件出现了乱码的现象，网上找了不少的解决办法，最终自己完全解决了！</li></ul><a id="more"></a><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><ol><li><p>首先，定位到 <code>C:\Users\用户\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Windows PowerShell</code>，鼠标右击windows powershell以管理员运行，复制粘贴以下命令运行，<code>Get-AppxPackage -AllUsers| Foreach {Add-AppxPackage -DisableDevelopmentMode -Register “$($_.InstallLocation)\AppXManifest.xml”}</code> 或者 <code>Get-AppxPackage | % { Add-AppxPackage -DisableDevelopmentMode -Register &quot;$($_.InstallLocation)\AppxManifest.xml&quot; -verbose }</code></p></li><li><p>上个阶段会出现很多的错误，第一个命令执行完了可以执行第二个的。完成后会解决部分的软件乱码，但是还有很多无法解决。</p></li><li><p>接下来，定位到 <code>设置-&gt;时间和语言-&gt;区域和语言-&gt;管理语言设置-&gt;管理-&gt;更改系统区域设置</code>在这里我选择了<code>中文简体-新加坡</code>，然后重启。</p></li><li><p>重启后会发现乱码消失了，然后将新加坡换回中国就好了(也可以不换)。</p></li><li><p>如果还有问题，比如说我有一个脚本是爬取菜鸟教程的设计模式的文章，爬取文章title的时候出现控制台乱码，但是爬取其他比如百度的就正常，这可能是网站的编码压缩原因(那就需要你自己进行解压缩)。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windwos </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Chrome插件</title>
      <link href="/2019/04/27/Chrome%E6%8F%92%E4%BB%B6/"/>
      <url>/2019/04/27/Chrome%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><ul><li>关于Chrome上一些好用的插件(需要科学上网)</li></ul><a id="more"></a><h4 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h4><ul><li><strong>AdGuard广告拦截器</strong><ul><li>看名字就知道是拦截各大网站广告的插件。这个插件分为免费和付费版，个人用的话免费版是足够。它的拦截率还是很不错的，而且里面有各种拦截的规则，支持自定义和自己拦截元素，更新规则的频率还可以。</li><li><a href="https://chrome.google.com/webstore/detail/adguard-adblocker/bgnkhhnnamicmpeenaelnjfhikgbkllg?utm_source=chrome-ntp-icon" target="_blank" rel="noopener">URL链接</a></li></ul></li></ul><hr><ul><li><strong>Infinity 新标签页</strong><ul><li>提供新的标签页的插件。这个插件可以自定义新标签页的搜索引擎、壁纸，以及一些好用的工具，避免每次需要打开一些常用的网页的时候还要搜索打开。它带有云端备份和同步的功能，还带有工具商店可以供大家选择。</li><li><a href="https://chrome.google.com/webstore/detail/infinity-new-tab-producti/dbfmnekepjoapopniengjbcpnbljalfg" target="_blank" rel="noopener">URL链接</a></li></ul></li></ul><hr><ul><li><strong>Stylus</strong><ul><li>Stylus 是一个调整网页外观的用户样式管理器。这个插件可以为许多知名的网站提供精美的主题和皮肤，有相关的主题和皮肤网站供大家下载。</li><li><a href="https://chrome.google.com/webstore/detail/stylus/clngdbkpkpeebahjckkjfobafhncgmne" target="_blank" rel="noopener">URL链接</a></li><li><a href="https://userstyles.org/" target="_blank" rel="noopener">主题库</a></li></ul></li></ul><hr><ul><li><strong>LastPass: Free Password Manager</strong><ul><li>一款密码管理器。这个插件可以加密保存你的密码(听说加密算法很复杂)，方便你在任何时候浏览网页一键登录，并且可以避免密码保存在本地的风险(我还是比较相信云端的)，而且可以导入你的chrome保存的密码与管理密码。</li><li><a href="https://chrome.google.com/webstore/detail/lastpass-free-password-ma/hdokiejnpimakedhajhdlcegeplioahd" target="_blank" rel="noopener">URL链接</a></li></ul></li></ul><hr><ul><li><strong>Tampermonkey BETA</strong><ul><li>一款加载网页脚本的插件。这个插件可以用来加载一些自定义的脚本，用来美化浏览器并实现一些你想要的功能。它提供了一个脚本网站方便用户下载和发布相关的脚本。</li><li><a href="https://chrome.google.com/webstore/detail/tampermonkey-beta/gcalenpjmijncebpfijmoaglllgpjagf" target="_blank" rel="noopener">URL链接</a></li><li><a href="https://greasyfork.org/zh-CN/" target="_blank" rel="noopener">脚本库</a></li></ul></li></ul><hr><ul><li><strong>简 悦</strong><ul><li>一款提供阅读的插件。这个插件将网页进行简化，提供一个合适阅读的排版。用户可以进行相关的偏好设置(选项还挺多，并且有多种模式)，并且提供了相关的论坛供用户交流。</li><li><a href="http://ksria.com/simpread/" target="_blank" rel="noopener">URL链接</a></li></ul></li></ul><hr><ul><li><strong>Google 翻译</strong><ul><li>这个插件不用说了。</li><li><a href="https://chrome.google.com/webstore/detail/google-translate/aapbdbdomjkkjkaonfhkkikfgjllcleb" target="_blank" rel="noopener">URL链接</a></li></ul></li></ul><hr><ul><li><strong>有道词典Chrome划词插件</strong><ul><li>这个插件主要就是方便大家看英文页面。支持查词、长句翻译。个人感觉翻译的质量还可以。</li><li><a href="https://chrome.google.com/webstore/detail/%E6%9C%89%E9%81%93%E8%AF%8D%E5%85%B8chrome%E5%88%92%E8%AF%8D%E6%8F%92%E4%BB%B6/eopjamdnofihpioajgfdikhhbobonhbb" target="_blank" rel="noopener">URL链接</a></li></ul></li></ul><hr><ul><li><strong>沙拉查词-聚合词典划词翻译</strong><ul><li>这个插件和有道功能相似。但是这个聚合了好几个翻译方案，并且使用起来也很方便。可以搭配有道进行使用。</li><li><a href="https://chrome.google.com/webstore/detail/%E6%B2%99%E6%8B%89%E6%9F%A5%E8%AF%8D-%E8%81%9A%E5%90%88%E8%AF%8D%E5%85%B8%E5%88%92%E8%AF%8D%E7%BF%BB%E8%AF%91/cdonnmffkdaoajfknoeeecmchibpmkmg/related" target="_blank" rel="noopener">URL链接</a></li></ul></li></ul><hr><ul><li><strong>分享到微信</strong><ul><li>这个插件主要的目的就是让大家可以把网页分享到微信</li><li><a href="https://chrome.google.com/webstore/detail/%E5%88%86%E4%BA%AB%E5%88%B0%E5%BE%AE%E4%BF%A1/gjmlaljbhjlbmdgdglcnilnfjeignbij" target="_blank" rel="noopener">URL链接</a></li></ul></li></ul><hr><ul><li><strong>高效网页截图编辑插件</strong><ul><li>一款网页截图插件。可以像画图软件那样用直线、箭头、圆圈、文字做出标识。并可以方便的通过链接或者附件分享。目前使用的是Snipaste所以这款插件没有使用了。</li><li><a href="https://chrome.google.com/webstore/detail/explain-and-send-screensh/mdddabjhelpilpnpgondfmehhcplpiin" target="_blank" rel="noopener">URL链接</a></li></ul></li></ul><hr><ul><li><strong>Fatkun图片批量下载</strong><ul><li>一款下载图片的插件。很不错的插件，不过我用的场合不多。</li><li><a href="https://chrome.google.com/webstore/detail/fatkun-batch-download-ima/nnjjahlikiabnchcpehcpkdeckfgnohf" target="_blank" rel="noopener">URL链接</a></li></ul></li></ul><hr><ul><li><strong>OneTab</strong><ul><li>一款节约Chrome内存减轻标签页混乱的插件。如果发现自己有太多的标签页时，单击OneTab图标，将所有标签页转换成一个列表。当需要再次访问这些标签页时，可以单独或全部恢复就好了。</li><li><a href="https://chrome.google.com/webstore/detail/onetab/chphlpgkkbolifaimnlloiipkdnihall" target="_blank" rel="noopener">URL链接</a></li></ul></li></ul><hr><ul><li><strong>Octotree</strong><ul><li>一款显示github的仓库代码树的插件。每次查看github仓库的代码的时候非常麻烦，这款插件简化了许多的操作。</li><li><a href="https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnag" target="_blank" rel="noopener">URL链接</a></li></ul></li></ul><hr><ul><li><strong>Vimium</strong><ul><li>一款让你的浏览器像操作Vim一样的插件。如果你是Vim爱好者，或者你喜欢简单的操作方式，你都可以尝试这款插件。</li><li><a href="https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb" target="_blank" rel="noopener">URL链接</a></li></ul></li></ul><hr><ul><li><strong>IDM Integration Module</strong><ul><li>一款下载插件，需要配合IDM客户端来使用(收费，但是不贵)。这个插件可以监听各大浏览器，代替浏览器自己的下载器，而且它支持多种格式和多线程下载，配合一些脚本，基本可以下载所有的东西。</li><li><a href="https://chrome.google.com/webstore/detail/idm-integration-module/ngpampappnmepgilojfohadhhmbhlaek" target="_blank" rel="noopener">URL链接</a></li></ul></li></ul><hr><ul><li><strong>Proxy SwitchyOmega</strong><ul><li>一款Chrome的代理切换插件。目前我主要在Ubuntu下科学上网使用，Windows下使用酸酸乳就好了。</li><li><a href="https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif" target="_blank" rel="noopener">URL链接</a></li></ul></li></ul><hr><ul><li><strong>WEB前端助手(FeHelper)</strong><ul><li>前端开发和爬虫使用。内置了很多的小工具，再也不用费事了。</li><li><a href="https://chrome.google.com/webstore/detail/web%E5%89%8D%E7%AB%AF%E5%8A%A9%E6%89%8Bfehelper/pkgccpejnmalmdinmhkkfafefagiiiad" target="_blank" rel="noopener">URL链接</a></li></ul></li></ul><hr><ul><li><strong>XPath Helper</strong><ul><li>爬虫使用。写xpath表达式进行预览。</li><li><a href="https://chrome.google.com/webstore/detail/xpath-helper/hgimnogjllphhhkhlmebbmlgjoejdpjl" target="_blank" rel="noopener">URL链接</a></li></ul></li></ul><hr><ul><li><strong>User-Agent Switcher</strong><ul><li>爬虫使用。用来切换UA，查看网页的情况。</li><li><a href="https://chrome.google.com/webstore/detail/user-agent-switcher/clddifkhlkcojbojppdojfeeikdkgiae" target="_blank" rel="noopener">URL链接</a></li></ul></li></ul><hr><ul><li><strong>类似的网站 - 发现相关网站</strong><ul><li>主要功能就是发现类似的网站。尤其是在我们找资源的时候，这个网站没有，但是往往在另外一个存在。</li><li><a href="https://chrome.google.com/webstore/detail/similar-sites-discover-re/necpbmbhhdiplmfhmjicabdeighkndkn" target="_blank" rel="noopener">URL链接</a></li></ul></li></ul><hr><ul><li><strong>Video Speed Controller</strong><ul><li>一款控制HTML5视频播放速度的插件。对于我这种经常需要看视频的人，往往一些视频需要加速，但是好多网站不提供倍速或者最多2倍速，很浪费时间。这款插件可以最高提供16倍速，配合一些HTML5播放的脚本，不用太爽。</li><li><a href="https://chrome.google.com/webstore/detail/video-speed-controller/nffaoalbilbmmfgbnbgppjihopabppdk" target="_blank" rel="noopener">URL链接</a></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Chrome </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>随笔2019-04-26</title>
      <link href="/2019/04/26/%E9%9A%8F%E7%AC%942019-04-26/"/>
      <url>/2019/04/26/%E9%9A%8F%E7%AC%942019-04-26/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><ul><li>关于互联网的一些瞎扯。</li></ul><a id="more"></a><h4 id="随笔"><a href="#随笔" class="headerlink" title="随笔"></a>随笔</h4><p>&emsp;&emsp;去年秋招结束后，各大公司就相继出现裁员的情况，更甚的是许多大公司也有出现毁约应届生的情况。看到这些新闻，我知道一些变化发生了。首先，互联网的红利已经没有了，可以看到今年春招的要求变得更高了，公司内部也开始裁员并消化以前抢占市场所招来的人才，也不会出现以前随便培训一下就能找到ok的工作的情况。其次，随着中国互联网的发展，门槛是越来越低，市场的一般需求也趋于饱和，大家都开始提高招聘标准。<br>&emsp;&emsp;这些情况的出现，也反映在教育和资源方面：转行到计算机的人每年都在增长，去年和今年达到高峰，明年可能会更高、读研的人也越来越多，并且大多数都是想考一个和计算机相关的专业导致今年各大优秀院校的计算机院和软院全部爆满、网上的资源也唾手可得，网课及相关资料一大堆。<br>&emsp;&emsp;我想，后面可能会出现更激烈的优胜劣汰，并且一时半会不会发生大的改变。这个时候应对的方法就是努力的提升自我，掌握核心技术。<br>&emsp;&emsp;看大佬们的文章看的多了，感觉自己也会瞎扯了，哈哈！</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>windows10命令</title>
      <link href="/2019/04/20/windows10%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/04/20/windows10%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><ul><li>记录<code>window10</code>CMD下面的一些命令</li></ul><a id="more"></a><h4 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br></pre></td><td class="code"><pre><span class="line">1. calc：启动计算器</span><br><span class="line"></span><br><span class="line">2. appwiz.cpl：程序和功能</span><br><span class="line"></span><br><span class="line">3. certmgr.msc：证书管理实用程序</span><br><span class="line"></span><br><span class="line">   4. charmap：启动字符映射表</span><br><span class="line"></span><br><span class="line">   5. chkdsk.exe：Chkdsk磁盘检查(管理员身份运行命令提示符)</span><br><span class="line"></span><br><span class="line">   6. cleanmgr: 打开磁盘清理工具</span><br><span class="line"></span><br><span class="line">   7. cliconfg：SQL SERVER 客户端网络实用工具</span><br><span class="line"></span><br><span class="line">   8. cmstp：连接管理器配置文件安装程序</span><br><span class="line"></span><br><span class="line">   9. cmd.exe：CMD命令提示符</span><br><span class="line"></span><br><span class="line">   10. 自动关机命令</span><br><span class="line"></span><br><span class="line">       Shutdown -s -t 600：表示600秒后自动关机</span><br><span class="line">       </span><br><span class="line">       Shutdown -r -t 600：表示600秒后自动重启</span><br><span class="line"></span><br><span class="line">       shutdown -a ：可取消定时关机</span><br><span class="line"></span><br><span class="line">       rundll32 user32.dll,LockWorkStation：表示锁定计算机</span><br><span class="line"></span><br><span class="line">   11. colorcpl：颜色管理，配置显示器和打印机等中的色彩</span><br><span class="line"></span><br><span class="line">   12. CompMgmtLauncher：计算机管理</span><br><span class="line"></span><br><span class="line">   13. compmgmt.msc：计算机管理</span><br><span class="line"></span><br><span class="line">   14. credwiz：备份或还原储存的用户名和密码</span><br><span class="line"></span><br><span class="line">   15. comexp.msc：打开系统组件服务</span><br><span class="line"></span><br><span class="line">   16. control：控制面版</span><br><span class="line"></span><br><span class="line">   17. dcomcnfg：打开系统组件服务</span><br><span class="line"></span><br><span class="line">   18. Dccw：显示颜色校准</span><br><span class="line"></span><br><span class="line">   19. devmgmt.msc：设备管理器</span><br><span class="line"></span><br><span class="line">   20. desk.cpl：屏幕分辨率</span><br><span class="line"></span><br><span class="line">   21. dfrgui：优化驱动器 Windows 7→dfrg.msc：磁盘碎片整理程序</span><br><span class="line"></span><br><span class="line">   22. dialer：电话拨号程序</span><br><span class="line"></span><br><span class="line">   23. diskmgmt.msc：磁盘管理</span><br><span class="line"></span><br><span class="line">   24. dvdplay：DVD播放器</span><br><span class="line"></span><br><span class="line">   25. dxdiag：检查DirectX信息</span><br><span class="line"></span><br><span class="line">   26. eudcedit：造字程序</span><br><span class="line"></span><br><span class="line">   27. eventvwr：事件查看器</span><br><span class="line"></span><br><span class="line">   28. explorer：打开资源管理器</span><br><span class="line"></span><br><span class="line">   29. Firewall.cpl：Windows防火墙</span><br><span class="line"></span><br><span class="line">   30. FXSCOVER：传真封面编辑器</span><br><span class="line"></span><br><span class="line">   31. fsmgmt.msc：共享文件夹管理器</span><br><span class="line"></span><br><span class="line">   32. gpedit.msc：组策略</span><br><span class="line"></span><br><span class="line">   33. hdwwiz.cpl：设备管理器</span><br><span class="line"></span><br><span class="line">   34. inetcpl.cpl：Internet属性</span><br><span class="line"></span><br><span class="line">   35. intl.cpl：区域</span><br><span class="line"></span><br><span class="line">   36. iexpress：木马捆绑工具，系统自带</span><br><span class="line"></span><br><span class="line">   37. joy.cpl：游戏控制器</span><br><span class="line"></span><br><span class="line">   38. logoff：注销命令</span><br><span class="line"></span><br><span class="line">   39. lusrmgr.msc：本地用户和组</span><br><span class="line"></span><br><span class="line">   40. lpksetup：语言包安装/删除向导，安装向导会提示下载语言包</span><br><span class="line"></span><br><span class="line">   41. lusrmgr.msc：本机用户和组</span><br><span class="line"></span><br><span class="line">   42. main.cpl：鼠标属性</span><br><span class="line"></span><br><span class="line">   43. mmsys.cpl：声音</span><br><span class="line"></span><br><span class="line">   44. magnify：放大镜实用程序</span><br><span class="line"></span><br><span class="line">   45. mem.exe：显示内存使用情况(如果直接运行无效，可以先管理员身份运行命令提示符，在命令提示符里输入mem.exe&gt;d:a.txt 即可打开d盘查看a.txt，里面的就是内存使用情况了。当然什么盘什么文件名可自己决定。)</span><br><span class="line"></span><br><span class="line">   46. MdSched:Windows内存诊断程序</span><br><span class="line"></span><br><span class="line">   47. mmc：打开控制台</span><br><span class="line"></span><br><span class="line">   48. mobsync：同步命令</span><br><span class="line"></span><br><span class="line">   49. mplayer2：简易widnows media player</span><br><span class="line"></span><br><span class="line">   50. Msconfig.exe：系统配置实用程序</span><br><span class="line"></span><br><span class="line">   51. msdt：微软支持诊断工具</span><br><span class="line"></span><br><span class="line">   52. msinfo32：系统信息</span><br><span class="line"></span><br><span class="line">   53. mspaint：画图</span><br><span class="line"></span><br><span class="line">   54. Msra：Windows远程协助</span><br><span class="line"></span><br><span class="line">   55. mstsc：远程桌面连接</span><br><span class="line"></span><br><span class="line">   56. NAPCLCFG.MSC：客户端配置</span><br><span class="line"></span><br><span class="line">   57. ncpa.cpl：网络连接</span><br><span class="line"></span><br><span class="line">   58. narrator：屏幕“讲述人”</span><br><span class="line"></span><br><span class="line">   59. Netplwiz：高级用户帐户控制面板，设置登陆安全相关的选项</span><br><span class="line"></span><br><span class="line">   60. netstat : an(TC)命令检查接口</span><br><span class="line"></span><br><span class="line">   61. notepad：打开记事本</span><br><span class="line"></span><br><span class="line">   62. Nslookup：IP地址侦测器</span><br><span class="line"></span><br><span class="line">   63. odbcad32：ODBC数据源管理器</span><br><span class="line"></span><br><span class="line">   64. OptionalFeatures：打开“打开或关闭Windows功能”对话框</span><br><span class="line"></span><br><span class="line">   65. osk：打开屏幕键盘</span><br><span class="line"></span><br><span class="line">   66. perfmon.msc：计算机性能监测器</span><br><span class="line"></span><br><span class="line">   67. perfmon：计算机性能监测器</span><br><span class="line"></span><br><span class="line">   68. PowerShell：提供强大远程处理能力</span><br><span class="line"></span><br><span class="line">   69. printmanagement.msc：打印管理</span><br><span class="line"></span><br><span class="line">   70. powercfg.cpl：电源选项</span><br><span class="line"></span><br><span class="line">   71. psr：问题步骤记录器</span><br><span class="line"></span><br><span class="line">   72. Rasphone：网络连接</span><br><span class="line"></span><br><span class="line">   73. Recdisc：创建系统修复光盘</span><br><span class="line"></span><br><span class="line">   74. Resmon：资源监视器</span><br><span class="line"></span><br><span class="line">   75. Rstrui：系统还原</span><br><span class="line"></span><br><span class="line">   76. regedit.exe：注册表</span><br><span class="line"></span><br><span class="line">   77. regedt32：注册表编辑器</span><br><span class="line"></span><br><span class="line">   78. rsop.msc：组策略结果集</span><br><span class="line"></span><br><span class="line">   79. sdclt：备份状态与配置，就是查看系统是否已备份</span><br><span class="line"></span><br><span class="line">   80. secpol.msc：本地安全策略</span><br><span class="line"></span><br><span class="line">   81. services.msc：本地服务设置</span><br><span class="line"></span><br><span class="line">   82. sfc /scannow：扫描错误并复原/windows文件保护</span><br><span class="line"></span><br><span class="line">   83. sfc.exe：系统文件检查器</span><br><span class="line"></span><br><span class="line">   84. shrpubw：创建共享文件夹</span><br><span class="line"></span><br><span class="line">   85. sigverif：文件签名验证程序</span><br><span class="line"></span><br><span class="line">   86. slui：Windows激活，查看系统激活信息</span><br><span class="line"></span><br><span class="line">   87. slmgr.vbs -dlv ：显示详细的许可证信息</span><br><span class="line"></span><br><span class="line">   88. snippingtool：截图工具，支持无规则截图</span><br><span class="line"></span><br><span class="line">   89. soundrecorder：录音机，没有录音时间的限制</span><br><span class="line"></span><br><span class="line">   90. StikyNot：便笺</span><br><span class="line"></span><br><span class="line">   91. sysdm.cpl：系统属性</span><br><span class="line"></span><br><span class="line">   92. sysedit：系统配置编辑器</span><br><span class="line"></span><br><span class="line">   93. syskey：系统加密，一旦加密就不能解开，保护系统的双重密码</span><br><span class="line"></span><br><span class="line">   94. taskmgr：任务管理器(旧版)</span><br><span class="line"></span><br><span class="line">   95. TM任务管理器(新版)</span><br><span class="line"></span><br><span class="line">   96. taskschd.msc：任务计划程序</span><br><span class="line"></span><br><span class="line">   97. timedate.cpl：日期和时间</span><br><span class="line"></span><br><span class="line">   98. UserAccountControlSettings用户账户控制设置</span><br><span class="line"></span><br><span class="line">   99. utilman：辅助工具管理器</span><br><span class="line"></span><br><span class="line">   100 .wf.msc：高级安全Windows防火墙</span><br><span class="line"></span><br><span class="line">   101. WFS：Windows传真和扫描</span><br><span class="line"></span><br><span class="line">   102. wiaacmgr：扫描仪和照相机向导</span><br><span class="line"></span><br><span class="line">   103. winver：关于Windows</span><br><span class="line"></span><br><span class="line">   104. wmimgmt.msc：打开windows管理体系结构(WMI)</span><br><span class="line"></span><br><span class="line">   105. write：写字板</span><br><span class="line"></span><br><span class="line">   106. wscui.cpl：操作中心</span><br><span class="line"></span><br><span class="line">   107. wuapp：Windows更新</span><br><span class="line"></span><br><span class="line">   108. wscript：windows脚本宿主设置</span><br></pre></td></tr></table></figure><h4 id="References"><a href="#References" class="headerlink" title="References"></a>References</h4><ul><li><a href="http://www.windowszj.com/news/win10/28486.html" target="_blank" rel="noopener">windows系统之家</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Others </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>C++迭代器失效</title>
      <link href="/2018/12/14/C++%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%A4%B1%E6%95%88/"/>
      <url>/2018/12/14/C++%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%A4%B1%E6%95%88/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><ul><li>C++迭代器很好用，但是使用的时候一不留神就会出错，迭代器失效就是其中之一。</li></ul><a id="more"></a><h4 id="迭代器失效"><a href="#迭代器失效" class="headerlink" title="迭代器失效"></a>迭代器失效</h4><ol><li><p>list, set, map容器</p><ul><li>在使用 list、set 或 map遍历删除某些元素时可以这样使用：</li><li><p>正确写法1：</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; List;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;::iterator itList;</span><br><span class="line"><span class="keyword">for</span> (itList = List.begin(); itList != List.end(); ) &#123;</span><br><span class="line">    <span class="keyword">if</span> (WillDelete(*itList)) &#123;</span><br><span class="line">         itList = List.erase(itList);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         itList++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>正确写法2：</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; List;</span><br><span class="line">   <span class="built_in">std</span>::<span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;::iterator itList;</span><br><span class="line">   <span class="keyword">for</span> (itList = List.begin(); itList != List.end(); ) &#123;</span><br><span class="line">       <span class="keyword">if</span> (WillDelete( *itList)) &#123;</span><br><span class="line">           List.erase(itList++);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           itList++;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>错误写法1：</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; List;</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;::iterator itList;</span><br><span class="line">      <span class="keyword">for</span> (itList = List.begin(); itList != List.end(); itList++) &#123;</span><br><span class="line">          <span class="keyword">if</span> (WillDelete(*itList)) &#123;</span><br><span class="line">              List.erase(itList);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></li><li><p>错误写法2：</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; List;</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;::iterator itList;</span><br><span class="line">      <span class="keyword">for</span> (itList = List.begin(); itList != List.end(); ) &#123;</span><br><span class="line">          <span class="keyword">if</span> (WillDelete(*itList)) &#123;</span><br><span class="line">              itList = List.erase(++itList);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               itList++;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></li><li><p>分析：</p><ol><li>正确使用方法1：通过erase方法的返回值来获取下一个元素的位置</li><li>正确使用方法2：在调用erase方法之前先使用 “++” 来获取下一个元素的位置</li><li>错误使用方法1：在调用erase方法之后使用 “++” 来获取下一个元素的位置，由于在调用erase方法以后，该元素的位置已经被删除，如果在根据这个旧的位置来获取下一个位置，则会出现异常。</li><li>错误使用方法2：同错误使用方法1</li></ol></li></ul></li><li><p>vector, deque容器</p><ul><li>在使用 vector、deque遍历删除元素时，也可以通过erase的返回值来获取下一个元素的位置</li><li><p>正确写法：</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; Vec;</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator itVec;</span><br><span class="line">      <span class="keyword">for</span>(itVec = Vec.begin(); itVec != Vec.end(); ) &#123;</span><br><span class="line">          <span class="keyword">if</span>(WillDelete( *itVec) ) &#123;</span><br><span class="line">              itVec = Vec.erase(itVec);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              itList++;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>注意：</strong></p><ol><li><p>vector、deque 不能像上面的<code>正确使用方法2</code>的办法来遍历删除</p><ol><li>对于关联容器(如map, set, multimap,multiset)，删除当前的iterator，<strong>仅仅会使当前的iterator失效</strong>，只要在erase时，递增当前iterator即可。这是因为map之类的容器，使用了红黑树来实现，插入、删除一个结点不会对其他结点造成影响</li><li>对于序列式容器(如vector,deque)，<strong>删除当前的iterator会使后面所有元素的iterator都失效</strong>。这是因为vetor,deque使用了连续分配的内存，删除一个元素导致后面所有的元素会向前移动一个位置。但是erase方法可以返回下一个有效的iterator</li><li>对于list来说，它使用了不连续分配的内存，并且它的erase方法也会返回下一个有效的iterator，因此上面两种方法都可以使用</li></ol></li></ol></li></ul></li></ol><h4 id="相关容器介绍"><a href="#相关容器介绍" class="headerlink" title="相关容器介绍"></a>相关容器介绍</h4><ol><li><p>vector</p><ul><li>内部数据结构：数组</li><li>访问：随机访问每个元素，所需要的时间为常量</li><li>增删元素：在末尾增加或删除元素所需时间与元素数目无关，在中间或开头增加或删除元素所需时间随元素数目呈线性变化</li><li>迭代器：vector的迭代器在内存重新分配时将失效（它所指向的元素在该操作的前后不再相同）。当把超过capacity()-size()个元素插入vector中时，内存会重新分配，所有的迭代器都将失效；否则，指向当前元素以后的任何元素的迭代器都将失效。当删除元素时，指向被删除元素以后的任何元素的迭代器都将失效</li></ul></li><li><p>deque</p><ul><li>内部数据结构：数组</li><li>访问：随机访问每个元素，所需要的时间为常量</li><li>增删元素：在开头和末尾增加元素所需时间与元素数目无关，在中间增加或删除元素所需时间随元素数目呈线性变化</li><li>迭代器： 增加任何元素都将使deque的迭代器失效。在deque的中间删除元素将使迭代器失效。在deque的头或尾删除元素时，只有指向该元素的迭代器失效</li></ul></li><li><p>lsit</p><ul><li>内部数据结构：双向环状链表</li><li>访问：不能随机访问一个元素</li><li>增删元素：在开头、末尾和中间任何地方增加或删除元素所需时间都为常量</li><li>迭代器：增加任何元素都不会使迭代器失效。删除元素时，除了指向当前被删除元素的迭代器外，其它迭代器都不会失效</li></ul></li><li><p>slist</p><ul><li>内部数据结构：单向链表</li><li>访问：不可双向遍历，只能从前到后地遍历</li><li>增删元素：在开头、末尾和中间任何地方增加或删除元素所需时间都为常量</li><li>迭代器：增加任何元素都不会使迭代器失效。删除元素时，除了指向当前被删除元素的迭代器外，其它迭代器都不会失效</li></ul></li><li><p>stack</p><ul><li>内部数据结构：适配器，它可以将任意类型的序列容器转换为一个堆栈，一般使用deque作为支持的序列容器</li><li>访问：不能遍历整个stack</li><li>增删元素：元素只能后进先出</li></ul></li><li><p>queue</p><ul><li>内部数据结构：适配器，它可以将任意类型的序列容器转换为一个队列，一般使用deque作为支持的序列容器</li><li>访问：不能遍历整个queue</li><li>增删元素：元素只能先进先出</li></ul></li><li><p>priority_queue</p><ul><li>内部数据结构：适配器，它可以将任意类型的序列容器转换为一个优先级队列，一般使用vector作为底层存储方式</li><li>访问：只能访问第一个元素，不能遍历整个priority_queue</li><li>增删元素：第一个元素始终是优先级最高的一个元素</li></ul></li><li><p>set(hash_set不解释了)</p><ul><li>内部数据结构：红黑树</li><li>访问：随机访问</li><li>增删元素：键和值相等且键唯一</li><li>迭代器：如果迭代器所指向的元素被删除，则该迭代器失效。其它任何增加、删除元素的操作都不会使迭代器失效</li></ul></li><li><p>map(hash_map不解释了)</p><ul><li>内部数据结构：红黑树</li><li>访问：随机访问</li><li>增删元素：键唯一</li><li>迭代器：如果迭代器所指向的元素被删除，则该迭代器失效。其它任何增加、删除元素的操作都不会使迭代器失效</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>C++陷阱与用法</title>
      <link href="/2018/12/14/C++%E9%99%B7%E9%98%B1%E4%B8%8E%E7%94%A8%E6%B3%95/"/>
      <url>/2018/12/14/C++%E9%99%B7%E9%98%B1%E4%B8%8E%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><ul><li>C++是一门很容易采坑的语言，所以对其一些常见的陷阱和误解进行收集与总结，同时对一些新的特性进行了解。</li><li>此文包含了自己遇到的问题以及在公司看到一位师兄写的文章的一些内容，外加一些网上看到的(代码已验证)</li></ul><a id="more"></a><h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><ol><li><p><strong>编译器为什么不给局部变量和成员变量做默认初始化</strong></p><ul><li><strong>因为效率</strong>，C++被设计为系统级的编程语言，效率是优先考虑的方向，c++秉持的一个设计哲学是不为不必要的操作付出任何额外的代价</li><li>从安全的角度出发，定义变量的时候赋初值是一个好的习惯，<strong>很多错误皆因未正确初始化而起</strong>，C++11支持成员变量定义的时候直接初始化，成员变量尽量在成员初始化列表里初始化，且要按定义的顺序初始化</li></ul></li><li><p><strong>全局变量</strong></p><ul><li><strong>C++在不同模块（源文件）里定义的全局变量，不保证构造顺序</strong>；但保证在同一模块（源文件）里定义的全局变量，按定义的先后顺序构造，按定义的相反次序析构</li><li><strong>如果全局变量有依赖关系，那么就把它们放在同一个源文件定义，且按正确的顺序定义，确保依赖关系正确</strong>，而不是定义在不同源文件；对于系统中的单件，单件依赖也要注意这个问题</li></ul></li><li><p><strong>new与delete</strong></p><ul><li>delete之后加上语句<code>delete p; p = nullptr;</code>（避免重复释放）</li><li>保证<code>delete[]</code>匹配<code>new[]</code>和<code>delete</code>匹配<code>new</code></li><li>例外：<code>typedef T type[N];</code> <code>T * pT = new type; delete[] pT;</code></li></ul></li><li><p><strong>模板特化</strong></p><ul><li>C++ 本身要求，那几个自动生成的特殊的构造函数以及运算符必须是非模版</li><li>模版产生的函数一定与普通函数不等价。也就是意味着，模版无法生成那些函数与运算符，也不能重写虚函数</li><li>C++ 不允许在类域内显式特化类成员函数</li></ul></li><li><p><strong>enum hack</strong></p><ul><li><code>enum hack</code>的行为更像<code>#define</code>而不是<code>const</code>，如果你不希望别人得到你的常量成员的指针或引用，你可以用<code>enum hack</code>替代之。（为什么不直接用<code>#define</code>呢？首先，因为<code>#define</code>是字符串替换，所以不利于程序调试。其次，<code>#define</code>的可视范围难以控制，比如你怎么让<code>#define</code>定义的常量只在一个类内可见呢？除非你用<code>#undef</code></li><li>使用<code>enum hack</code>不会导致 “不必要的内存分配”</li><li><p>使用技巧：</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// static const int GameTurn;</span></span><br><span class="line">    <span class="keyword">enum</span> &#123;GameTurn = <span class="number">10</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> scores[GameTurn];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// const int Game::GameTurn = 10;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>#define宏</strong></p><ul><li>多用圆括号<code>#define ADD(a, b) ((a)+(b))</code></li><li><p>看情况使用花括号(用大括号将宏定义的多条表达式括起来)(<code>if语句`</code>do{}while(0)语句`等)</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SWAP(a,b) \</span></span><br><span class="line">&#123; \</span><br><span class="line">    a ^=b; \</span><br><span class="line">    b ^=a; \</span><br><span class="line">    a ^=b; \</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>结构体的string赋值</strong></p><ul><li><p>代码1：</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line">      <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line">      <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line">      <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">      </span><br><span class="line">      <span class="class"><span class="keyword">struct</span> <span class="title">World</span> &#123;</span></span><br><span class="line">          <span class="built_in">std</span>::<span class="built_in">string</span> name;</span><br><span class="line">          <span class="class"><span class="keyword">struct</span> <span class="title">World</span> *<span class="title">next</span>;</span></span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          World *wr = (World*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(World));</span><br><span class="line">          wr-&gt;name = <span class="string">"hello"</span>;</span><br><span class="line">          <span class="built_in">cout</span> &lt;&lt; wr-&gt;name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><ul><li>最终的输出不是简单的一个<code>hello</code>，可以发现返回的code不是0并且会运行很长时间(Segmentation fault)。原因是这里用的是C中的<code>malloc</code>而不是<code>new</code></li><li><code>new</code>在分配内存时会调用默认的构造函数，而<code>malloc</code>不会调用(string没有调用构造函数导致错误)</li></ul></li><li><p>代码2：</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line">      <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;  </span></span></span><br><span class="line">      <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">          <span class="built_in">std</span>::<span class="built_in">string</span> s = <span class="string">"hello"</span>;  </span><br><span class="line">          <span class="keyword">const</span> <span class="keyword">char</span> *str = s.c_str();  <span class="comment">// 指针常量  </span></span><br><span class="line">          <span class="built_in">cout</span> &lt;&lt; str &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">          s[<span class="number">1</span>] = <span class="string">'m'</span>;  </span><br><span class="line">          <span class="built_in">cout</span> &lt;&lt; str &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line"></span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><ul><li>两个输出分别为<code>hello</code>和<code>hmllo</code>。原因是<code>string的c_str()</code>返回的指针是由string管理的，因此它的生命期是string对象的生命期，而string类的实现实际上封装着一个<code>char*</code>的指针，而<code>c_str()</code>直接返回该指针的引用，因此string对象的改变会直接影响已经执行过的c_str()返回的指针引用</li></ul></li></ul></li><li><p><strong>eof与fail</strong></p><ul><li><strong>只要遇到结束符，流就会将状态置为EOF，而不管置位前的操作是否成功</strong>。因此，不能在调用函数后通过eof来判断函数调用是否读到文件末尾了，而应该直接判断调用本身是否成功</li><li><strong>在文件eof的时候也会同时置fail</strong>，所以，循环读取文件的时候，要将fail和eof结合起来使用：在循环判断中使用fail，fail失败后再使用eof</li></ul></li><li><p><strong>stream与buffer</strong></p><ul><li>前面<code>stream</code>后面<code>buffer</code></li><li>作用：<code>代表一个设备</code> <code>数据临时存储</code></li><li>访问方式：<code>FIFO</code> <code>随机访问</code></li><li><p>数据内容：<code>字符流</code> <code>二进制</code></p></li><li><p>当然，并不是说stream和buffer就毫无关系了，stream为了提高性能，实现的时候就用到了buffer</p></li></ul></li><li><p><strong>操作符短路</strong></p><ul><li><p>考虑以下函数：</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span>  Play::get() &#123;</span><br><span class="line">    <span class="keyword">if</span> (getApple() || getMelon()) &#123;</span><br><span class="line">        eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果<code>getApple()</code>返回<code>true</code>,就不会就不会调用<code>getMelon()</code>了。这就是操作符短路</li></ul></li><li><p>修改如下：</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span>  Play::get() &#123;</span><br><span class="line"><span class="keyword">bool</span> apple = getApple();</span><br><span class="line"><span class="keyword">bool</span> melon = getMelon();</span><br><span class="line">    <span class="keyword">if</span> (apple || melon) &#123;</span><br><span class="line">        eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>stl容器的遍历删除要小心迭代器失效，vector,list,map,set等各有不同的写法</strong> </p><ul><li>详情跳转<a href="http://roux.top/2018/12/14/C++%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%A4%B1%E6%95%88/">此文</a>    </li></ul></li><li><p><strong>理解const</strong></p><ul><li>积极的使用const，理解const不仅仅是一种语法层面的保护机制，也会影响程序的编译和运行（const常量会被编码到机器指令）</li></ul></li><li><p><strong>四种转型</strong></p><ul><li>尽量少用转型，强制类型转换是C Style，如果你的C++代码需要类型强转，你需要去考虑是否设计有问题</li></ul></li><li><p><strong>规范的代码</strong></p><ul><li>打开的句柄要关闭，加锁/解锁，new/delete，new[]/delete[]，malloc/free要配对，可以使用RAII技术防止资源泄露，编写符合规范的代码</li></ul></li><li><p><strong>抽象基类的析构函数要加virtual关键字</strong></p><ul><li>virtual dtor跟普通虚函数一样，基类指针指向子类对象的时候，delete ptr，根据虚函数特征，如果析构函数是普通函数，那么就调用ptr显式（基类）类型的析构函数；如果析构函数是virtual，则会调用子类的析构函数，然后再调用基类析构函数</li></ul></li><li><p><strong>避免在构造函数和析构函数里调用虚函数</strong></p><ul><li>构造函数里，对象并没有完全构建好，此时调用虚函数不一定能正确绑定，析构亦如此</li></ul></li><li><p><strong>协议尽量不要传float，如果传float要了解NaN的概念，要做好检查，避免恶意传播</strong></p></li><li><p><strong>字节对齐</strong></p><ul><li>字节对齐能让存储器访问速度更快。 </li><li>字节对齐跟cpu架构相关，有些cpu访问特定类型的数据必须在一定地址对齐的储存器位置，否则会触发异常。</li><li>字节对齐的另一个影响是调整结构体成员变量的定义顺序，有可能减少结构体大小，这在某些情况下，能节省内存</li></ul></li><li><p><strong>减少依赖，注意隔离</strong></p><ul><li>最大限度的减少文件间的依赖关系，用前向声明拆解相互依赖。了解pimpl技术。</li><li>头文件要自给自足，不要包含不必要的头文件，也不要把该包含的头文件推给user去包含，一句话，头文件包含要不多不少刚刚好</li></ul></li><li><p><strong>整型一般用int，long就好，用short，char需要很仔细，要防止溢出</strong></p><ul><li>大多数情况下，用int，long就很好，long一般等于机器字长，long能直接放到寄存器，硬件处理起来速度也更快</li><li>由于字节对齐，用short，char可能大小并不能真正减少，而且1,2个字节的整型位数太少，很容易溢出</li></ul></li><li><p><strong>std::map还是std::unorder_map</strong> </p><ul><li>想清楚他们的利弊，map是用红黑树做的，unorder_map底层是hash表做的，hash表相对于红黑树有更高的查找性能。hash表的效率取决于hash算法和冲突解决方法（一般是拉链法，hash桶），以及数据分布，如果负载因子高，就会降低命中率，为了提高命中率，就需要扩容，重新hash，而重新hash是很慢的，相当于卡一下。而红黑树有更好的平均复杂度，所以如果数据量不是特别大，map是胜任的</li></ul></li><li><p><strong>循环可终止</strong></p><ul><li><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">5</span>; i &gt;=<span class="number">0</span>; --i)</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>组合优先于继承，继承是一种最强的类间关系</strong></p></li><li><p><strong>了解延迟计算和分散计算</strong> </p><ul><li>分散计算是把任务分散，打碎，避免一次大计算量，卡住程序</li><li>延迟计算和分散计算都是常见的套路</li></ul></li><li><p><strong>从输入流获取数据，要做好数据不够的处理，要加try catch；没有被吞咽的exception，会被传播</strong></p></li><li><p><strong>内存拷贝小心内存越界；memcpy，memset有很强的限制，仅能用于<a href="http://roux.top/2018/12/13/C++%E4%B9%8BPOD%E7%B1%BB%E5%9E%8B/">POD结构</a>，不能作用于stl容器或者带有虚函数的类</strong></p><ul><li>带虚函数的类对象会有一个虚函数表的指针，memcpy将破坏该指针指向</li></ul></li><li><p><strong>用户stack空间很有限</strong></p><ul><li>一般而言，用户栈只有几兆（典型大小是4M，8M），所以栈上创建的对象不能太大；虽然递归函数能简化程序编写，但也常常带来运行速度变慢的问题，所以需要预估好递归深度，优先考虑非递归实现版本</li></ul></li><li><p><strong>函数调用的性能开销</strong></p><ul><li>函数调用的性能开销（栈帧建立和销毁，参数传递，控制转移），性能敏感函数考虑inline</li><li>X86_64体系结构因为通用寄存器数目增加到16个，所以64位系统下参数数目不多的函数调用，将会由寄存器传递代替压栈方式传递参数，但栈帧建立、撤销和控制转移依然会对性能有所影响</li></ul></li><li><p><strong>安全版本函数</strong></p><ul><li>用c标准库的安全版本（带n标识）替换非安全版本 ，比如用strncpy替代strcpy，用snprintf替代sprintf，用strncat代替strcat，用strncmp代替strcmp，memcpy(dst, src, n)要确保[dst，dst+n]和[src, src+n]都有有效的虚拟内存地址空间。；</li><li>多线程环境下，要用系统调用或者库函数的安全版本代替非安全版本（_r版本），谨记strtok，gmtime等标准c函数都不是线程安全的</li></ul></li><li><p><strong>理解std::vector的底层实现</strong></p><ul><li>vector是动态扩容的，2的次方往上翻，为了确保数据保存在连续空间，每次扩充，会将原member悉数拷贝到新的内存块； 不要保存vector内对象的指针，扩容会导致其失效 ；可以通过保存其下标index替代</li><li>运行过程中需要动态增删的vector，不宜存放大的对象本身 ，因为扩容会导致所有成员拷贝构造，消耗较大，可以通过保存对象指针替代</li><li>理解at()和operator[]的区别 ：at()会做下标越界检查，operator[]提供数组索引级的访问，在release版本下不会检查下标，VC会在Debug版本会检查；c++标准规定:operator[]不提供下标安全性检查</li><li>resize()是重置大小；reserve()是预留空间，并未改变size()，可避免多次扩容； clear()并不会导致空间收缩 ，如果需要释放空间，可以跟空的vector交换，std::vector <t>.swap(v)，c++11里shrink_to_fit()也能收缩内存</t></li></ul></li><li><p><strong>std::sort()的比较函数有很强的约束</strong></p><ul><li>如果要用，要自己提供比较函数或者函数对象，一定搞清楚什么叫<a href="http://roux.top/2018/12/13/%E4%B8%A5%E6%A0%BC%E5%BC%B1%E5%BA%8F/">严格弱排序</a></li><li>尽量对索引或者指针sort，而不是针对对象本身，因为如果对象比较大，交换（复制）对象比交换指针或索引更耗费</li></ul></li><li><p><strong>用sprintf格式化字符串的时候，类型和格式化符号要严格匹配，因为sprintf的函数实现里是按格式化串从栈上取参数，任何不一致，都有可能引起不可预知的错误； /usr/include/inttypes.h里定义了跨平台的格式化符号，比如PRId64用于格式化int64_t</strong></p></li><li><p><strong>了解智能指针，理解基于引用计数法的智能指针实现方式，了解所有权转移的概念，理解shared_ptr和unique_ptr的区别和适用场景</strong></p></li></ol><h4 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h4><ul><li>首先很感谢我认识的师兄，在他们那里学到了很多的知识</li><li>本文后面会不时的更新，有错误的地方点击右下角联系我，谢谢！</li></ul>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>C++ 严格弱序</title>
      <link href="/2018/12/13/%E4%B8%A5%E6%A0%BC%E5%BC%B1%E5%BA%8F/"/>
      <url>/2018/12/13/%E4%B8%A5%E6%A0%BC%E5%BC%B1%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><ul><li>学习C++11遇到的重要的点。</li></ul><a id="more"></a><h4 id="什么是严格弱序"><a href="#什么是严格弱序" class="headerlink" title="什么是严格弱序"></a>什么是严格弱序</h4><ul><li><code>C++关联容器</code>的有序容器对元素关键字的类型有要求，元素关键字的类型必须定义了<code>严格序（stick weak ordering）</code> ，以内置类型来说，C++都定义了<code>“&lt;”</code>操作符，这就是一个严格弱序，而<code>“&lt;=”</code>就不是一个严格弱序</li></ul><h4 id="表示与作用"><a href="#表示与作用" class="headerlink" title="表示与作用"></a>表示与作用</h4><ul><li><p>a小于b：<code>a &lt; b</code></p></li><li><p>a大于b：<code>a &gt; b</code></p></li><li><p>a等于b：<code>!(a &lt; b) &amp;&amp; !(a &gt; b)</code></p></li></ul><h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><ul><li>非自反性： 如果存在两个关键字，任何一个都不<code>严格弱序</code>于另一个，则这两个关键字是相等的，<code>即comp(a, a)必须是false</code></li><li>非对称性： 两个关键字不能同时<code>严格弱序</code>于对方，<code>即如果comp(a, b)和comp(b, a)的结果必然相反</code></li><li>传递性：如果a<code>严格弱序</code>于b，且b<code>严格弱序</code>于c，则a必须<code>严格弱序</code>于c，<code>即如果comp(a, b)为true，comp(b, c)为true，那么comp(a, c)必然为true</code></li></ul><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><ul><li>有序关联容器不允许存在相同的关键字，在用<code>compare函数</code>判断时，会认为相同的关键字是不相等的，因此会将两个相同的关键字插入容器中，这个行为是未定义的</li></ul>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>C++之POD类型</title>
      <link href="/2018/12/13/C++%E4%B9%8BPOD%E7%B1%BB%E5%9E%8B/"/>
      <url>/2018/12/13/C++%E4%B9%8BPOD%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><ul><li><p><code>POD(Plain Old Data)</code>是C++中非常重要的一个概念，用来描述一个类型的属性。其中<code>Plain</code>表示这个类型是个平凡的类型，<code>Old</code>表示其与C的兼容性(就意味着可以使用 memcpy() 函数进行操作)。</p></li><li><p>C++11中将POD划分为两个基本概念：<code>平凡的（trival）</code>和<code>标准布局（standardlayout）</code></p></li></ul><a id="more"></a><h4 id="平凡-trival"><a href="#平凡-trival" class="headerlink" title="平凡(trival)"></a>平凡(trival)</h4><ul><li>满足条件<ol><li><strong>不能写 <code>构造/析构函数</code>、<code>拷贝/移动构造函数</code>、<code>拷贝/移动赋值运算符</code></strong>，而是用编译器自动为我们生成，那这个数据就是“平凡的”。非要写的话，用 C++ 11 的 <code>default</code> 关键字。<ul><li>C++为我们提供了一个类模板来识别一个类是否平凡：<code>template &lt;typename T&gt; struct std::is_trival</code></li></ul></li><li><strong>不能有 <code>虚函数</code> 和 <code>虚基类</code></strong>。</li></ol></li></ul><h4 id="标准布局"><a href="#标准布局" class="headerlink" title="标准布局"></a>标准布局</h4><ul><li><p>满足条件</p><ol><li><strong>普通成员有相同的访问级别</strong></li><li><strong>第一个成员必须是自己的</strong>(也即类中第一个非静态成员的类型与其基类不同)</li><li><strong>只要有父类，普通成员只能在其中一个类中，不可分散</strong>(也即<code>派生类中有非静态成员，且只有一个仅包含静态成员的基类</code>或者<code>基类有非静态成员，而派生类没有非静态成员</code>)</li><li><strong>没有虚函数和虚基类</strong></li></ol><ul><li><p>C++提供了一个模板来判断一个类或者结构体是否是标准布局:<code>template &lt;typename T&gt; struct std::is_standard_layout; //头文件为&lt;type_traits&gt;</code></p></li><li><p>C++提供了一个模板来判断一个类或者结构体是否是POD:<code>template &lt;typename T&gt; struct std::is_pod //头文件为&lt;type_traits&gt;</code></p></li></ul></li></ul><h4 id="POD的好处"><a href="#POD的好处" class="headerlink" title="POD的好处"></a>POD的好处</h4><ol><li><p>字节赋值，我们可以放心的使用<code>memset</code>和<code>memcpy</code>对POD类型进行初始化和拷贝。</p></li><li><p>提供对C内存的兼容。POD类型的数据在C与C++间的操作总是安全的。</p></li><li><p>保证了静态初始化的安全有效。POD类型的对象初始化往往更简单</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>不将就</title>
      <link href="/2018/10/24/%E4%B8%8D%E5%B0%86%E5%B0%B1/"/>
      <url>/2018/10/24/%E4%B8%8D%E5%B0%86%E5%B0%B1/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;对最近的一段时间进行梳理。</p><a id="more"></a><p>&emsp;&emsp;自从实习结束并回到学校后，持续过了一个月的“闲人”生活，期间，中秋结束后和好基友<code>张越</code>完成了为期11天的旅游，欣赏了这个世界的美丽(当然包括小姐姐们，享受脸.jpg)，也享受了各种美食，很开心(很感谢我儿子一路上的规划，简直完美）。<br>&emsp;&emsp;国庆节后，开始阅读技术书籍，同时参与一些分享活动。期间，身边人找工作也都陆续结束，各种玩耍，各种皮。关于女朋友这事也被提及的越来越多，自己也想了想，的确是在很多难过或者困难的时候，有个人在一起陪伴或者安慰都是极棒的，这也导致我曾经一度想找个先这样。不过对自己生活的不满意，对自己要求的提升，让我觉得这算是对生活的一种妥协，我还年轻，还有机会去尝试，所以不能轻易妥协。<br>&emsp;&emsp;现在，努力提升自己，让自己过得精致一点，多多投资自己，保持一种态度：对生活，不将就！</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>实习总结</title>
      <link href="/2018/08/31/%E5%AE%9E%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
      <url>/2018/08/31/%E5%AE%9E%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;work hard， work smart！<br><a id="more"></a></p><p>&emsp;&emsp;不知不觉三个月的实习就结束了，也许只有到最后要走的时候才会真正的感受到一些别样的情绪充斥在心间。感谢这段时间师兄师姐们的指导与帮助，也很开心能够遇见这么多的小伙伴！<br>&emsp;&emsp;最终得知转正的结果还是很开心的，后面呢，也准备留在阿里了。以这段时间的感受来说：阿里是一家很有责任感的公司、公司内部的腐败程度个人感觉还是较其他公司好的、阿里的价值观我表示认同、最主要的是身边的小伙伴们都很nice。感觉这里面的环境很适合我，个人也比较懒，也就不想再换公司了（换公司的话，这种环境很难说）<br>&emsp;&emsp;实习期间学到的东西还是很多的，主要是开了眼界，思想上有了相应的提升，对大公司的流程什么的都有了了解，而且对自己后面的方向也能够做出一些选择。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vmware的一些问题</title>
      <link href="/2018/05/10/Vmware%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
      <url>/2018/05/10/Vmware%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul><li>前几天换了个电脑，于是所有的东西都需要拷贝和重装，在装vmware的时候遇到了一些问题，所以记录在这里。</li></ul><a id="more"></a><h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><ul><li><p>windows7</p><ul><li>可以安装任何的版本，而且安装所有的系统都是没问题的。要注意的就是对vmware的服务要保持开启，给centos7安装vmtools的时候有点麻烦。这里注意的没有什么太多。</li></ul></li><li><p>windows10</p><ul><li><p>这里的话在安装vmware的时候需要安装vmware12及以上的版本，官方给的说明是11的时候就开始支持windows10了，但是我在装ubuntu16.04的时候直接报错导致安装失败，之后我使用12版本的直接成功。在这里需要注意的是在装系统的时候需要把硬件定制里面的显示的3D图形加速关闭，否则会出现黑屏的现象。如果ubuntu出现屏幕分辨率的问题导致无法点击安装过程中的确认或者下一步按钮的情况，可以先试用，然后选择设置修改分辨率，让其适合当前的分辨率，然后再次进入就可以看到和选择了。</p></li><li><p>由于中间有一次直接用杀毒软件结束掉了VMware，导致我在下一次打开ubuntu的时候显示正在使用中，用了其他的一些方法也都没解决，最终找到一个方法简单粗暴：找到安装操作系统的目录，进去后会看到两个后缀为<code>.lck</code>的文件夹，把这两个文件夹剪切出来（删除掉也可以，你打开以后会重建），然后再打开虚拟机就没问题了。具体的原因还没去了解。</p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VMware </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HTTP学习（六）——HTTP2性能优化实践</title>
      <link href="/2018/04/22/HTTP%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%85%AD%EF%BC%89/"/>
      <url>/2018/04/22/HTTP%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%85%AD%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul><li>为了让我们的网站访问速度快变，我们不断增加带宽，做针对HTTP协议的特点对应用做各种优化。希望能通常高带宽，低延迟来提高网站到访问速度。带宽与延迟两者间，延迟才是性能的真正瓶颈。</li></ul><a id="more"></a><h3 id="客观原因"><a href="#客观原因" class="headerlink" title="客观原因"></a>客观原因</h3><ul><li><p>当我们针对HTTP协议进行性能优化时，我们不得不注意到这样的一些客观原因。通常当我们改变不了底层协议特性时，我们只能在更高层处做文章。</p><ol><li><p>带宽受物理层介质的影响，最快快不过光速，但是即便在今天越来越高的带宽，我们依然没有感觉到网站访问速度有多快。 </p></li><li><p>延迟包括传输延迟，传播延迟，处理延迟和排队延迟。</p></li><li><p>每次连接都需要经过3次握手才能建立，增加整整一个RTT。</p></li><li><p>TCP拥塞控制策略：慢启动，拥塞避免[注1]。其中慢启动会被应用到每一个连接中。TCP流量和拥塞控制会影响整个网络到吞吐量。</p></li><li><p>解析DNS必然会产生一些延迟。</p></li><li><p>最快获得资源的方式，莫过于还没传，就已拿到。充分利用缓存。</p></li><li><p>最少的延迟就是什么都不传。而没有延迟。</p></li></ol></li></ul><h3 id="针对HTTP1-X做过的优化"><a href="#针对HTTP1-X做过的优化" class="headerlink" title="针对HTTP1.X做过的优化"></a>针对HTTP1.X做过的优化</h3><ul><li><p>由于TCP层的特性，在提高web性能时，我们不得不做一些优化， <a href="https://developer.yahoo.com/performance/rules.html" target="_blank" rel="noopener">Best Practices for Speeding Up Your Web Site</a>，这些优化中针对HTTP协议特点的，我们做了哪些呢，从总体来说有以下几大点。</p><ol><li><p>连接和拼接</p><ul><li>连接或拼接JS和CSS文件，雪碧图，以减少HTTP请求，同时浏览器可缓存这些静态资源，为下次访问节约时间。但是这样带来的副作用是，维护成本高，其中某一个小改动都会使得整个拼接后的文件发生改变，重新缓存。</li></ul></li><li><p>域名分区</p><ul><li>由于浏览器的限制，同一个域下最多只能建立6个连接。我们通常使用子域名来减少所有资源在只有一个连接时的产生的排队延迟。这个显然不适用在HTTP2中，因为不同的域需要建立不同的连接。</li></ul></li><li><p>资源内嵌</p><ul><li>对于不常用的，较小大资源内嵌在文档中，比如base64的图片，以减少HTTP请求，但是这样的资源不能在浏览器中缓存，也不可能被其他页面共享，同时还有可能编码之后的资源变等更大了。在HTTP2中，这样的资源就可以使用SERVER PUSH来推送。</li></ul></li><li><p>HTTP管道（额外的）</p><ul><li><p>在HTTP1.x中已经实现了持久连接，但是却依然需要排队来发送和接收请求，这样不能充分利用网络资源。因此提出了HTTP管道的概念。客户端可以将所有请求都一起发给服务器端，服务器端或者按顺序处理，或者并行处理这些请求。但是返回响应的顺序是按照其自己内部的优先级来的。</p></li><li><p>但是，其缺点也很多，以至于现在的浏览器对它还是默认关闭的：</p></li></ul></li><li><p>队首阻塞</p><ul><li>并行处理时，需要占用缓存资源，服务器容易受到攻击</li><li>响应失败后，会断开tcp连接，并要求重发之后的所有请求，造成资源浪费</li><li>中间代理对其兼容性不是很好，有可能还会串行所有请求</li></ul></li></ol></li></ul><h3 id="针对HTTP2需要做的优化"><a href="#针对HTTP2需要做的优化" class="headerlink" title="针对HTTP2需要做的优化"></a>针对HTTP2需要做的优化</h3><ul><li><p>坚决去掉在HTTP1.X中的域名分区，连接和拼接和资源内嵌的优化方式。</p></li><li><p>尽量让所有资源在同一域名下</p></li><li><p>利用服务器推送</p></li><li><p>继续保留CDN</p></li></ul><h3 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h3><ul><li>TCP慢开始与拥塞避免示意图<br>  <img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/HTTP/six/slow-start.png" alt></li></ul><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://imjiaolong.cn/post/http2vshttp1.1.html" target="_blank" rel="noopener">https://imjiaolong.cn/post/http2vshttp1.1.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Protocol </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HTTP与HTTPS</title>
      <link href="/2018/04/22/HTTP%E4%B8%8EHTTPS/"/>
      <url>/2018/04/22/HTTP%E4%B8%8EHTTPS/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul><li>HTTPS是对HTTP在安全方面上做的一个改进，HTTPS = HTTP + <a href="https://zh.wikipedia.org/wiki/%E5%82%B3%E8%BC%B8%E5%B1%A4%E5%AE%89%E5%85%A8%E6%80%A7%E5%8D%94%E5%AE%9A" target="_blank" rel="noopener">SSL/TLS</a></li></ul><a id="more"></a><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ol><li><p>https需要申请CA证书，需要一定的费用</p></li><li><p>http是明文传输，https是有安全性的ssl加密传输</p></li><li><p>http的端口是80，https是443</p></li><li><p>http是简单的，<a href="http://www.cnblogs.com/bellkosmos/p/5237146.html" target="_blank" rel="noopener">无状态</a>的，https是由http+sslL组成的进行加密传输、身份认证的协议，更加安全</p></li></ol><h3 id="HTTPS过程"><a href="#HTTPS过程" class="headerlink" title="HTTPS过程"></a>HTTPS过程</h3><ol><li><p>客户端发起请求，将自己支持的加密算法，打个包告诉服务器端</p></li><li><p>服务器端从客户端发来的加密算法中，选出一组加密算法和HASH算法（注，HASH也属于加密），并将自己的身份信息以证书的形式发回给客户端。而证书中包含了网站的地址，加密用的公钥，以及证书的颁发机构等；这里，服务器就将自己用来加密用的公钥一同发还给客户端，而私钥则服务器保存着，用户解密客户端加密过后的内容。</p></li><li><p>客户端收到内容</p><ol><li>验证一下证书是否合法。一般来说，证书是用来标示一个站点是否合法的标志。如果说该证书由权威的第三方颁发和签名的，则说明证书合法。</li><li>如果证书合法，或者客户端接受和信任了不合法的证书，则客户端就会随机产生一串序列号，使用服务器发来的公钥进行加密。这时候，一条返回的消息就基本就绪。</li><li>最后使用服务器挑选的HASH算法，将刚才的消息使用刚才的随机数进行加密，生成相应的消息校验值，与刚才的消息一同发还给服务器。</li></ol></li><li><p>服务器接受到客户端发来的消息后</p><ol><li>使用私钥解密上面客户端公钥加密的消息，得到客户端产生的随机序列号</li><li>使用该随机序列号，对该消息进行加密，验证的到的校验值是否与客户端发来的一致。如果一致则说明消息未被篡改，可以信任</li><li>最后，使用该随机序列号，加上之前第2步中选择的加密算法，加密一段握手消息，发还给客户端。同时HASH值也带上</li></ol></li><li><p>客户端收到服务器端的消息后</p><ol><li>计算HASH值是否与发回的消息一致</li><li>检查消息是否为握手消息</li></ol></li><li><p>握手结束后，客户端和服务器端使用握手阶段产生的随机数以及挑选出来的算法进行对称加解密的传输</p></li></ol><h3 id="为什么不直接全程使用非对称加密算法进行数据传输"><a href="#为什么不直接全程使用非对称加密算法进行数据传输" class="headerlink" title="为什么不直接全程使用非对称加密算法进行数据传输"></a>为什么不直接全程使用非对称加密算法进行数据传输</h3><ol><li><p>因为非对称算法的效率对比起对称算法来说，要低得多得多；因此往往只用在HTTPS的握手阶段。</p></li><li><p>http建立连接114ms，https为436ms（ssl为322ms），针对computer science house（计算机科学院CSH）的测试</p></li></ol><h3 id="经常使用的加密算法"><a href="#经常使用的加密算法" class="headerlink" title="经常使用的加密算法"></a>经常使用的加密算法</h3><ol><li>非对称加密算法：RSA, DSA/DSS</li><li>对称加密算法： AES, 3DES</li><li>HASH算法：MD5, SHA1, SHA256</li></ol>]]></content>
      
      
      <categories>
          
          <category> Protocol </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>DNS解析的过程</title>
      <link href="/2018/04/22/DNS%E8%A7%A3%E6%9E%90/"/>
      <url>/2018/04/22/DNS%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul><li>对于网络这一块，有太多的学问，而且这个也是后面重点需要优化的方向，所以最近会写一些这方面的文章。</li></ul><a id="more"></a><h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><ol><li>在浏览器中输入<a href="http://www.qq.com域名，操作系统会先检查自己本地的hosts文件是否有这个网址映射关系，如果有，就先调用这个IP地址映射，完成域名解析。" target="_blank" rel="noopener">www.qq.com域名，操作系统会先检查自己本地的hosts文件是否有这个网址映射关系，如果有，就先调用这个IP地址映射，完成域名解析。</a> </li><li>如果hosts里没有这个域名的映射，则查找本地DNS解析器缓存，是否有这个网址映射关系，如果有，直接返回，完成域名解析。 </li><li>如果hosts与本地DNS解析器缓存都没有相应的网址映射关系，首先会找TCP/ip参数中设置的首选DNS服务器，在此我们叫它本地DNS服务器，此服务器收到查询时，如果要查询的域名，包含在本地配置区域资源中，则返回解析结果给客户机，完成域名解析，此解析具有权威性。 </li><li>如果要查询的域名，不由本地DNS服务器区域解析，但该服务器已缓存了此网址映射关系，则调用这个IP地址映射，完成域名解析，此解析不具有权威性。 </li><li>如果本地DNS服务器本地区域文件与缓存解析都失效，则根据本地DNS服务器的设置（是否设置转发器）进行查询，如果未用转发模式，本地DNS就把请求发至13台根DNS，根DNS服务器收到请求后会判断这个域名(.com)是谁来授权管理，并会返回一个负责该顶级域名服务器的一个IP。本地DNS服务器收到IP信息后，将会联系负责.com域的这台服务器。这台负责.com域的服务器收到请求后，如果自己无法解析，它就会找一个管理.com域的下一级DNS服务器地址(qq.com)给本地DNS服务器。当本地DNS服务器收到这个地址后，就会找qq.com域服务器，重复上面的动作，进行查询，直至找到<a href="http://www.qq.com主机。" target="_blank" rel="noopener">www.qq.com主机。</a> </li><li>如果用的是转发模式，此DNS服务器就会把请求转发至上一级DNS服务器，由上一级服务器进行解析，上一级服务器如果不能解析，或找根DNS或把转请求转至上上级，以此循环。不管是本地DNS服务器用是是转发，还是根提示，最后都是把结果返回给本地DNS服务器，由此DNS服务器再返回给客户机。 </li></ol><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li><p>人们在 DNS 中发现了一些漏洞，攻击者可以利用这些漏洞劫持这一使用名称在 互联网 上搜寻某个人或某个站点的过程。这种攻击的目的是取得对会话的控制以实施某种操作，例如使用户进入劫持者自己设立的欺骗性网站，以便收集用户的帐户和密码。</p></li><li><p>安全的DNS—<a href="https://www.icann.org/resources/pages/dnssec-qaa-2014-01-29-zh" target="_blank" rel="noopener">DNSSEC</a></p></li></ul><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://www.nowcoder.com/profile/2286733/myFollowings/detail/4794271" target="_blank" rel="noopener">https://www.nowcoder.com/profile/2286733/myFollowings/detail/4794271</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Protocol </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DNS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HTTP2.0</title>
      <link href="/2018/04/22/HTTP2.0/"/>
      <url>/2018/04/22/HTTP2.0/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul><li><p>这篇文章主要是对HTTP2.0进行一个总结，把零散的知识点进行连接。</p></li><li><p>HTTP2.0 的目的是通过支持请求与响应的多路复用来较少延迟，通过压缩 HTTPS 首部字段将协议开销降低，同时增加请求优先级和服务器端推送的支持.</p></li></ul><a id="more"></a><h3 id="二进制分帧层"><a href="#二进制分帧层" class="headerlink" title="二进制分帧层"></a>二进制分帧层</h3><ul><li><p>二进制分帧层，是HTTP 2.0性能增强的核心。 </p><ul><li>HTTP 1.x在应用层以纯文本的形式进行通信，而HTTP 2.0将所有的传输信息分割为更小的消息和帧，并对它们采用二进制格式编码。这样，客户端和服务端都需要引入新的二进制编码和解码的机制。</li></ul></li><li><p><strong>帧</strong></p><ol><li><p><strong>帧的分类</strong></p><ol><li>DATA：用于传输 HTTP 消息体；</li><li>HEADERS：用于传输首部字段；</li><li>SETTINGS：用于约定客户端和服务端的配置数据。比如设置初识的双向流量控制窗口大小；</li><li>WINDOW_UPDATE：用于调整个别流或个别连接的流量</li><li>PRIORITY： 用于指定或重新指定引用资源的优先级。</li><li>RST_STREAM： 用于通知流的非正常终止。</li><li>PUSH_ PROMISE： 服务端推送许可。</li><li>PING： 用于计算往返时间，执行 “活性” 检活。</li><li>GOAWAY： 用于通知对端停止在当前连接中创建流<br><img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/HTTP/HTTP2.0.png" alt></li></ol><ul><li>标志位用于不同的帧类型定义特定的消息标志。比如 DATA 帧就可以使用End Stream: true表示该条消息通信完毕。流标识位表示帧所属的流 ID。优先值用于 HEADERS 帧，表示请求优先级。R 表示保留位。</li></ul></li><li><p><strong>消息</strong></p><ul><li>消息是指逻辑上的HTTP消息（请求/响应）。一系列数据帧组成了一个完整的消息。比如一系列DATA帧和一个HEADERS帧组成了请求消息。</li></ul></li><li><p><strong>流</strong></p><ol><li>流是连接中的一个虚拟信道，可以承载双向消息传输。每个流有唯一整数标识符。为了防止两端流 ID 冲突，客户端发起的流具有奇数 ID，服务器端发起的流具有偶数 ID。 </li><li>所有 HTTP2.0通信都在一个 TCP 连接上完成，慢启动时间减少,拥塞和丢包恢复速度更快，这个连接可以承载任意数量的双向数据流 Stream。相应地，每个数据流以 消息的形式发送，而消息由一 或多个帧组成，这些帧可以乱序发送，然后根据每个帧首部的流标识符重新组装。</li></ol></li></ol></li><li><p><strong><a href="https://www.nihaoshijie.com.cn/index.php/archives/698/" target="_blank" rel="noopener">多路复用</a></strong></p><ol><li><p>HTTP1.X如果不用<a href="https://blog.csdn.net/qq_28885149/article/details/52922107" target="_blank" rel="noopener">pipeling</a>的话会实现串行传输（一个得到应答才继续下一个），如果使用<a href="https://blog.csdn.net/qq_28885149/article/details/52922107" target="_blank" rel="noopener">pipeling</a>的话会<a href="https://blog.csdn.net/jiyiqinlovexx/article/details/50500246" target="_blank" rel="noopener">建立多条TCP连接</a>，这会导致开销增大</p></li><li><p>HTTP2.0建立一条TCP连接后，会并行传输数据。HTTP 2.0成功解决了HTTP 1.x的队首阻塞问题（TCP层的阻塞仍无法解决），同时，也不需要通过pipeline机制多条TCP连接来实现并行请求与响应。减少了TCP连接数对服务器性能也有很大的提升。</p></li><li><p>HTTP1.X虽然可以采用keep alive来解决复用TCP的问题，但是还是无法解决请求阻塞问题。</p><ul><li>所谓请求阻塞意思就是一条TCP的connection在同一时间只能允许一个请求经过，这样假如后续请求想要复用这个链接就必须等到前一个完成才行，正如上图左边表示的。</li><li>之所以有这个问题就是因为HTTP1.x需要每条请求都是可是识别，按顺序发送，否则server就无法判断该相应哪个具体的请求。</li><li>HTTP2采用多路复用是指，在同一个域名下，开启一个TCP的connection，每个请求以stream的方式传输，每个stream有唯一标识，connection一旦建立，后续的请求都可以复用这个connection并且可以同时发送，server端可以根据stream的唯一标识来相应对应的请求。</li></ul></li></ol></li><li><p><strong>请求优先级</strong></p><ul><li><p>流可以带有一个31bit的优先级：</p><ul><li>0：表示最高优先级</li><li>2^31-1：表示最低优先级</li></ul></li><li><p>客户端明确指定优先级，服务端可以根据这个优先级作为依据交互数据，比如客户端优先级设置为.css&gt;.js&gt;.jpg（具体可参见《高性能网站建设指南》）， 服务端按优先级返回结果有利于高效利用底层连接，提高用户体验。 </p></li><li><p>然而，也不能过分迷信请求优先级，仍然要注意以下问题：</p><ul><li>服务端是否支持请求优先级</li><li>会否引起队首阻塞问题，比如高优先级的慢响应请求会阻塞其他资源的交互。</li></ul></li></ul></li><li><p><strong>服务端推送</strong></p><ul><li>HTTP 2.0增加了服务端推送功能，服务端可以根据客户端的请求，提前返回多个响应，推送额外的资源给客户端。<ul><li>比如：客户端请求stream 1，/page.html。服务端在返回stream 1消息的同时推送了stream 2（/script.js）和stream 4（/style.css）。</li></ul></li></ul></li><li><p><strong>首部压缩</strong></p><ol><li>HTTP1.x在每一次通信都会携带首部信息描述资源属性</li><li>HTTP2.0会在双方之间使用“首部表”来跟踪之前发送和存储的键值对，首部表在链接过程中始终存在，新增的键值对会更新到表尾，因此不需要每次通信都携带首部</li><li>HTTP2.0用到了首部压缩技术，压缩算法为HPACK<ul><li>HTTP 2.0关注的是首部压缩，而我们常用的gzip等是报文内容（body）的压缩。二者不仅不冲突，且能够一起达到更好的压缩效果。</li></ul></li></ol></li></ul><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://blog.csdn.net/zhuyiquan/article/details/69257126" target="_blank" rel="noopener">https://blog.csdn.net/zhuyiquan/article/details/69257126</a></li><li><a href="https://segmentfault.com/a/1190000013028798" target="_blank" rel="noopener">https://segmentfault.com/a/1190000013028798</a></li><li><a href="https://www.nihaoshijie.com.cn/index.php/archives/698/" target="_blank" rel="noopener">https://www.nihaoshijie.com.cn/index.php/archives/698/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Protocol </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HTTP1.0与HTTP1.1</title>
      <link href="/2018/04/22/HTTP1.0%E4%B8%8EHTTP1.1/"/>
      <url>/2018/04/22/HTTP1.0%E4%B8%8EHTTP1.1/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul><li>前面的系列文章最终感觉有点零散，所以在这里将HTTP1.0和HTTP1.1的一些区别进行说明。</li></ul><a id="more"></a><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul><li><p><strong>可扩展性</strong></p><ol><li>为了与未来的协议规范兼容，HTTP1.1在请求消息中包含了Upgrade头域，客户端可以让服务器知道它能够支持的其他备用通信协议，服务器以此进行协议的切换</li><li>HTTP1.1增加了options方法，允许客户端获取服务器支持的方法列表</li><li>在消息中增加版本号，用来进行兼容判断。此版本号只可以判断逐段的兼容性，不能判断端到端的兼容性<ul><li>eg：一台HTTP/1.1的源服务器从使用HTTP/1.1的Proxy那儿接收到一条转发的消息，实际上源服务器并不知道终端客户使用的是HTTP/1.0还是HTTP/1.1。因此，HTTP/1.1定义Via头域，用来记录消息转发的路径，它记录了整个路径上所有发送方使用的版本号</li></ul></li></ol></li><li><p><strong>缓存</strong></p><ol><li>HTTP1.1在1.0的特性上加了一些cache的特性：当缓存的对象的age超过expire（最大时限）时变为stale（旧的）对象，cache不需要直接抛弃此对象，而是与服务器进行重新激活</li><li>HTTP1.1增加了Cache-Control头域（请求消息和响应消息都可用），它支持一个可扩展的指令子集：例如max-age指令支持相对时间戳；private和no-store指令禁止对象被缓存；no-transform阻止Proxy进行任何改变响应的行为</li></ol></li><li><p><strong>带宽优化</strong></p><ol><li>请求对象的部分<ul><li>HTTP/1.0中，存在一些浪费带宽的现象，例如客户端只是需要某个对象的一部分，而服务器却将整个对象送过来了。例如，客户端只需要显示一个文档的部分内容，又比如下载大文件时需要支持断点续传功能，而不是在发生断连后不得不重新下载完整的包。</li><li>HTTP/1.1中在请求消息中引入了range头域，它允许只请求资源的某个部分。在响应消息中Content-Range头域声明了返回的这部分对象的偏移值和长度。如果服务器相应地返回了对象所请求范围的内容，则响应码为206（Partial Content），它可以防止Cache将响应误以为是完整的一个对象</li></ul></li><li>请求消息中如果包含比较大的实体内容，但不确定服务器是否能够接收该请求（如是否有权限），此时若贸然发出带实体的请求，如果被拒绝也会浪费带宽<ul><li>HTTP/1.1加入了一个新的状态码100（Continue）。客户端事先发送一个只带头域的请求，如果服务器因为权限拒绝了请求，就回送响应码401（Unauthorized）；如果服务器接收此请求就回送响应码100，客户端就可以继续发送带实体的完整请求了。注意，HTTP/1.0的客户端不支持100响应码。但可以让客户端在请求消息中加入Expect头域，并将它的值设置为100-continue</li></ul></li><li>节省带宽资源的一个非常有效的做法就是压缩要传送的数据。Content-Encoding是对消息进行端到端（end-to-end）的编码，它可能是资源在服务器上保存的固有格式（如jpeg图片格式）；在请求消息中加入Accept-Encoding头域，它可以告诉服务器客户端能够解码的编码方式</li></ol></li><li><p><strong>长连接</strong></p><ol><li>HTTP 1.0规定浏览器与服务器只保持短暂的连接，浏览器的每次请求都需要与服务器建立一个TCP连接，服务器完成请求处理后立即断开TCP连接，服务器不跟踪每个客户也不记录过去的请求。此外，由于大多数网页的流量都比较小，一次TCP连接很少能通过slow-start区，不利于提高带宽利用率。<ul><li>在HTTP/1.0中，要建立长连接，可以在请求消息中包含Connection: Keep-Alive头域，如果服务器愿意维持这条连接，在响应消息中也会包含一个Connection: Keep-Alive的头域。同时，可以加入一些指令描述该长连接的属性，如max，timeout等</li><li>通常，HTTP/1.0的Proxy不支持Connection头域，为了不让它们转发可能误导接收者的头域，协议规定所有出现在Connection头域中的头域名都将被忽略</li></ul></li><li>HTTP 1.1支持长连接（PersistentConnection）和请求的流水线（Pipelining）处理，在一个TCP连接上可以传送多个HTTP请求和响应，减少了建立和关闭连接的消耗和延迟。例如：一个包含有许多图像的网页文件的多个请求和应答可以在一个连接中传输，但每个单独的网页文件的请求和应答仍然需要使用各自的连接。</li><li>HTTP 1.1还允许客户端不用等待上一次请求结果返回，就可以发出下一次请求，但服务器端必须按照接收到客户端请求的先后顺序依次回送响应结果，以保证客户端能够区分出每次请求的响应内容，这样也显著地减少了整个下载过程所需要的时间</li></ol></li><li><p><strong>消息传递</strong></p><ol><li>HTTP消息中可以包含任意长度的实体，通常它们使用Content-Length来给出消息结束标志。但是，对于很多动态产生的响应，只能通过缓冲完整的消息来判断消息的大小，但这样做会加大延迟。如果不使用长连接，还可以通过连接关闭的信号来判定一个消息的结束。<ol><li>HTTP/1.1中引入了Chunkedtransfer-coding来解决上面这个问题，发送方将消息分割成若干个任意大小的数据块，每个数据块在发送时都会附上块的长度，最后用一个零长度的块作为消息结束的标志。这种方法允许发送方只缓冲消息的一个片段，避免缓冲整个消息带来的过载。</li><li>在HTTP/1.0中，有一个Content-MD5的头域，要计算这个头域需要发送方缓冲完整个消息后才能进行。而HTTP/1.1中，采用chunked分块传递的消息在最后一个块（零长度）结束之后会再传递一个拖尾（trailer），它包含一个或多个头域，这些头域是发送方在传递完所有块之后再计算出值的。发送方会在消息中包含一个Trailer头域告诉接收方这个拖尾的存在。</li></ol></li></ol></li><li><p><strong>Host头域</strong></p><ol><li>在HTTP1.0中认为每台服务器都绑定一个唯一的IP地址，因此，请求消息中的URL并没有传递主机名（hostname）。但随着虚拟主机技术的发展，在一台物理服务器上可以存在多个虚拟主机（Multi-homed Web Servers），并且它们共享一个IP地址。</li><li>HTTP1.1的请求消息和响应消息都应支持Host头域，且请求消息中如果没有Host头域会报告一个错误（400 Bad Request）。此外，服务器应该接受以绝对路径标记的资源请求。</li></ol></li><li><p><strong>内容协商</strong></p><ol><li>为了满足互联网使用不同母语和字符集的用户，一些网络资源有不同的语言版本（如中文版、英文版）。HTTP/1.0定义了内容协商（contentnegotiation）的概念，也就是说客户端可以告诉服务器自己可以接收以何种语言（或字符集）表示的资源。<ol><li>例如如果服务器不能明确客户端需要何种类型的资源，会返回300（Multiple Choices），并包含一个列表，用来声明该资源的不同可用版本，然后客户端在请求消息中包含Accept-Language和Accept-Charset头域指定需要的版本。</li></ol></li></ol></li></ul><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><p>详解HTTP1.1：<a href="http://imweb.io/topic/554c5879718ba1240cc1dd8a" target="_blank" rel="noopener">http://imweb.io/topic/554c5879718ba1240cc1dd8a</a></p></li><li><p><a href="https://blog.csdn.net/forgotaboutgirl/article/details/6936982" target="_blank" rel="noopener">https://blog.csdn.net/forgotaboutgirl/article/details/6936982</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Protocol </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HTTP学习（四）——HTTP2.0的新特性</title>
      <link href="/2018/04/21/HTTP%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
      <url>/2018/04/21/HTTP%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul><li><p>HTTP2.0可以让我们的应用变得更快、更简单、更健壮，让我们在HTTP/1.1时针对TCP协议特性而做的用来提高性能的HACK一笔勾销</p></li><li><p>为了提高应用的性能，降低延迟，我们能做的无外乎2点，要么传输的东西越小越好，要么距离能获得资源的地方越近越好。</p><ul><li>HTTP2的目的：通过支持<strong>多路复用</strong>来提高并行能力，减少因为3次握手等而产生的延迟；通过<strong>压缩HTTP首部</strong>将协议开销降到最低，同时支持请求优先级和服务器推送。</li><li>HTTP2最大的改变：引入<strong>二进制分帧层</strong>。HTTP2.0不会改动HTTP1.x的语义，提供的功能也不变，但是HTTP2对内修改了格式化数据的方式，以及传输这些数据的方式。对外，也就是面向应用，不用做任何改变，感知不到这一层的变化的。</li></ul></li><li><p>其实HTTP2.0是对HTTP1.x的一个扩展，而非替代，之所以称之为2是因为它引入的二进制分帧层之前的HTTP1.x的服务端和客户端并不兼容。</p><a id="more"></a></li></ul><h3 id="特性浅析"><a href="#特性浅析" class="headerlink" title="特性浅析"></a>特性浅析</h3><h4 id="分帧"><a href="#分帧" class="headerlink" title="分帧"></a><strong>分帧</strong></h4><ul><li><p>这是HTTP2.0中最大的改变。HTTP2.0之所以性能会比HTTP1.x有那么大的提高，很大程度上正是由于这一层的引入。</p><blockquote><p>这里所谓的“层” ，指的是位于套接字接口[1]与应用可见的高层HTTP API之间的一个新机制:HTTP的语义，包括各种动词、方法、首部，都不受影响，不同的是<strong>传输期间</strong>对它们的编码方式变了。</p></blockquote></li><li><p>HTTP1.x用回车换行符作为纯文本的分隔符，在进行解析和差错检测时不方便。HTTP1.x中用ASCII码，是16进制的，来表示报文中的每一个字符，如下图中,47代表字母G，45代表字符E，54代表字符T。</p><p><img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/HTTP/four/http-header.png" alt></p></li><li><p>然而，HTTP2.0引入分帧层后，将报文分隔成一个个更小的帧，并采用二进制编码的方式。通常会将一个消息（首部和数据在一起的）分成一个HEADER帧和若干个DATA帧。如下图所示</p><p><img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/HTTP/four/frame-layer.png" alt></p><pre><code>另外需要明确的几个定义： **流**：已建立的连接上的双向字节流。具有唯一的流ID，客户端发起的为奇数ID，服务端发起的为偶数ID。很多个流可以并行的在同一个tcp连接上交换消息。 **消息**：与逻辑消息对应，比如一个请求或一个响应。由一个或多个帧组成。 **帧**：HTTP2中最小的通信单位，每个帧都会有帧首部，每个帧或者用来承载HTTP首部或负荷数据，或其他特定类型的帧。帧是遵循二进制编码的。总得来说，就是这样的，在HTTP2中，相同域名下的所有通信都在一个连接上完成，这个连接中可以承载任意数量的双向流。这些流都是以消息的形式被发送的，同时消息又由一个或多个帧组成。多个帧之间可以乱序发送，最后根据帧首部的流标识重新组装。</code></pre></li><li><p><strong>解释</strong> :这个双向是指，服务器可以给浏览器发消息（server push），浏览器也可以给服务器发东西（这就不用说啦）</p></li></ul><ul><li><p>对于一个帧来说，有固定固定帧格式，其中帧首部规定了帧最多只能带64KB的数据，还包括了帧类型和流标识符等。另外，帧中还可以填充一些额外的数据，最多255字节，保证数据安全性，拿HEADER帧举例。</p><p><img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/HTTP/four/frame-structure.png" alt></p><p><img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/HTTP/four/frame-header.png" alt></p></li><li><p>从这点上看，HTTP2.0中的帧与tcp报文段有些相似的。</p><p>在客户端或服务端发起建立新流时，帧携带HTTP的首部块，其中服务端发起流时，发送的HEADER帧没有优先级这一字段；当新流建立之后，就可发送HTTP消息的应用数据，也就是帧的负荷数据。</p><p>将消息拆成多个数据帧之后，会大大缓解HTTP队首阻塞[2]的情况。但是与tcp层的队首阻塞[3]并无直接关系。同时，改以帧为传输单位后，使得对报文无论是解析和差错检测方面都变得更加容易，因为对纯文本的解析还需要考虑到空格，空行，换行等问题。另外，也还消除了并行处理和发送请求及响应时对多个连接的依赖。</p></li><li><p><strong>解释</strong> ：多路复用：用一个tcp连接，并行发好多。【…keep_alive 很像啊】 —分组数？？表示是底层的，都没有概念…按道理说是分帧了后，分组数会变多啊？？？ 和keep_alive 不像，是和管道化很像哈。 实际上是这样的，首先肯定的是多使用同一个tcp连接，比起以前的多个tcp连接，会至少每次少了3个建立连接的tcp报文段，还不包括重传的。同时因为分帧之后出错的概率变小，间接的需要重传的包变少。从这两方面来说整个网络中的包中的总数是变少的。 另外呢，tcp报文段的长度其实还是保持不变的，不同流中的帧其实是混在一个tcp报文段中一起被发送，而在接收方那边接受到这个报文段后再进行拆分重新组装成新的http报文。</p></li></ul><h4 id="首部压缩"><a href="#首部压缩" class="headerlink" title="首部压缩"></a><strong>首部压缩</strong></h4><ul><li>由于HTTP协议是一种无状态的协议，服务器自身不会保存太多的信息和先前请求过的元数据信息，这就需要客户端每次都使用多个首部字段来描述所传输的资源及其属性，又由于HTTP1.1是以文本形式传输的，每次都会给HTTP报文增加500-800字节的负荷，如果算上cookie，这个负荷甚至会增加到上千。如果可以有办法减少这些开销，那么对性能又有很大的提升。<ol><li>HTTP2采用HPACK压缩方法，一边用index mapping table压缩，一边编码。这个table由<a href="https://http2.github.io/http2-spec/compression.html#static.table.definition" target="_blank" rel="noopener">静态表</a>和动态表组成。<ol><li>先用预定义的index mapping table将头部中常用的字符串用index来代替</li><li>对一定要使用文本表示的字符串，采用预定义的哈夫曼编码表进行编码 (具体的压缩和解压缩的方法请看<a href="http://www.cnblogs.com/ghj1976/p/4586529.html" target="_blank" rel="noopener">此文</a>的解释)<ul><li>客户端和服务器端使用首部表来跟踪和存储之前发送的每一个键值对。第一次请求时发送过的键值对，第二次在再请求时就不在发送了。（这一现象还一直没观察到）</li><li>在tcp连接期间，客户端和服务端共同维护这个首部表，并且是共同渐进更新的</li><li>每个新的键值对，要么直接添加到首部表尾部，要么替换原有表中的值</li></ul></li></ol></li><li>另外，HTTP2的前身SPDY采用的头部压缩算法是delate算法，这个算法的压缩效率也不错，但是由于存在<a href="http://www.freebuf.com/articles/web/5636.html" target="_blank" rel="noopener">CRIME攻击</a>，而HTTP2不得不重新设计了HPACK算法。</li></ol></li><li><strong>解释</strong> 使用了HPACK算法，一方面如果下一次请求头部和上一次请求头部中有相同的字段，那么相同的字段不会被发送，只会被发送差异性的字段。另一方面，会有一张首部表，里面会有常用的首部字段极其对应的序号，会有序号来代替这个具体的字段字符串。同时，整个首部帧还会用哈夫曼编码来进行压缩。</li></ul><h4 id="多路复用"><a href="#多路复用" class="headerlink" title="多路复用"></a><strong>多路复用</strong></h4><ul><li><p>引入二进制分帧层之后，HTTP2.0可以很容易的去实现多流并行而不用依赖建立多个tcp连接。</p><blockquote><p>实验表明，客户端使用更少的连接肯定可以降低延迟时间。HTTP 2.0 发送的总分组数量比 HTTP 差不多要少 40%。而服务器处理大量并发连接的情况也变成了可伸缩性问题，因为 HTTP 2.0 减轻了这个负担。 —-HTTP2.0</p></blockquote></li><li><p>每个来源使用一个连接，优势如下：</p><ul><li>从服务器和客户端来说，占用的资源和内存都少了。</li><li>从tcp连接和网络来说，使得网络拥塞得到改善，慢启动时间减少，拥塞和丢包恢复速度变快。</li></ul></li><li><p><strong>解释</strong></p><ul><li>keep-alive，也是可以不进行3次握手就可以发送多个在同一个域下的请求。但是必须发送下一个请求B，等待前一个请求A的响应收到后才可以发送。多路复用和管道优化差不多，只是管道优化由于兼容性的问题，而没有被普遍使用。</li><li>但是什么时候断？如果太多的保持连接，会不会反而不好呢 和一般TCP连接释放一样，如果客户端没有数据要请求，或服务端数据发送完毕后，会主动发送关闭连接的报文。或者是服务端连续发送10个探测报文，客户端无响应，服务端就关闭了这个连接。</li></ul></li></ul><h4 id="请求优先级"><a href="#请求优先级" class="headerlink" title="请求优先级"></a><strong>请求优先级</strong></h4><ul><li><p>当同一条连接上可以同时发送很多请求时，并不等于说这些请求对于服务器来说都应该一视同仁，因为客户端对资源的需求程度不同。比如说一个html文档，显然客户端对CSS和JS的需求，远大于对文档内图片的需求。</p><p>因此在建立新流时，HEADER帧可以带有一个优先级(31位，0为优先级最高)的值。这样，服务端就可以因此而适当分配资源，优先发送这些优先级高的帧。</p><p>HTTP2.0协议并没有规定这样的处理优先级的算法该如何实现，仅仅只是提供了这样一种机制。</p><p>为了合理充分利用网络资源，服务器也应该交错处理不同优先级的帧。而不是严格按照优先级来处理，否则又会造成队首堵塞的情况。</p></li><li><p><strong>解释</strong> ：请求优先级….感觉需要服务器也要支持的节奏（那确实变复杂了） 是的。也就是说服务器和客户端对这个优先级的理解是一样的，或是达成一致的。</p></li></ul><h4 id="服务器推送"><a href="#服务器推送" class="headerlink" title="服务器推送"></a><strong>服务器推送</strong></h4><ul><li><p>说到服务器推送，其实在HTTP1.1时，我们就用到过类似的，比如将图片使用base64编码嵌入在文档中。</p><p>之所以要提供这个服务，是因为一个文档被请求回来时，往往还需要再次请求很多文档内的其他资源，如果这些资源的请求不用客户端发起，而是服务端提前预判发给客户端，那么就会减少一半的RTT。</p><p>HTTP2.0这个协议也没有规定服务器端到底该怎样推送这个资源。服务端可以自己制定不同的策略，可以是根据客户端明确写出的推送请求；或者是服务端通过学习得来；再或者是通过额外的HTTP首部想服务端表明意向。</p></li><li><p>这个服务的特点是：</p><ul><li>只有建立连接后，服务器才可以推送资源(发送PUSH_PROMISE帧，这个帧中只有要约的HTTP首部)，也就是说服务器不能无缘无故的主动向客户端推送资源</li><li>客户端可以发送RST_STREAM拒绝服务器推送来的资源。但是这可能存在一个时间差，而导致客户端明明已经拒绝了，但服务端却还是把资源推送了过来。</li><li>推送的资源可以有不同页面共享</li><li>服务器可以按照优先级来推送资源</li></ul></li><li><p><strong>解释</strong> 服务器主动推送一个资源，客户端有权来选择是接收还是不接收，不能‘来者不拒’嘛，是吧。</p></li></ul><h4 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a><strong>流量控制</strong></h4><ul><li>我们知道在HTTP2协议中，我们可以在同一个连接中，建立多个流，那么实际上这些流之间是相互竞争的，会相互争夺这个连接中资源的分配。此时与tcp流量控制相似，我们也需要对流中的帧进行流量控制。但只有DATA帧受流量控制，而其他类型的帧不受流量控制。同样，HTTP2也只提供了这样一种机制，而非具体实现。<ul><li>这个流量控制在没一跳之间进行，而非端到端</li><li>流量控制基于窗口更新帧。连接建立之初，通过交换settings帧，来设定双向的流量控制窗口大小。</li><li>发送端每发送一个DATA帧，就将window的值减去这次data帧的大小，直到window=0。</li><li>接收方可通过发送window_update 帧。如果接收方不想接受数据了，就不发送window _update帧。</li><li>在接受关键资源时，可将非关键资源的window设置的非常小，等网络空闲了，再改回大一些。</li></ul></li></ul><h3 id="工具使用"><a href="#工具使用" class="headerlink" title="工具使用"></a>工具使用</h3><ul><li><p>可以使用chrome的工具<code>chrome://net-internals/#http2</code>来查看具体发送的帧的内容</p></li><li><p>打开chrome-network中的protocol一栏，查看当前站点使用的HTTP版本</p><p><img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/HTTP/four/chrome-tool.png" alt></p></li><li><p>安装chrome扩展<a href="https://chrome.google.com/webstore/detail/http2-and-spdy-indicator/mpbpobfflnpcgagjijhmgnchggcjblin?hl=zh-CN" target="_blank" rel="noopener">HTTP/2 and SPDY indicator</a>,在地址栏右侧会标示出是否使用了HTTP2或SPDY协议。</p><p><img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/HTTP/four/chrome-tool1.png" alt></p></li><li><p>在firefox浏览器的网络中，也可直接查看使用的HTTP协议的版本</p><p><img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/HTTP/four/firefox-tool.png" alt></p></li><li><p>帮助我们检测某个网站是否使用了HTTP2协议的网站<a href="https://www.h2check.org/" target="_blank" rel="noopener">HTTP/2 Checker</a>;检测是否使用了SPDY协议的网站<a href="https://spdycheck.org/" target="_blank" rel="noopener">SPDYCheck.org</a></p></li><li><p>分析页面性能的网站<a href="http://www.webpagetest.org/" target="_blank" rel="noopener">WebPagetest</a></p></li></ul><h3 id="实验验证"><a href="#实验验证" class="headerlink" title="实验验证"></a>实验验证</h3><p>为了能够亲自证实HTTP2确实对web性能有了很大的改进，使用nodejs作为服务端，分别验证在使用HTTP2, HTTPS, HTTP和SPDY作为HTTP协议时，同时加载10张图片时web性能的表现，<a href="http://jiaolonghuang.github.io/code/http2-experiment.zip" target="_blank" rel="noopener">代码下载</a>。结果比较出乎意外：</p><ul><li><p>可以比较直观的观察到多路复用的表现</p><p><img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/HTTP/four/http2-e.png" alt></p><p><img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/HTTP/four/http1-e.png" alt></p></li><li><p>Server Push的验证 <a href="https://www.imququ.com/" target="_blank" rel="noopener">屈屈</a>的<a href="https://www.imququ.com/post/use-http2-now.html" target="_blank" rel="noopener">博客</a>中有专门的介绍，这里我们也看一下。打开博客首页后可看到响应头中有<code>link:&lt;...&gt;</code>这样一个键值对，这是告诉服务器这个资源需要被推送。</p><p><img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/HTTP/four/server-push.png" alt></p><p>然后使用之前提到过的<code>chrome://net-internals/#http2</code>工具来查看具体的Push过程</p><p><img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/HTTP/four/push_promise.png" alt></p></li><li><p>至于头部压缩字节变少，页面加载速度变慢并无明显结果。与<a href="http://www.infoq.com/cn/news/2015/02/https-spdy-http2-comparison" target="_blank" rel="noopener">HTTPS、SPDY和HTTP/2的性能比较</a>的实验结果差的也比较多。</p></li></ul><p>猜测原因：由于是访问的本地资源，不能模拟网络拥塞的情况，故不能完全体现出http2的优势。</p><h3 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h3><ol><li>套接字：是支持TCP/IP网络通信的基本操作单元，可以看成是不同主机之间的进程进行双向通信的端点。是应用进程与tcp连接之间的门，通过套接字口来发送或获得报文。</li><li>HTTP队首阻塞：一个慢请求阻塞后面的所有请求。具体来说就是，假设客户端同时发送2个请求，一个高优先级，一个低优先级，即便低优先级的资源先准备好了，也不会先发送，而是先等着，等高优先级的响应发送完了再发送低优先级的。这样会导致网络资源浪费，服务器缓冲开销浪费，最终导致客户端等待时间无限期延迟。</li><li>tcp队首阻塞：tcp要求分组严格按照顺序交付，一个分组未收到，就会阻塞后续的所有高序号分组。直到重传那个丢失的分组。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Protocol </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HTTP学习（五）——HTTP2 VS SPDY</title>
      <link href="/2018/04/21/HTTP%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%94%EF%BC%89/"/>
      <url>/2018/04/21/HTTP%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%94%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul><li>SPDY是HTTP2的催化剂，但SPDY不是HTTP2。 本文主要针对SPDY与HTTP2之间的区别，而不太多的涉及它俩之间与HTTP1.X的区别。</li></ul><h3 id="SPDY的出现"><a href="#SPDY的出现" class="headerlink" title="SPDY的出现"></a>SPDY的出现</h3><ul><li><p>SPDY是谷歌在09年年中时发布的，它的主要目标时通过解决HTTP1.1中一些显著的性能限制，来减少网页额的加载时间。目前为止，Chrome,Firefox和Opera都支持了这一协议。</p></li><li><p>SPDY引入了新的二进制分帧层，以实现多路复用、优先次序、最小化的消除网络延迟，同时对HTTP首部进行压缩，减少HTTP报文的冗余数据。</p><blockquote><p>目前为止，我们只在实验室条件下测试过 SPDY。最初的成果很激动人心：通过模拟的家庭上网线路下载了 25 个最流行的网站之后，我们发现性能的改进特别明显，页面加载速度最多快了 55%。 ——A 2x Faster Web Chromium Blog</p></blockquote></li></ul><a id="more"></a><ul><li><p>一方面由于随着web应用的发展，HTTP1.1协议的局限性突显的越来越严重，另一方面由于SPDY的优秀表现，12年初，W3C向全社会征集HTTP2的建议，最终决定将SPDY规范作为制定标准的基础。随后的时间内，SPDY与HTTP2共同进化，HTTP2提出新规范或新功能，SPDY为它进行测试和验证。当HTTP2一切就绪之日，就是SPDY退出舞台之时。事实上，在今年2月谷歌公司已经宣布将在16年年初放弃对SPDY的支持。</p></li><li><p>目前各浏览器对SPDY和HTTP2的支持情况分别如下:<br>  <img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/HTTP/five/spdy-caniuse.png" alt><br>  <img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/HTTP/five/http2-caniuse.png" alt></p><h3 id="SPDY与HTTP2的区别"><a href="#SPDY与HTTP2的区别" class="headerlink" title="SPDY与HTTP2的区别"></a>SPDY与HTTP2的区别</h3></li><li><p>头部压缩算法，SPDY，通用的deflate算法[注1]；HTTP2，专门为压缩头部设计的HPACK算法</p></li><li>SPDY必须在TLS上运行，HTTP2可在TCP上直接使用，因为增加了HTTP1.1的Upgrade机制</li><li>更加完善的协议商讨和确认流程</li><li>更加完善的Server Push流程</li><li>增加控制帧的种类，并对帧的格式考虑的更细致</li></ul><h3 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h3><ul><li><p>deflate算法 这个算法是由2个算法组合而成，哈夫曼编码和LZ77编码。</p><ul><li><p>哈夫曼编码 一种无前缀编码，简单来说就是长字符串用短编码表示，以最终达到减少总大小的目的。具体编码过程可参考Huffman 编码压缩算法</p></li><li><p>例如，在一篇英语文章中，字母“E”出现的频率最高，“Z”最低，如果我们采用字符编码，那么每一个字母都是8bit表示；但是如果，我们使用不定长的bit编码，频率高的字母用比较短的编码表示，频率低的字母用长的编码表示，就会大大缩小文件的空间。</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">字符编码</span><br><span class="line">A00101001</span><br><span class="line">B00101010</span><br><span class="line">C00101011……</span><br><span class="line">哈夫曼编码</span><br><span class="line">A    <span class="number">0</span></span><br><span class="line">B    <span class="number">10</span></span><br><span class="line">C    <span class="number">110</span></span><br><span class="line">D    <span class="number">1110</span></span><br><span class="line">E    <span class="number">11110</span></span><br></pre></td></tr></table></figure><p>大致思路：每次总是选取频率最小两个节点，将其频率相加，最终构成一个最优二叉树。 例如：有A,B,C,D,E五个字符，出现的频率（即权值）分别为5,4,3,2,1,那么我们第一步先取两个最小权值作为左右子树构造一个新树，即取1，2构成新树，其结点为1+2=3<br>  <img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/HTTP/five/hfm-1.png" alt><br>虚线为新生成的结点，第二步再把新生成的权值为3的结点放到剩下的集合中，所以集合变成{5,4,3,3}，再根据第二步，取最小的两个权值构成新树，如图：<br>  <img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/HTTP/five/hfm-2.png" alt><br>再依次建立哈夫曼树:<br>  <img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/HTTP/five/hfm-3.png" alt><br>其中各个权值替换对应的字符即为下图:<br>  <img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/HTTP/five/hfm-4.png" alt><br>所以各字符对应的编码为：A-&gt;11,B-&gt;10,C-&gt;00,D-&gt;011,E-&gt;010</p></li><li><p>LZ77编码 字典压缩算法,用到的场景比如gzip。</p><ul><li><p>这个算法的主要思想是：文件中有两块内容相同的话，那么只要知道前一块的位置和大小，我们就可以确定后一块的内容。所以我们可以用（两者之间的距离，相同内容的长度）这样一对信息，来替换后一块内容。由于（两者之间的距离，相同内容的长度）这一对信息的大小，小于被替换内容的大小，所以文件得到了压缩。</p></li><li><p>大致流程如下： 可构想出2个窗口，一个作为搜索缓存区（已完成搜索的字符），一个作为待搜索窗口。如下图:<br>  <img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/HTTP/five/lz77.jpg" alt></p></li><li>编码过程：<ul><li>如果待搜索字符c没在搜索缓存区中找到，则输出(0,0,c),同时，整个窗口向前移动1位</li><li>如果待搜索字符c在搜索缓存区中找到，起始位置在搜索缓存区中x，连续长度是offset，待搜索窗口中offset之后的一个字符是d，则输出(x, offset, d)。之后，整个窗口向前移动offset位。</li><li>最终输出的三元组就是压缩码</li></ul></li></ul></li></ul></li></ul><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://imjiaolong.cn/post/http2%26spdy.html" target="_blank" rel="noopener">https://imjiaolong.cn/post/http2%26spdy.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Protocol </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>HTTP学习（一）——HTTP的历史</title>
      <link href="/2018/04/20/HTTP%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2018/04/20/HTTP%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul><li>本系列文章均转自<a href="https://imjiaolong.cn/" target="_blank" rel="noopener">小路口</a>的系列博文，因为没有找到博主的联系方式，故如有侵权烦请联系我进行处理。</li></ul><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><ul><li>在上世纪60年代，世界上占统治地位的通信网络是电话网络，它是基于电路交换[1]的。与此同时，随着分时计算机的出现和计算机重要性的提高，如何充分利用分散在世界各地的数字计算机为人们所共享就变的越发重要了。其中需要注意的是，这些用户所产生的流量是具有突发性的，也就是说具有活动的间断性。</li><li>于是世界上的科学家们就发明了更能很好解决突发性的分组交换来替代电路交换。最开始是美国的阿帕网，ARPAnet，是世界上第一个分组交换机网络，也就是今天因特网的直接祖先。</li><li>HTTP协议是现代web的基础。其实HTTP协议的出现主要是为了推动万维网的应用，它们的发明者是同一个人。HTTP协议设计之初是非常简洁的，就是为了传输超文本文档，也就是HTTP0.9版本。</li></ul><a id="more"></a><h3 id="HTTP的版本"><a href="#HTTP的版本" class="headerlink" title="HTTP的版本"></a>HTTP的版本</h3><ul><li><p>HTTP0.9</p><ul><li>请求：ASCII字符串＋CRLF结尾</li><li>响应：ASCII字符流/HTML+CRLF结尾</li><li>只能GET获取资源，不能发送携带数据的POST请求</li><li>文档传完之后，断开连接</li></ul></li><li><p>HTTP1.0（并不是真正的规范）</p><p>随着页面上的内容逐渐丰富，除了文字，超链接，还有图片资源。 人们对web应用的需求也不断增加，要求不仅能够访问HTML同时还需要能够提供有关请求和响应的元数据（首部字段），在页面上进行交互操作，比如表单提交，并且支持内容协商。</p><ul><li>请求/响应的首部可有多行首部字段构成</li><li>响应对象前增加了一个响应状态行</li><li>可以支持长连接，还是每次请求结束后默认都断开连接</li></ul></li><li><p>HTTP1.1</p><ul><li>持久连接</li><li>分块传输</li><li>字节范围请求</li><li>协商机制更健全，协商内容更多：内容编码，传输编码，缓存指令，客户端cookie等</li><li>HTTP pipling(实际使用受限，浏览器默认不开启，很多中间代理不提供该服务)</li></ul></li><li><p>HTTP2 在web应用中资源越来越丰富的趋势中，由于tcp自身的特点以至于HTTP1.1的性能上受到了很大的限制，虽然我们有做一些针对性能提高的hack。HTTP2的出现主要是为了提高传输性能，降低延迟，提高吞吐量。</p></li></ul><p>从总体来说，HTTP0.9用了一行命令就启动了万维网，HTTP1.0是对0.9扩展的正式说明，而HTTP1.1则是一份官方标准。总之，HTTP1.x的设计的初衷是实现要简单。但是这也是以牺牲性能为代价的。所以，这也是现在HTTP2所要解决的问题。</p><ul><li><strong>解释</strong><ol><li>“HTTP1.x的设计的初衷是实现要简单。但是这也是以牺牲性能为代价的” 比如没有处理并行连接和请求的快捷方法，没有为了减少不必要的请求开销而做优化（首部压缩）等等，这些以至于在页面资源极其丰富的今天，即便我们针对HTTP1.1做了很多HACK优化，然而性能还是没有得到很大的提升。而这些点在HTTP2中都得到了改进。</li></ol></li></ul><h3 id="HTTP与tcp的关系"><a href="#HTTP与tcp的关系" class="headerlink" title="HTTP与tcp的关系"></a>HTTP与tcp的关系</h3><ul><li>HTTP是应用层的协议，tcp是传输层的协议。HTTP协议并没有规定必须要使用tcp协议当作是传输层的协议，现在默认使用tcp当做是传输层协议，采用80端口（因为HTTP是无状态协议，要是使用未经改良的不可靠传输协议，很容易造成数据丢失）；另外，谷歌还研发了一种基于udp的多路传输协议QUIC(Quick UDP Internet Connections)[2]，用来解决SPDY在TCP遇到的瓶颈而在UDP上做出的探索。</li><li>HTTP是一种无状态的协议，当前的请求与上一次的请求并无关系，也就是说这次HTTP请求做什么和上一次请求做什么是没有关系的，哪怕请求的是相同的资源。这样做的好处是，服务器不用为了保存状态而消耗过多的资源，坏处是重复发相同的状态，会浪费网络资源，造成网络拥塞，延迟增大。</li><li>tcp提供了可靠传输的性能，为精确传输做了优化，比如3次握手，差错检测，快速重传。同时还进行了拥塞预防与控制，慢启动等来减轻整个网络的拥塞程度。一个数据包从请求到收到，需要经过传播延迟，传输延迟，处理延迟和排队延迟。因此，tcp比较适合大块数据的精确传输，性价比高；若常有突发的连接请求，实际上是其负作用的。原因很简单，在拿到完整数据之前，tcp做了太多事，造成了太多延迟，至少1个RTT。</li></ul><h3 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h3><ol><li>电路交换：在端系统会话过程中，预留了端系统间所经路径所需要的资源，包括缓存，链路传输速率。</li><li>QUIC能够处理传输可靠性、丢包或无序数据包等一系列UDP默认未处理的问题。它的高层类似SPDY，低层是在UDP上模仿实现TCP的面向连接特性和可靠性并加入类似TLS的加密过程</li></ol><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://imjiaolong.cn/post/http-history.html" target="_blank" rel="noopener">https://imjiaolong.cn/post/http-history.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Protocol </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HTTP学习（二）——一条消息的历程</title>
      <link href="/2018/04/20/HTTP%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2018/04/20/HTTP%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul><li>我们都知道HTTP底层还是调用TCP协议进行传输的，那么具体怎样调用的呢（如下图）？在这个过程中一条消息都经历了什么过程呢？<ul><li><img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/HTTP/two/%E5%8E%86%E7%A8%8B.jpg" alt="历程"></li></ul></li></ul><a id="more"></a><h3 id="历程"><a href="#历程" class="headerlink" title="历程"></a>历程</h3><ul><li><p>应用层（HTTP, HTTP报文）</p><ul><li><p>HTTP报文是基于文本的，<strong>是没有长度限制</strong>的。也就是说资源有多大，就会一次性都会发过去。HTTP报文的首部行之间是用换行回车来分隔。另外，发送过去的报文实际内容就是将一个个的字符用ASCII码来表示。</p><p><img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/HTTP/two/http-layer.png" alt></p></li></ul></li><li><p>运输层(TCP，报文段)</p><ul><li>如果TCP需要发送一个很大的数据，TCP通常会把文件化成长度为<strong>MSS</strong>[1]的若干块再发送。也就是将长报文划分成短报文，并提供拥塞控制机制。TCP报文的首部一般是20字节，包括端口号，序号[3]和确认号[4]，以及做验证的一些字段。<ul><li><img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/HTTP/two/tcp-layer.png" alt></li></ul></li></ul></li><li><p>网络层(IP, 数据报)</p><ul><li><p>增加了源IP地址和目的IP地址；同时规定了数据报长度（包括首部长），理论上是<strong>65535字节</strong>。</p></li><li><p>有可能从发送方到接受方这一路径中每段链路使用的<strong>链路层协议不同，且这些协议具有不同的MTU</strong>[2],因此就需要对ip数据报进行分片。</p></li><li><p>只有完全重构为初始ip的数据报才会被交付到上层，否则会被直接丢弃。如果运输层是TCP，那么TCP会要求源重传。</p><p><img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/HTTP/two/ip-layer.png" alt></p></li></ul></li><li><p>链路层(帧)</p><ul><li><p>传输的数据量有<strong>固定大小</strong>，不同的链路层协议能传送的最大数据量不同。可见<a href="http://blog.chinaunix.net/uid-20530497-id-2878069.html" target="_blank" rel="noopener">此文</a></p></li><li><p>会增加源mac地址和目的mac地址。</p><p><img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/HTTP/two/datalink-layer.png" alt></p></li></ul></li></ul><h3 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h3><ol><li>MSS: 最大报文段长度，不包括TCP报文的头部。受最大链路层帧长度<strong>MTU</strong>的限制。</li><li>MTU: 最大传输单元，链路层协议不同，议具的MTU也有可能不同，其中以太网和PPP链路层的MTU是1500字节。</li><li>序号：这个分组的第一字节排在整个消息的第几位。</li><li>确认号：期望下次从主机那儿获得字节的序号。</li></ol><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://imjiaolong.cn/post/message-road.html" target="_blank" rel="noopener">https://imjiaolong.cn/post/message-road.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Protocol </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HTTP学习（三）——关于HTTP/1.1的管道化</title>
      <link href="/2018/04/20/HTTP%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2018/04/20/HTTP%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是http管道化"><a href="#什么是http管道化" class="headerlink" title="什么是http管道化"></a>什么是http管道化</h3><ul><li>通常，http请求总是顺序发送的，下一个请求只有在当前请求的响应被完全接受的时候才会被发送。由于网络延迟和带宽的限制，这样会导致在服务器发送下一个响应的时候中间有很大的延迟。 </li><li>HTTP/1.1允许多个http请求通过一个套接字同时被输出 ，而不用等待相应的响应。然后请求者就会等待各自的响应，这些响应是按照之前请求的顺序依次到达。（me：所有请求保持一个FIFO的队列，一个请求发送完之后，不必等待这个请求的响应被接受到，下一个请求就可以被再次发出；同时，服务器端返回这些请求的响应时也是按照FIFO的顺序）。<ul><li>管道化的表现可以大大提高页面加载的速度，尤其是在高延迟连接中。 管道化同样也可以减少tcp/ip的数据包。通常MSS的大小是在536-1460字节，所以将许多个http请求放在一个tcp/ip包 里也是有可能的。减少加载一个网页所需数据包的数量可以在整体上对网络有益处，因为数据包越少，路由器和网络带来的负担就越少。</li><li>HTTP/1.1需要服务器也支持管道化。但这并不意味着服务器需要管道化响应，而是当客户端发出管道化请求时，服务器不会响应失败。这显然有可能引入一种新的福音主义错误（原文：This obviously has the potential to introduce a new category of evangelism bugs），因为仅有现代浏览器支持管道化。</li></ul></li></ul><a id="more"></a><h3 id="什么时候我们应该管道化请求"><a href="#什么时候我们应该管道化请求" class="headerlink" title="什么时候我们应该管道化请求"></a>什么时候我们应该管道化请求</h3><ul><li>只有幂等的请求[1] 才可以被管道化，比如GET和HEAD。POST和PUT不应该被管道化。我们同样也不应该在建立新连接的时候发出管道化的请求 ，因为不能确源服务或代理是否支持HTTP/1.1。因此，管道化只能利用已存在的 keep-alive 连接。</li></ul><h3 id="多少个请求应该被管道化"><a href="#多少个请求应该被管道化" class="headerlink" title="多少个请求应该被管道化"></a>多少个请求应该被管道化</h3><ul><li>如果连接过早的关闭，管道化许多请求是划不来的，因为我们会花费很多时间用来向网络里写请求，然后还不得不在新连接中重写一遍。而且，如果较早到达的请求需要花费很长的时间完成，一个过长的管道实际上会让用户感知到更长的延迟。</li><li>HTTP/1.1标准也没有提供关于管道化请求理想数目的任何指导。实际上，我们建议每个服务器不超过2个keep-alive连接。显然，这个还得依赖于应用本身。鉴于上述的原因，浏览器可能不需要一个持续时间特别长的管道。2个可能是比较合适的值，但是还有待测试。</li></ul><h3 id="如果一个请求被取消了，会发生什么？"><a href="#如果一个请求被取消了，会发生什么？" class="headerlink" title="如果一个请求被取消了，会发生什么？"></a>如果一个请求被取消了，会发生什么？</h3><ul><li>如果一请求被取消了，是不是意味着整个管道都被取消了呢？或者，是不是意味着这个被取消请求的响应应该被简单的丢弃，以便这个管道中的其他请求不会被强制重发？<ul><li>这个答案依赖于很多因素，包括，这个被取消请求的响应还有多少没有被收到。最原始的办法可能是简单的取消管道，然后重发所有的请求。仅仅当请求是幂等的时候才可以。这样原始的方法也可以产生好的影响，因为正在管道中被发送的请求可能属于同一个正在被取消的页面载入组。</li></ul></li></ul><h3 id="如果连接失败会发生什么？"><a href="#如果连接失败会发生什么？" class="headerlink" title="如果连接失败会发生什么？"></a>如果连接失败会发生什么？</h3><ul><li>如果连接失败了或服务器在下载一个管道中的响应时中断了，浏览器必须有能力重新开始发送被丢失的请求。这种情况可以等同于上面讨论的被取消的例子。</li></ul><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><ol><li>其实HTTP管道化就是将客户端的FIFO队列移到了服务端。在客户端可以依次发送所有要发送的请求（当然这些请求是在同一个域下的），一个请求发送完之后，不必等待这个请求的响应被接受到，下一个请求就可以被再次发出。在服务器端维持的FIFO队列，这个队列是按照资源的重要程度排列的。比如HTML比CSS要先返回，JS,CSS比图片先返回。</li><li>在服务器端会有一个缓冲区，来存放那些已经被处理好了但是还没轮到被发送的响应。比如服务器先后收到了A,B两个请求，A资源比B资源优先级要高，处理A需要10ms，处理B需要1ms，假设服务器可以并行处理请求，那么B的响应肯定是最先处理好了的，但是B响应不能先发出去，必须待在缓冲区里，等待A响应处理好了之后，先把A的响应发出去，B的响应才能够被发出去。因为服务端必须要遵循FIFO这个原则。</li><li>HTTP管道化不是HTTP2的内容，是对HTTP1.1协议下，服务器不能很好处理并行请求的一个改进。</li><li>管道化的有序和TCP的有序是本质上的不同，管道化的有序，是消息与消息之间的有序。TCP中的有序，组成一个消息的多个报文段之间的有序。</li><li>管道做了哪些事，我的理解是创造了一个可以不用等待前一个请求的响应即可发送下一个请求的场所。至于注意些什么，除了知道有些设备不支持，其他的我也没实际经验（毕竟没用过，囧）。</li></ol><h3 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h3><ol><li><strong>HTTP/方法的幂等性</strong>：是指一次和多次请求某一个资源应该具有同样的副作用。 幂等性的请求，实际上就是多次操作都不会改变结果的请求，比如GET，我可以多次从同一个地方获取资源，但是对于资源本身来说并不会发生什么变化，我GET10次和GET100次，资源都没有发生任何变化。而post则不同了，我提交表单10次，和100次，造成的结果是不同的，至少数据库里新增的数据有不同。<ul><li>详情见<a href="https://www.jianshu.com/p/475589f5cd7b" target="_blank" rel="noopener">此文</a></li></ul></li></ol><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://imjiaolong.cn/post/http-pipelining.html" target="_blank" rel="noopener">https://imjiaolong.cn/post/http-pipelining.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Protocol </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>TCP流量控制</title>
      <link href="/2018/04/08/TCP%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/"/>
      <url>/2018/04/08/TCP%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h3><ul><li>问题：如果发送方把数据发送得过快，接收方可能会来不及接收，这就会造成数据的丢失。<ul><li>所谓流量控制就是让发送方的发送速率不要太快，要让接收方来得及接收。利用滑动窗口机制可以很方便地在TCP连接上实现对发送方的流量控制。<ul><li>滑动窗口理解起来的话可以想象要发送的数据在一个首尾连接的数组上，而滑动窗口则是这个上面的一部分（大小由收发双方进行协商（协商的过程也就是对数据的发送和确认的过程）动态变化）。</li></ul></li></ul></li></ul><a id="more"></a><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ul><li>设A向B发送数据。在连接建立时，B告诉了A：“我的接收窗口是 rwnd = 400 ”(这里的 rwnd 表示 receiver window) 。因此，发送方的发送窗口不能超过接收方给出的接收窗口的数值。<ul><li>请注意，TCP的窗口单位是字节，不是报文段。TCP连接建立时的窗口协商过程在图中没有显示出来。</li><li>设每一个报文段为100字节长，而数据报文段序号的初始值设为1。大写ACK表示首部中的确认位ACK，小写ack表示确认字段的值ack<br><img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/TCP/SouthEast.jpg" alt></li><li>从图中可以看出，B进行了三次流量控制。第一次把窗口减少到 rwnd = 300 ，第二次又减到了 rwnd = 100 ，最后减到 rwnd = 0 ，即不允许发送方再发送数据了。这种使发送方暂停发送的状态将持续到主机B重新发出一个新的窗口值为止。B向A发送的三个报文段都设置了 ACK = 1 ，只有在ACK=1时确认号字段才有意义。</li><li>TCP为每一个连接设有一个持续计时器(persistence timer)。只要TCP连接的一方收到对方的零窗口通知，就启动持续计时器。若持续计时器设置的时间到期，就发送一个零窗口控测报文段（携1字节的数据），那么收到这个报文段的一方就重新设置持续计时器。</li></ul></li></ul><h3 id="糊涂窗口综合症（Silly-Window-Syndrome）"><a href="#糊涂窗口综合症（Silly-Window-Syndrome）" class="headerlink" title="糊涂窗口综合症（Silly Window Syndrome）"></a>糊涂窗口综合症（Silly Window Syndrome）</h3><ul><li>解释<ul><li>当发送端应用进程产生数据很慢、或接收端应用进程处理接收缓冲区数据很慢，或二者兼而有之；就会使应用进程间传送的报文段很小，特别是有效载荷很小。极端情况下，有效载荷可能只有1个字节；而传输开销有40字节(20字节的IP头+20字节的TCP头) 这种现象就叫糊涂窗口综合症。</li></ul></li><li>发送端引起的SWS<ul><li>如果发送端为产生数据很慢的应用程序服务(典型的有telnet应用)，例如，一次产生一个字节。这个应用程序一次将一个字节的数据写入发送端的TCP的缓存。如果发送端的TCP没有特定的指令，它就产生只包括一个字节数据的报文段。结果有很多41字节的IP数据报就在互连网中传来传去。</li><li>解决方法<ul><li>为了防止发送端的TCP逐个字节地发送数据。必须强迫发送端的TCP收集数据，然后用一个更大的数据块来发送。发送端的TCP要等待多长时间呢？如果它等待过长，它就会使整个的过程产生较长的时延。如果它的等待时间不够长，它就可能发送较小的报文段，于是，Nagle找到了一个很好的解决方法，发明了Nagle算法。而他选择的等待时间是一个RTT,即下个ACK来到时。</li></ul></li></ul></li><li>接收端引起的SWS<ul><li>接收端的TCP可能产生糊涂窗口综合症，如果它为消耗数据很慢的应用程序服务，例如，一次消耗一个字节。假定发送应用程序产生了1000字节的数据块，但接收应用程序每次只吸收1字节的数据。再假定接收端的TCP的输入缓存为4000字节。发送端先发送第一个4000字节的数据。接收端将它存储在其缓存中。现在缓存满了。它通知窗口大小为零，这表示发送端必须停止发送数据。接收应用程序从接收端的TCP的输入缓存中读取第一个字节的数据。在入缓存中现在有了1字节的空间。接收端的TCP宣布其窗口大小为1字节，这表示正渴望等待发送数据的发送端的TCP会把这个宣布当作一个好消息，并发送只包括一个字节数据的报文段。这样的过程一直继续下去。一个字节的数据被消耗掉，然后发送只包含一个字节数据的报文段。</li><li>解决方法<ul><li>第一个解决方法是只要有数据到达就发送确认，但宣布的窗口大小为零，直到或者缓存空间已能放入具有最大长度的报文段，或者缓存空间的一半已经空了。</li><li>延迟确认。第二个解决方法是延迟一段时间后再发送确认。这表示当一个报文段到达时并不立即发送确认。接收端在确认收到的报文段之前一直等待，直到入缓存有足够的空间为止。延迟的确认防止了发送端的TCP滑动其窗口。当发送端的TCP发送完其数据后，它就停下来了。这样就防止了这种症状。<ul><li>优点：它减少了通信量。接收端不需要确认每一个报文段。</li><li>缺点，就是迟延的确认有可能迫使发送端重传其未被确认的报文段。可以用协议来平衡这个优点和缺点，例如现在定义了确认的延迟不能超过500毫秒。</li></ul></li></ul></li></ul></li></ul><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://blog.csdn.net/hzhsan/article/details/46429749" target="_blank" rel="noopener">https://blog.csdn.net/hzhsan/article/details/46429749</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Protocol </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>TCP问答</title>
      <link href="/2018/02/08/TCP%E9%97%AE%E7%AD%94/"/>
      <url>/2018/02/08/TCP%E9%97%AE%E7%AD%94/</url>
      
        <content type="html"><![CDATA[<h3 id="问答"><a href="#问答" class="headerlink" title="问答"></a>问答</h3><ul><li><p>A进程通过TCP向另一台机器上的B进程发送了一个字符串“hello”，TCP返回对方成功接收的确认信息，请问，现在进程A是否可以肯定地说进程B收到了它发送的字符串？</p><ul><li>不能！举反例，进程B所在机器的TCP收到进程A发送的“hello”信息后，告诉进程A发送成功，但有可能没有立即将数据交给进程B，而是放在自己的缓冲区中，等待进程B读取，如果机器此时突然掉电，缓冲区中的信息将丢失，进程B将不可能收到“hello”字符串。</li></ul></li><li><p>有什么办法来尽量避免上述情况的发生呢？</p><ul><li>将TCP报文段首部中的PSH标志置1，这样会让B端的TCP协议收到数据后尽快交给进程B，能不缓存尽量不要缓存。</li></ul></li><li><p>我们知道通常TCP连接的建立需要3次握手，关闭需要4次握手，为什么关闭会多一次呢？</p><ul><li>简单说，就是TCP允许半关闭状态的存在。当进程A向进程B发送FIN，B也向A发送确认后。此时此刻的状态就是半关闭状态，A发送的FIN就是告诉B：“我要发送的数据都发送完了”但B没有发送FIN给A，有可能代表B还有没发送完的数据，如果B也发送完数据了，B就发送FIN给进程A，进程A确认B发送的FIN，这时，双方都已经发送完了数据，连接就断开了，TCP回收相关资源。</li></ul></li><li><p>假如服务器突然断电重启，但客户端并不知情，请问此时二者之间的TCP连接处于什么状态？</p><ul><li>处于半打开状态。就是客户端还觉得连接是正常的，服务器这边已经没有连接的任何信息了。</li></ul></li><li><p>那么，假如此时客户端通过这个连接向服务器请求数据，服务器会怎么应对呢？</p><ul><li>服务器收到客户端的请求会进行一次ARP查询，获得客户端MAC地址，然而由于已经丢失了所有连接信息，此时的服务器是一脸懵逼（就像喝了孟婆汤！），于是乎，它会发一个RST给客户端，表示：“哥们，我不认识你，想跟我说话请先发送SYN！”</li></ul></li><li><p>假如客户端按照服务器的要求重新建立连接，却搞错了服务器的端口号，会发生什么情况呢？</p><ul><li>有两种可能，一种是服务器端的TCP收到客户端请求，查看本机上是否有进程在监听相应的端口，如果有，就把请求交给这个进程，一般而言，这个进程不会接受这个连接的，于是它会发一个RST给客户端。还有一种可能是TCP没有找到哪个进程在监听相应的端口，于是TCP就会直接发一个RST给客户端，一般而言都会是这种情况。</li></ul></li><li><p>假如现在有一个多进程服务器，服务器进程为A,接受一个连接后新建一个进程B来处理连接，再接受一个连接后又建一个进程C来处理这个连接，请问，进程ABC是否监听同样的端口？</p><ul><li>是！因为一条连接由唯一的四元组组成。</li></ul></li><li><p>那TCP接收到发送给这个端口的报文段，怎么决定发给哪个进程呢？</p><ul><li>首先，所有的SYN报文段都会发送给服务器进程A，其他的报文段依据\&lt;sourceIP:port, targetIP:port&gt;这个四元组来决定发送给进程B还是进程C。</li></ul></li><li><p>假如上面的服务器进程A收到一个连接请求，正在为这个请求创建处理进程的时候，又有新的连接请求进来了，TCP会怎么处理呢？</p><ul><li>一般情况下，服务器进程A会给TCP一个指示，让TCP维护一个适当长度的连接队列，TCP与新连接请求完成三次握手后，就会把这个连接放入连接队列中，服务器进程A会在合适的时候来从这个队列中取连接。</li></ul></li><li><p>这个连接对列是否会对服务器的并发处理能力产生影响呢？如果会，会有什么影响？</p><ul><li>不会！二者没有必然关系。</li></ul></li><li><p>MSS和MTU各是什么，二者是什么关系？</p><ul><li>MSS是TCP最大报文段长度，就是TCP发送数据需要对数据分段时，最大的段的字节数。MTU是最大传输单元，通常由网卡的硬件特性规定，表示通过该网卡传输的数据单元最大的字节数。MSS要受同一台机器上的MTU限制。比如MTU为1500字节，那么MSS就只能是1460字节，这是因为1460字节的数据在通过网卡向外传输时，会加上20字节的ip头和20字节的tcp头。</li></ul></li><li><p>假设机器A和B的MSS分别是1400和1600，请问，A通过TCP向B发送数据时，是否可以发送长度为1600字节的数据段？</p><ul><li>不可以，虽然发送1600字节的数据段没有突破B的MSS，但是突破了A自己的MSS。这样一来，当这1600字节的数据段通过A的网卡向B发送时，会被切分为2个IP片，每个为840字节，以保证不突破A的MTU，这显然降低了传输的效率，因为两个840字节中有着相同的IP头和TCP头。</li></ul></li><li><p>机器A和B有一条TCP连接，假如A想尽快断开连接，应当怎么办？</p><ul><li>A可以直接给B发送一个RST，就可以了，相当于告诉B，我关闭连接了，你看着办吧。这叫做异常关闭。</li></ul></li><li><p>B的TCP收到A发来的RST，会怎么办？</p><ul><li>B的TCP会告诉上层的进程，连接已经断开了，然后就会回收这条连接的资源，并不会发送任何确认信息给A。所谓你无情休怪我不义。</li></ul></li><li><p>假设A正常断开与B的TCP连接，当收到B的FIN时，A发送ACK给B，是否就算完成了4次握手，连接已经成功断开？</p><ul><li>不是，A的TCP会启动一个定时器，等待2MSL的时间，这主要是为了防止A的ACK没有成功传到B，让B以为自己的FIN没有送到A处，反复重传FIN的问题。2MSL的时间到时，如果A没有再次收到B的FIN，说明B成功收到A的ACK，A就可以安全地断开这个连接，若期间再次收到B的FIN，则A会重传ACK。</li></ul></li></ul><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://mp.weixin.qq.com/s/z0eALQt40Wl2xFGyAqY_Uw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/z0eALQt40Wl2xFGyAqY_Uw</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Protocol </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>TCP拥塞控制</title>
      <link href="/2018/01/08/TCP%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6/"/>
      <url>/2018/01/08/TCP%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="拥塞控制与流量控制"><a href="#拥塞控制与流量控制" class="headerlink" title="拥塞控制与流量控制"></a>拥塞控制与流量控制</h3><ul><li><p>拥塞控制：防止过多的数据注入到网络中，这样可以使网络中的路由器或链路不致过载。拥塞控制所要做的都有一个前提：网络能够承受现有的网络负荷。拥塞控制是一个全局性的过程，涉及到所有的主机、路由器，以及与降低网络传输性能有关的所有因素</p></li><li><p>流量控制：指点对点通信量的控制，是端到端正的问题。流量控制所要做的就是抑制发送端发送数据的速率，以便使接收端来得及接收</p></li><li><p>拥塞控制代价：需要获得网络内部流量分布的信息。在实施拥塞控制之前，还需要在结点之间交换信息和各种命令，以便选择控制的策略和实施控制。这样就产生了额外的开销。拥塞控制还需要将一些资源分配给各个用户单独使用，使得网络资源不能更好地实现共享。</p></li></ul><a id="more"></a><h3 id="几种拥塞控制方法"><a href="#几种拥塞控制方法" class="headerlink" title="几种拥塞控制方法"></a>几种拥塞控制方法</h3><ul><li><p>慢开始( slow-start )、拥塞避免( congestion avoidance )、快重传( fast retransmit )和快恢复( fast recovery )。</p></li><li><p><strong>慢开始和拥塞避免</strong></p><ul><li><p>发送方维持一个拥塞窗口 cwnd ( congestion window )的状态变量。拥塞窗口的大小取决于网络的拥塞程度，并且动态地在变化。发送方让自己的发送窗口等于拥塞窗口大小</p></li><li><p>发送方控制拥塞窗口的原则是：只要网络没有出现拥塞，拥塞窗口就再增大一些，以便把更多的分组发送出去。但只要网络出现拥塞，拥塞窗口就减小一些，以减少注入到网络中的分组数</p></li><li><p><strong>慢开始</strong></p><ul><li>慢开始算法：当主机开始发送数据时，如果立即所大量数据字节注入到网络，那么就有可能引起网络拥塞，因为现在并不清楚网络的负荷情况。因此，较好的方法是先探测一下，即由小到大逐渐增大发送窗口，也就是说，由小到大逐渐增大拥塞窗口数值。通常在刚刚开始发送报文段时，先把拥塞窗口 cwnd 设置为<strong>一个最大报文段MSS</strong>的数值。而在每收到一个对新的报文段的确认后，把拥塞窗口增加至多一个MSS的数值。用这样的方法逐步增大发送方的拥塞窗口 cwnd ，可以使分组注入到网络的速率更加合理<br>  <img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/TCP/cwnd.jpg" alt></li><li>每经过一个传输轮次，拥塞窗口 cwnd 就加倍。一个传输轮次所经历的时间其实就是往返时间RTT。不过“传输轮次”更加强调：把拥塞窗口cwnd所允许发送的报文段都连续发送出去，并收到了对已发送的最后一个字节的确认</li><li><strong>注意：</strong>慢开始的“慢”并不是指cwnd的增长速率慢，而是指在TCP开始发送报文段时先设置cwnd=1，使得发送方在开始时只发送一个报文段（目的是试探一下网络的拥塞情况），然后再逐渐增大cwnd</li><li>为了防止拥塞窗口cwnd增长过大引起网络拥塞，还需要设置一个慢开始门限ssthresh状态变量（如何设置ssthresh）。慢开始门限ssthresh的用法如下： 当 cwnd &lt; ssthresh 时，使用上述的慢开始算法<ul><li>当 cwnd &gt; ssthresh 时，停止使用慢开始算法而改用拥塞避免算法</li><li>当 cwnd = ssthresh 时，既可使用慢开始算法，也可使用拥塞控制避免算法</li></ul></li></ul></li><li><p><strong>拥塞避免算法</strong></p><ul><li>让拥塞窗口cwnd缓慢地增大，即每经过一个往返时间RTT就把发送方的拥塞窗口cwnd加1，而不是加倍。这样拥塞窗口cwnd按线性规律缓慢增长，比慢开始算法的拥塞窗口增长速率缓慢得多</li><li>无论在慢开始阶段还是在拥塞避免阶段，只要发送方判断网络出现拥塞（其根据就是没有收到确认），就要把慢开始门限ssthresh设置为出现拥塞时的发送方窗口值的一半（但不能小于2）。然后把拥塞窗口cwnd重新设置为1，执行慢开始算法。这样做的目的就是要迅速减少主机发送到网络中的分组数，使得发生拥塞的路由器有足够时间把队列中积压的分组处理完毕</li><li>如下图，用具体数值说明了上述拥塞控制的过程。现在发送窗口的大小和拥塞窗口一样大<br>  <img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/TCP/%E6%85%A2%E5%BC%80%E5%A7%8B.jpg" alt><ol><li>当TCP连接进行初始化时，把拥塞窗口cwnd置为1。前面已说过，为了便于理解，图中的窗口单位不使用字节而使用报文段的个数。慢开始门限的初始值设置为16个报文段，即 cwnd = 16</li><li>在执行慢开始算法时，拥塞窗口 cwnd 的初始值为1。以后发送方每收到一个对新报文段的确认ACK，就把拥塞窗口值另1，然后开始下一轮的传输（图中横坐标为传输轮次）。因此拥塞窗口cwnd随着传输轮次按指数规律增长。当拥塞窗口cwnd增长到慢开始门限值ssthresh时（即当cwnd=16时），就改为执行拥塞控制算法，拥塞窗口按线性规律增长</li><li>假定拥塞窗口的数值增长到24时，网络出现超时（这很可能就是网络发生拥塞了）。更新后的ssthresh值变为12（即变为出现超时时的拥塞窗口数值24的一半），拥塞窗口再重新设置为1，并执行慢开始算法。当cwnd=ssthresh=12时改为执行拥塞避免算法，拥塞窗口按线性规律增长，每经过一个往返时间增加一个MSS的大小</li><li>强调：“拥塞避免”并非指完全能够避免了拥塞。利用以上的措施要完全避免网络拥塞还是不可能的。“拥塞避免”是说在拥塞避免阶段将拥塞窗口控制为按线性规律增长，使网络比较不容易出现拥塞</li></ol></li></ul></li></ul></li><li><p><strong>快重传和快恢复</strong></p></li><li><p>不使用快重传的情况：如果发送方设置的超时计时器时限已到但还没有收到确认，那么很可能是网络出现了拥塞，致使报文段在网络中的某处被丢弃。这时，TCP马上把拥塞窗口 cwnd 减小到1，并执行慢开始算法，同时把慢开始门限值ssthresh减半。</p><ul><li><p><strong>快重传算法</strong></p><ul><li>快重传算法首先要求接收方每收到一个失序的报文段后就立即发出重复确认（为的是使发送方及早知道有报文段没有到达对方）而不要等到自己发送数据时才进行捎带确认<br>  <img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/TCP/%E5%BF%AB%E9%87%8D%E4%BC%A0.jpg" alt><ul><li>接收方收到了M1和M2后都分别发出了确认。现在假定接收方没有收到M3但接着收到了M4。显然，接收方不能确认M4，因为M4是收到的失序报文段。根据可靠传输原理，接收方可以什么都不做，也可以在适当时机发送一次对M2的确认。</li><li>但按照快重传算法的规定，接收方应及时发送对M2的重复确认，这样做可以让发送方及早知道报文段M3没有到达接收方。发送方接着发送了M5和M6。接收方收到这两个报文后，也还要再次发出对M2的重复确认。这样，发送方共收到了接收方的四个对M2的确认，其中后三个都是重复确认。</li><li>快重传算法还规定，发送方只要一连收到三个重复确认就应当立即重传对方尚未收到的报文段M3，而不必继续等待M3设置的重传计时器到期。</li></ul></li></ul></li><li><p><strong>快恢复算法</strong></p><ol><li>当发送方连续收到三个重复确认，就执行“乘法减小”算法，把慢开始门限ssthresh减半。这是为了预防网络发生拥塞。注意：接下去不执行慢开始算法。</li><li>由于发送方现在认为网络很可能没有发生拥塞，因此与慢开始不同之处是现在不执行慢开始算法（即拥塞窗口cwnd现在不设置为1），而是把cwnd值设置为慢开始门限ssthresh减半后的数值，然后开始执行拥塞避免算法（“加法增大”），使拥塞窗口缓慢地线性增大。 下图给出了快重传和快恢复的示意图，并标明了“TCP Reno版本”。 区别：新的 TCP Reno 版本在快重传之后采用快恢复算法而不是采用慢开始算法。<br> <img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/TCP/%E6%8B%A5%E5%A1%9E%E9%81%BF%E5%85%8D.jpg" alt><ul><li>也有的快重传实现是把开始时的拥塞窗口cwnd值再增大一点，即等于 ssthresh + 3 X MSS 。这样做的理由是：既然发送方收到三个重复的确认，就表明有三个分组已经离开了网络。这三个分组不再消耗网络 的资源而是停留在接收方的缓存中。可见现在网络中并不是堆积了分组而是减少了三个分组。因此可以适当把拥塞窗口扩大了些</li><li>在采用快恢复算法时，慢开始算法只是在TCP连接建立时和网络出现超时时才使用</li><li>接收方根据自己的接收能力设定了接收窗口rwnd，并把这个窗口值写入TCP首部中的窗口字段，传送给发送方。因此，接收窗口又称为通知窗口。因此，从接收方对发送方的流量控制的角度考虑，发送方的发送窗口一定不能超过对方给出的接收窗口rwnd<ul><li>发送方窗口的上限值 = Min [ rwnd, cwnd ]</li><li>当rwnd &lt; cwnd 时，是接收方的接收能力限制发送方窗口的最大值。<br>当cwnd &lt; rwnd 时，则是网络的拥塞限制发送方窗口的最大值。</li></ul></li></ul></li></ol></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Protocol </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>信号量与自旋锁的区别</title>
      <link href="/2018/01/08/%E4%BF%A1%E5%8F%B7%E9%87%8F%E5%92%8C%E8%87%AA%E6%97%8B%E9%94%81%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2018/01/08/%E4%BF%A1%E5%8F%B7%E9%87%8F%E5%92%8C%E8%87%AA%E6%97%8B%E9%94%81%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><ul><li><p>区别一：实现方式</p><ul><li><p>自旋锁是自旋等待，进程状态始终处于<code>TASK_RUNNING</code>。</p></li><li><p>信号量是睡眠等待，进程在等待时处于<code>TASK_INTERRUPTIBLE</code>。</p></li></ul></li></ul><a id="more"></a><ul><li><p>区别二：睡眠死锁陷阱：</p><ul><li><p>在自旋锁的临界区中，进程是不能陷入睡眠的。</p></li><li><p>信号量可以睡眠。</p></li><li><p>同时，基于上面的原因，中断上下文中只能使用自旋锁（中断里不能休眠），在有睡眠代码的临界区只能使用信号量。</p></li></ul></li><li><p>区别三：CPU的使用情况：</p><ul><li>信号量对系统的负载小，因为它睡眠等待。</li></ul></li><li><p>区别四：执行的效率方面：</p><ul><li><p>自旋锁的效率比较高，因为它少了进程状态切换的消耗。</p></li><li><p>信号量的效率比较低，因为进程的等待需要切换进程状态。</p></li></ul></li><li><p>区别五：上锁的时间长短：</p><ul><li><p>因为自旋锁是忙等待，所以临界区的代码不能太长。</p></li><li><p>信号量可以使用在运行时间较长的临界区代码。</p></li></ul></li><li><p>区别六：是否关抢占：</p><ul><li><p>自旋锁是关抢占的，所以在单处理器非抢占的内核下，自旋锁是没用的，是空操作。</p></li><li><p>信号量并没有关抢占，所以，只有需要获得锁的进程才会睡眠，其他进程还可以继续运行。</p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 锁 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>TIME_WAIT状态</title>
      <link href="/2018/01/08/TIME_WAIT/"/>
      <url>/2018/01/08/TIME_WAIT/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><ul><li>关于TCP的<code>TIME_WAIT</code>，一直停留在明白有什么作用的层次。想着《计算机网络》都学完了，也应该把TCP的问题给实实在在的弄明白。</li></ul><a id="more"></a><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><ul><li><p>产生的原因见<a href="http://roux.top/2017/10/10/TCP%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/">TCP四次挥手</a></p></li><li><p>一些问题及解决</p><ul><li><p><a href="http://blog.csdn.net/dog250/article/details/13760985" target="_blank" rel="noopener">TIME_WAIT快速回收与重用</a></p></li><li><p><a href="https://huoding.com/2012/01/19/142" target="_blank" rel="noopener">记一次TIME_WAIT网络故障</a></p></li><li><p><a href="http://www.cnblogs.com/yjf512/p/5327886.html" target="_blank" rel="noopener">也说说TIME_WAIT状态</a></p></li></ul></li><li><p>深入剖析</p><ul><li><p><a href="https://huoding.com/2013/12/31/316" target="_blank" rel="noopener">再叙TIME_WAIT</a></p></li><li><p><a href="http://blog.oldboyedu.com/tcp-wait/" target="_blank" rel="noopener">你所不知道的TIME_WAIT和CLOSE_WAIT</a>—-强烈推荐</p></li></ul></li><li><p>以前也和前面文章里说的一样，只是知道出现大量的<code>TIME_WAIT</code>就应该调整那么三个参数就行了，但是没想到还有问题的存在，并且调整参数还会分情况与场景。以后学习要注意！</p></li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li>关于TCP的学习就基本上结束了，也学了近一年时间了，大大小小的问题在自己的搜索和老师的解答下也基本上弄明白了，部分细节后面慢慢的再深入探索。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Protocol </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>进程与线程</title>
      <link href="/2017/12/13/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/"/>
      <url>/2017/12/13/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><ul><li>网络编程也学了挺长时间了，想着把最基本的进程和线程捋一捋，为后面的进阶把基础弄扎实点。本文是我们学习交流发的，也不知道出处，在此感谢！文末有两篇文章讲解的很棒，结合起来细细品读，进线程基本就ok了！</li></ul><a id="more"></a><h4 id="进程与线程的区别和联系"><a href="#进程与线程的区别和联系" class="headerlink" title="进程与线程的区别和联系"></a>进程与线程的区别和联系</h4><ul><li><p>进程：</p><ul><li><p>进程是并发执行的程序在执行过程中分配和管理资源的基本单位,是一个动态的概念,操作系统分配资源的基本单位。</p></li><li><p>每一个进程都有自己的空间，在内存中有其完备的数据空间和代码空间，即进程空间或(虚空间).一个进程所拥有的数据和变量只属于它自己。</p></li></ul></li><li><p>线程：</p><ul><li><p>在网络或多用户环境下，一个服务器通常需要接收大量且不确定数量用户的并发请求，为每一个请求都创建一个进程显然是行不通的，——无论是从系统资源开销方面或是响应用户请求的效率方面来看。因此，操作系统中线程的概念便被引进了。线程，是进程的一部分，一个没有线程的进程可以被看作是单线程的。</p></li><li><p>线程有时又被称为轻权进程或轻量级进程，也是 CPU 调度的一个基本单位。（最简单的比喻多线程就像火车的每一节车厢，而进程则是火车。车厢离开火车是无法跑动的，同理火车也不可能只有一节车厢。多线程的出现就是为了提高效率。）</p></li></ul></li><li><p>区别：</p><ul><li><p>进程和线程的主要差别在于它们是操作系统不同的资源管理方式.</p></li><li><p>进程有独立的地址空间,一个进程崩溃后,在保护模式下不会对其他进程产生影响,而线程只是一个进程中的不同执行路径。线程有自己的堆栈和局部变量，但线程之间没有单独的地址空间，一个线程死掉就等于整个进程死掉，所以多进程的程序要比多线程的程序健壮，但在进程切换时，耗费资源较大，效率要差一些。对于一些要求同时进行并且又要共享某些变量的并发操作，只能用线程，不能用进程。</p></li><li><p>进程拥有一个完整的虚拟地址空间，不依赖于线程而独立存在；反之，线程是进程的一部分，没有自己的地址空间，与进程内的其他线程一起共享分配给该进程的所有资源。</p></li><li><p>简而言之：</p><ul><li><p>一个程序至少有一个进程,一个进程至少有一个线程.</p></li><li><p>线程的划分尺度小于进程,使得多线程的程序并发性高</p></li><li><p>另外,进程在执行过程中拥有独立的内存单元,而多线程共享内存,从而极大地提高了程序的运行效率</p></li><li><p>线程在执行过程中与进程还是有区别的。每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。</p></li><li><p>从逻辑角度来看，多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但操作系统并没有将多个线程看做多个独立的应用，来实现进程的调度和管理以及资源分配。这就是进程和线程的重要区别。</p></li></ul></li></ul></li><li><p>优缺点：</p><ul><li>线程和进程在使用上各有优缺点：线程执行开销小，但不利于资源的管理和保护；而进程正相反。同时，线程适合于在SMP(多核处理机)机器上运行，而进程则可以跨机器迁移。</li></ul></li></ul><h4 id="进程池线程池的概念"><a href="#进程池线程池的概念" class="headerlink" title="进程池线程池的概念"></a>进程池线程池的概念</h4><ul><li><p>进程池和线程池很相似，所以只介绍进程池。</p><ul><li><p>进程池是由服务器预先创建的一组进程，这些子进程的数目在3-10个之间<code>.http守护进程</code>就是使用了包含7个子进程的进程池来实现并发的。线程池中的线程数量和CPU的数量差不多。</p></li><li><p>进程池中的所有子进程都运行着相同的代码，并具有相同的属性，比如优先级，PGID等。因为进程池在服务器启动之初就创建好了，所以他们不用打开不必要的文件描述符（从父进程继承下来的），也不会错误的使用大块的堆内存（复制父进程的）</p></li><li><p>当有新的任务到来时，主进程将通过某种方式选择进程池中的某一个进程来为之服务。相对于动态创建子进程，选择一个已经存在的子进程的代价明显要小的多。</p></li></ul></li><li><p>关于创建池的数量</p><ul><li><p>CPU密集型任务主要消耗大量CPU资源，大量地进行计算。由于依靠CPU性能，一直占用CPU进行计算，也就说一般情况下能够采用多任务的数量等于CPU核心数。</p></li><li><p>IO密集型任务（磁盘读取，web服务）主要需要IO的读取，利用CPU的效率较低，大量时间花费在IO上。由于现在有异步IO技术，也就是说一个任务在IO等待时间时可以暂停运行，让CPU的空闲时间用来运行其他任务，等到IO读取完毕后在继续执行。从而实现单核CPU上运行单进程却能实现多任务的并发，此时线程数量应大于CPU的数量</p></li><li><p>具体:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">C: CPU核心数    N：进程或线程数</span><br><span class="line"></span><br><span class="line">C &lt;= N &lt;= M*C+n    （1 &lt;= M &lt;= 7)    n&lt;C</span><br><span class="line"></span><br><span class="line">M   进程：约3～4，线程：7～8</span><br></pre></td></tr></table></figure></li></ul></li><li><p>进程池与线程池的区别</p><ul><li><p>进程池</p><ul><li><p>优点：健壮性高，操作系统以进程为单位去分配资源</p></li><li><p>缺点：</p><ul><li><p>占用资源高</p></li><li><p>进程间通讯代价大</p></li><li><p>进程切换需要保护上下文，开销大</p></li></ul></li></ul></li><li><p>线程池</p><ul><li><p>优点：轻量级，通信代价小,线程间切换开销小。</p></li><li><p>缺点：健壮性不高，共享资源使用不当会导致错误。</p></li></ul></li></ul></li><li><p>子进程选择算法</p><ul><li><p>主进程通过某种算法主动选择子进程。最简单、最常用的算法是轮流选取算法。</p></li><li><p>主进程和所有的子进程都在同一个共享的队列中，刚开始都处于睡眠状态，当有新的任务到来时，主进程将任务添加到消息队列中。将会通过算法来使其中一个子进程唤醒，这个子进程将任务取出并执行，而其他进程还处于睡眠状态。</p></li><li><p>当选择了一个子进程之后，主进程还要告诉子进程执行任务所需要的数据，而传递这些数据就要在子进程和主进程之间创建一个管道。可以将这些数据全都定义为全局变量，而这些数据将会被所有的线程共享。</p></li></ul></li></ul><h4 id="为什么要用进程池（线程池）"><a href="#为什么要用进程池（线程池）" class="headerlink" title="为什么要用进程池（线程池）"></a>为什么要用进程池（线程池）</h4><ul><li><p>一个子进程是通过进程动态内存分配的方式创建的，这种创建子进程的方式虽然能够获得资源，但是是有很多缺点：</p><ul><li><p>动态创建进程是比较耗时间的，这将导致较慢的客户响应。</p></li><li><p>动态创建的子进程（或子线程）通常只用来为一个客户服务。这将导致系统上产生大量的进程（线程），这将使进程间（线程）间切换消耗大量的CPU资源。</p></li><li><p>动态创建出来的子进程（线程）是父进程（线程）的完整映射。当前进程（线程）必须谨慎的管理其分配的文件描述符和堆内存等系统资源，从而使系统的可用资源急剧下降，进而影响服务器性能。</p></li><li><p>由于系统的资源有限，这将是动态创建的进程（线程）数量有限，从而会使响应客户端请求的数量有上线。</p></li></ul></li><li><p>为了有效的解决在大量连接下的客户请求，就要采用一种方式来避开动态创建带来的缺点。进程（线程）池是通过事先划分一块系统资源区，这块区域在系统启动时 就已经创建并初始化了。用户可以直接取得资源，从而避免动态分配资源。</p></li><li><p>运用池的优点：</p><ul><li><p>可以执行大量相对短暂的任务</p></li><li><p>当任务增加的时候能够动态的增加进程池（线程池)中的进程（线程）的数量直到达到一定的阈值。</p></li><li><p>当任务执行完毕时，能够动态的销毁线程（进程）池中的线程（进程）。</p></li><li><p>系统开销少，能够统一管理。</p></li></ul></li></ul><h4 id="SOURCE"><a href="#SOURCE" class="headerlink" title="SOURCE"></a>SOURCE</h4><ul><li><p><a href="http://www.th7.cn/system/lin/201710/230767.shtml" target="_blank" rel="noopener">进线程区别详解</a></p></li><li><p><a href="https://my.oschina.net/cnyinlinux/blog/367910" target="_blank" rel="noopener">线程的实质</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 进程 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Git操作命令</title>
      <link href="/2017/12/12/Git%E5%91%BD%E4%BB%A4/"/>
      <url>/2017/12/12/Git%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><ul><li><p>学习中经常用到<code>GitHub</code>，但是一直只会一些简单的操作，偶尔碰到复杂的需求(或者一些细小的但是很重要的问题)的时候，又要去Google，往往会花费一定的时间(时间累积起来也很害怕哟)，所以对一些常用的命令做一些总结，顺便把找到的一些好的教程保存下来，节省查找一些时间。</p></li><li><p><a href="https://learngitbranching.js.org/" target="_blank" rel="noopener">在线练习—强烈推荐</a></p></li></ul><a id="more"></a><h4 id="命令啊命令"><a href="#命令啊命令" class="headerlink" title="命令啊命令"></a>命令啊命令</h4><ul><li><p>查看、添加、提交、删除、找回，重置修改文件</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">git help &lt;command&gt; # 显示command的help</span><br><span class="line"></span><br><span class="line">git show # 显示某次提交的内容 git show $id</span><br><span class="line"></span><br><span class="line">git co -- &lt;file&gt; # 抛弃工作区修改</span><br><span class="line"></span><br><span class="line">git co . # 抛弃工作区修改</span><br><span class="line"></span><br><span class="line">git add &lt;file&gt; # 将工作文件修改提交到本地暂存区</span><br><span class="line"></span><br><span class="line">git add . # 将所有修改过的工作文件提交暂存区</span><br><span class="line"></span><br><span class="line">git rm &lt;file&gt; # 从版本库中删除文件</span><br><span class="line"></span><br><span class="line">git rm &lt;file&gt; --cached # 从版本库中删除文件，但不删除文件</span><br><span class="line"></span><br><span class="line">git reset &lt;file&gt; # 从暂存区恢复到工作文件</span><br><span class="line"></span><br><span class="line">git reset -- . # 从暂存区恢复到工作文件</span><br><span class="line"></span><br><span class="line">git reset --hard # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改</span><br><span class="line"></span><br><span class="line">git ci &lt;file&gt; git ci . git ci -a # 将git add, git rm和git ci等操作都合并在一起做　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　 git ci -am &quot;some comments&quot;</span><br><span class="line"></span><br><span class="line">git ci --amend # 修改最后一次提交记录</span><br><span class="line"></span><br><span class="line">git revert &lt;$id&gt; # 恢复某次提交的状态，恢复动作本身也创建次提交对象</span><br><span class="line"></span><br><span class="line">git revert HEAD # 恢复最后一次提交的状态</span><br></pre></td></tr></table></figure></li><li><p>查看文件diff</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">git diff &lt;file&gt; # 比较当前文件和暂存区文件差异 git diff</span><br><span class="line"></span><br><span class="line">git diff &lt;id1&gt;&lt;id2&gt; # 比较两次提交之间的差异</span><br><span class="line"></span><br><span class="line">git diff &lt;branch1&gt;..&lt;branch2&gt; # 在两个分支之间比较</span><br><span class="line"></span><br><span class="line">git diff --staged # 比较暂存区和版本库差异</span><br><span class="line"></span><br><span class="line">git diff --cached # 比较暂存区和版本库差异</span><br><span class="line"></span><br><span class="line">git diff --stat # 仅仅比较统计信息</span><br></pre></td></tr></table></figure></li><li><p>查看提交记录</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git log git log &lt;file&gt; # 查看该文件每次提交记录</span><br><span class="line"></span><br><span class="line">git log -p &lt;file&gt; # 查看每次详细修改内容的diff</span><br><span class="line"></span><br><span class="line">git log -p -2 # 查看最近两次详细修改内容的diff</span><br><span class="line"></span><br><span class="line">git log --stat #查看提交统计信息</span><br></pre></td></tr></table></figure><ul><li>Mac上可以使用tig代替diff和log，brew install tig</li></ul></li><li><p>Git 本地分支管理</p><ul><li><p>查看、切换、创建和删除分支</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">git br -r # 查看远程分支</span><br><span class="line"></span><br><span class="line">git br &lt;new_branch&gt; # 创建新的分支</span><br><span class="line"></span><br><span class="line">git br -v # 查看各个分支最后提交信息</span><br><span class="line"></span><br><span class="line">git br --merged # 查看已经被合并到当前分支的分支</span><br><span class="line"></span><br><span class="line">git br --no-merged # 查看尚未被合并到当前分支的分支</span><br><span class="line"></span><br><span class="line">git co &lt;branch&gt; # 切换到某个分支</span><br><span class="line"></span><br><span class="line">git co -b &lt;new_branch&gt; # 创建新的分支，并且切换过去</span><br><span class="line"></span><br><span class="line">git co -b &lt;new_branch&gt; &lt;branch&gt; # 基于branch创建新的new_branch</span><br><span class="line"></span><br><span class="line">git co $id # 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除</span><br><span class="line"></span><br><span class="line">git co $id -b &lt;new_branch&gt; # 把某次历史提交记录checkout出来，创建成一个分支</span><br><span class="line"></span><br><span class="line">git br -d &lt;branch&gt; # 删除某个分支</span><br><span class="line"></span><br><span class="line">git br -D &lt;branch&gt; # 强制删除某个分支 (未被合并的分支被删除的时候需要强制)</span><br></pre></td></tr></table></figure></li><li><p>分支合并和rebase</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git merge &lt;branch&gt; # 将branch分支合并到当前分支</span><br><span class="line"></span><br><span class="line">git merge origin/master --no-ff # 不要Fast-Foward合并，这样可以生成merge提交</span><br><span class="line"></span><br><span class="line">git rebase master &lt;branch&gt; # 将master rebase到branch，相当于： git co &lt;branch&gt; &amp;&amp; git rebase master &amp;&amp; git co master &amp;&amp; git merge &lt;branch&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Git补丁管理(方便在多台机器上开发同步时用)</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git diff &gt; ../sync.patch # 生成补丁</span><br><span class="line"></span><br><span class="line">git apply ../sync.patch # 打补丁</span><br><span class="line"></span><br><span class="line">git apply --check ../sync.patch #测试补丁能否成功</span><br></pre></td></tr></table></figure></li><li><p>Git暂存管理</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git stash # 暂存</span><br><span class="line"></span><br><span class="line">git stash list # 列所有stash</span><br><span class="line"></span><br><span class="line">git stash apply # 恢复暂存的内容</span><br><span class="line"></span><br><span class="line">git stash drop # 删除暂存区</span><br></pre></td></tr></table></figure></li><li><p>Git远程分支管理</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">git pull # 抓取远程仓库所有分支更新并合并到本地</span><br><span class="line"></span><br><span class="line">git pull --no-ff # 抓取远程仓库所有分支更新并合并到本地，不要快进合并</span><br><span class="line"></span><br><span class="line">git fetch origin # 抓取远程仓库更新</span><br><span class="line"></span><br><span class="line">git merge origin/master # 将远程主分支合并到本地当前分支</span><br><span class="line"></span><br><span class="line">git co --track origin/branch # 跟踪某个远程分支创建相应的本地分支</span><br><span class="line"></span><br><span class="line">git co -b &lt;local_branch&gt; origin/&lt;remote_branch&gt; # 基于远程分支创建本地分支，功能同上</span><br></pre></td></tr></table></figure><ul><li><p>git push # push所有分支</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git push origin master # 将本地主分支推到远程主分支</span><br><span class="line"></span><br><span class="line">git push -u origin master # 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)</span><br><span class="line"></span><br><span class="line">git push origin &lt;local_branch&gt; # 创建远程分支， origin是远程仓库名</span><br><span class="line"></span><br><span class="line">git push origin &lt;local_branch&gt;:&lt;remote_branch&gt; # 创建远程分支</span><br><span class="line"></span><br><span class="line">git push origin :&lt;remote_branch&gt; #先删除本地分支(git br -d &lt;branch&gt;)，然后再push删除远程分支</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Git远程仓库管理</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git remote -v # 查看远程服务器地址和仓库名称</span><br><span class="line"></span><br><span class="line">git remote show origin # 查看远程服务器仓库状态</span><br><span class="line"></span><br><span class="line">git remote add origin git@ github:robbin/robbin_site.git # 添加远程仓库地址</span><br><span class="line"></span><br><span class="line">git remote set-url origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址(用于修改远程仓库地址) git remote rm &lt;repository&gt; # 删除远程仓库</span><br></pre></td></tr></table></figure><ul><li><p>创建远程仓库</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">git clone --bare robbin_site robbin_site.git # 用带版本的项目创建纯版本仓库</span><br><span class="line"></span><br><span class="line">scp -r my_project.git git@ git.csdn.net:~ # 将纯仓库上传到服务器上</span><br><span class="line"></span><br><span class="line">mkdir robbin_site.git &amp;&amp; cd robbin_site.git &amp;&amp; git --bare init # 在服务器创建纯仓库</span><br><span class="line"></span><br><span class="line">git remote add origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址</span><br><span class="line"></span><br><span class="line">git push -u origin master # 客户端首次提交</span><br><span class="line"></span><br><span class="line">git push -u origin develop # 首次将本地develop分支提交到远程develop分支，并且track</span><br><span class="line"></span><br><span class="line">git remote set-head origin master # 设置远程仓库的HEAD指向master分支</span><br></pre></td></tr></table></figure><ul><li><p>也可以命令设置跟踪远程库和本地库</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git branch --set-upstream master origin/master</span><br><span class="line"></span><br><span class="line">git branch --set-upstream develop origin/develop</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h4 id="SOURCE"><a href="#SOURCE" class="headerlink" title="SOURCE"></a>SOURCE</h4><ul><li><p>资料：<a href="https://www.gitbook.com/book/tycn/git/details" target="_blank" rel="noopener">https://www.gitbook.com/book/tycn/git/details</a></p></li><li><p>资料：<a href="https://github.com/xirong/my-git/blob/master/ixirong.com.md" target="_blank" rel="noopener">https://github.com/xirong/my-git/blob/master/ixirong.com.md</a></p></li><li><p>通俗易懂：<a href="http://blog.jobbole.com/78960/" target="_blank" rel="noopener">http://blog.jobbole.com/78960/</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>线程池浅析</title>
      <link href="/2017/12/12/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
      <url>/2017/12/12/%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[<h4 id="池"><a href="#池" class="headerlink" title="池"></a>池</h4><ul><li><p>由于服务器的硬件资源“充裕”，那么提高服务器性能的一个很直接的方法就是以空间换时间，即“浪费”服务器的硬件资源，以换取其运行效率。这就是池的概念。池是一组资源的集合，这组资源在服务器启动之初就完全被创建并初始化，这称为静态资源分配。当服务器进入正是运行阶段，即开始处理客户请求的时候，如果它需要相关的资源，就可以直接从池中获取，无需动态分配。很显然，直接从池中取得所需资源比动态分配资源的速度要快得多，因为分配系统资源的系统调用都是很耗时的。当服务器处理完一个客户连接后，可以把相关的资源放回池中，无需执行系统调用来释放资源。从最终效果来看，池相当于服务器管理系统资源的应用设施，它避免了服务器对内核的频繁访问。</p></li><li><p>池可以分为多种，常见的有内存池、进程池、线程池和连接池。</p></li></ul><a id="more"></a><h4 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h4><ul><li><p><a href="https://baike.baidu.com/item/%E7%BA%BF%E7%A8%8B%E6%B1%A0" target="_blank" rel="noopener">线程池</a></p><ul><li>线程池是一种多线程处理形式，处理过程中将任务添加到队列，然后在创建线程后自动启动这些任务。线程池线程都是后台线程。每个线程都使用默认的堆栈大小，以默认的优先级运行，并处于多线程单元中。如果某个线程在托管代码中空闲（如正在等待某个事件）,则线程池将插入另一个辅助线程来使所有处理器保持繁忙。如果所有线程池线程都始终保持繁忙，但队列中包含挂起的工作，则线程池将在一段时间后创建另一个辅助线程但线程的数目永远不会超过最大值。超过最大值的线程可以排队，但他们要等到其他线程完成后才启动。</li></ul></li><li><p>使用线程的问题</p><ul><li><p>在服务器应用程序中，<strong>串行处理机制</strong>通常都无法提供高吞吐率或快速响应性。也有一些例外，如当任务数量很少且执行时间很长时，或当服务器只为单个用户提供服务，并且该客户每次只发出一个请求时，但大多数应用程序并不是按照这种方式来工作的。</p></li><li><p>一般可以通过<strong>为每个请求创建一个新的线程来提供服务</strong>，从而实现更高的响应性，如果每个线程调用的是同一个业务处理方法，那这个方法必须设计为线程安全的。在正常负载情况下，为每个任务分配一个线程的方法能提升串行执行的性能。只要请求的到达速率不超出服务器的请求处理能力，那么这种方法可以同时带来更快的响应性和更高的吞吐率。</p><ul><li><p>在生产环境中，为每个任务分配一个线程 这种方法存在一些缺陷，尤其是当需要创建大量的线程时：</p><ul><li><p>线程生命周期的开销非常高。</p></li><li><p>资源消耗。活跃的线程会消耗系统资源，尤其是内存；大量空闲的线程也会占用许多内存，给垃圾回收器带来压力。而且大量线程在竞争cpu资源时还将产生其他的性能开销。</p></li><li><p>稳定性。在可创建线程的数量上存在一个限制，这个限制值随平台的不同而不同。</p></li></ul></li><li><p>在一定范围内，增加线程可以提高系统的吞吐率，但如果超出了这个范围，再创建更多的线程只会降低程序的执行速度，并且如果过多创建线程整个程序可能崩溃。</p></li></ul></li></ul></li><li><p>为什么用线程池</p><ul><li><p>创建/销毁线程伴随着系统开销，过于频繁的创建/销毁线程，会很大程度上影响处理效率</p><blockquote><p>例如：</p></blockquote><blockquote><p>记创建线程消耗时间T1，执行任务消耗时间T2，销毁线程消耗时间T3</p></blockquote><blockquote><p>如果T1+T3&gt;T2，那么是不是说开启一个线程来执行这个任务太不划算了！</p></blockquote><blockquote><p>正好，线程池缓存线程，可用已有的闲置线程来执行新任务，避免了T1+T3带来的系统开销</p></blockquote></li><li><p>线程并发数量过多，抢占系统资源从而导致阻塞(同时避免创建过多的线程)</p><blockquote><p>我们知道线程能共享系统资源，如果同时执行的线程过多，就有可能导致系统资源不足而产生阻塞的情况</p></blockquote><blockquote><p>运用线程池能有效的控制线程最大并发数，避免以上的问题</p></blockquote></li><li><p>对线程进行一些简单的管理</p><blockquote><p>比如：延时执行、定时循环执行的策略等运用线程池都能进行很好的实现</p></blockquote></li></ul></li></ul><h4 id="线程池的构成"><a href="#线程池的构成" class="headerlink" title="线程池的构成"></a>线程池的构成</h4><ul><li><p>线程池管理器:用于创建并经管线程池</p></li><li><p>工作线程: 线程池中实际履行的线程</p></li><li><p>任务接口: 尽管线程池大多半场景下是用来支撑收集办事器，然则我们将线程履行的任务抽象出来，形成任务接口，从而达到线程池与具体的任务无关。</p></li><li><p>任务队列:线程池的概念具体到实现则可能是队列，链表之类的数据布局，此中保存履行线程。</p></li></ul><h4 id="线程池处理流程"><a href="#线程池处理流程" class="headerlink" title="线程池处理流程"></a>线程池处理流程</h4><ul><li><p>线程池判断核心线程池里的线程是否都在执行任务。如果不是，则创建一个新的核心工作线程来执行任务。如果核心线程池里的线程都在执行任务，则进入下个流程。</p></li><li><p>线程池判断工作队列是否已经满。如果工作队列没有满，则将新提交的任务存储在这个工作队列里。如果工作队列满了，则进入下个流程。</p></li><li><p>线程池判断线程池的线程是否都处于工作状态。如果没有，则创建一个新的非核心工作线程来执行任务。如果已经满了，则交给饱和策略来处理这个任务。</p></li></ul><h4 id="线程池的使用"><a href="#线程池的使用" class="headerlink" title="线程池的使用"></a>线程池的使用</h4><ul><li><p>只有当任务都是同类型的并且相互独立时，线程池的性能才能达到最佳。</p></li><li><p>如果将运行时间较长的与运行时间较短的任务混合在一起，那么除非线程池很大，否则可能造成拥塞，因为很有可能在线程池中运行的都是运行时间较长的任务，其他任务得不到响应；</p></li><li><p>如果提交的任务依赖于其他任务，那么除非线程池无限大，否则可能造成死锁。</p></li><li><p>将可以并行进行的方法（任务）放入线程的run（或call）方法里执行，然后把线程放入线程池就可以实现线程池调度任务了。</p></li></ul><h4 id="线程池的应用范围"><a href="#线程池的应用范围" class="headerlink" title="线程池的应用范围"></a>线程池的应用范围</h4><ul><li><p>需要大量的线程来完成任务，且完成任务的时间比较短。 像WEB服务器完成网页请求这样的任务，使用线程池技术是非常合适的。因为单个任务小，而任务数量巨大，你可以想象一个热门网站的点击次数。 但对于长时间的任务，比如一个Telnet连接请求，线程池的优点就不明显了。因为Telnet会话时间比线程的创建时间大多了。</p></li><li><p>对性能要求苛刻的应用，比如要求服务器迅速响应客户请求。</p></li><li><p>接受突发性的大量请求，但不至于使服务器因此产生大量线程的应用。突发性大量客户请求，在没有线程池情况下，将产生大量线程，虽然理论上大部分操作系统线程数目最大值不是问题，短时间内产生大量线程可能使内存到达极限，并出现<code>OutOfMemory</code>的错误。</p></li></ul><h4 id="线程池的合理配置"><a href="#线程池的合理配置" class="headerlink" title="线程池的合理配置"></a>线程池的合理配置</h4><ul><li><p>要想合理地配置线程池，就必须首先分析任务特性，可以从以下几个角度来分析：</p><ul><li><p>任务的性质：CPU密集型任务、IO密集型任务和混合型任务。</p></li><li><p>任务的优先级：高、中和低。</p></li><li><p>任务的执行时间：长、中和短。</p></li><li><p>任务的依赖性：是否依赖其他系统资源，如数据库连接。</p></li></ul></li><li><p>分析</p><ul><li><p>性质不同的任务可以用不同规模的线程池分开处理。CPU密集型任务应配置尽可能小的线程，如配置 <code>Ncpu + 1</code> 个线程的线程池。由于IO密集型任务线程并不是一直在执行任务，则应配置尽可能多的线程，如<code>2 * Ncpu</code>。混合型的任务，如果可以拆分，将其拆分成一个CPU密集型任务和一个IO密集型任务，只要这两个任务执行的时间相差不是太大，那么分解后执行的吞吐量将高于串行执行的吞吐量。如果这两个任务执行时间相差太大，则没必要进行分解。</p></li><li><p>优先级不同的任务可以使用优先级队列来处理。它可以让优先级高的任务先执行。</p><ul><li>注意：如果一直有优先级高的任务提交到队列里，那么优先级低的任务可能永远不能执行。</li></ul></li><li><p>执行时间不同的任务可以交给不同规模的线程池来处理，或者可以使用优先级队列，让执行时间短的任务先执行。</p></li><li><p>依赖数据库连接池的任务，因为线程提交SQL后需要等待数据库返回结果，等待的时间越长，则CPU空闲时间就越长，那么线程数应该设置得越大，这样才能更好地利用CPU。</p></li></ul></li></ul><h4 id="SOURCE"><a href="#SOURCE" class="headerlink" title="SOURCE"></a>SOURCE</h4><ul><li><p><a href="http://www.cnblogs.com/lizhenghn/p/3740186.html" target="_blank" rel="noopener">C++实现的线程池收集</a></p></li><li><p><a href="https://yosef-gao.github.io/2016/04/02/linux-c-threadpool/" target="_blank" rel="noopener">简单的C线程池的实现</a></p></li><li><p><a href="https://liuzho.github.io/2017/04/17/%E7%BA%BF%E7%A8%8B%E6%B1%A0%EF%BC%8C%E8%BF%99%E4%B8%80%E7%AF%87%E6%88%96%E8%AE%B8%E5%B0%B1%E5%A4%9F%E4%BA%86/" target="_blank" rel="noopener">JAVA版本的详细解释</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线程 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>前缀、中缀、后缀表达式转换详解</title>
      <link href="/2017/12/12/%E5%89%8D%E7%BC%80-%E5%90%8E%E7%BC%80-%E4%B8%AD%E7%BC%80/"/>
      <url>/2017/12/12/%E5%89%8D%E7%BC%80-%E5%90%8E%E7%BC%80-%E4%B8%AD%E7%BC%80/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><ul><li>前面学过树的遍历及转换，感触不是很深，今天回头来看，另有感悟。这种感悟也是得益于大神的博文，记录于此。</li></ul><a id="more"></a><h4 id="中缀表达式转后缀表达式"><a href="#中缀表达式转后缀表达式" class="headerlink" title="中缀表达式转后缀表达式"></a>中缀表达式转后缀表达式</h4><ul><li><p>假定有中缀表达式 <code>1 + (( 2 + 3) * 4 ) – 5</code>，请将它转化为后缀表达式。</p><ul><li><p>方法一：利用表达式树</p><ul><li><p>首先将中缀表达式转换为表达式树，然后后序遍历表达式树，所得结果就是后缀表达式。</p></li><li><p>将中缀表达式转化为表达式树方法：表达式树的树叶是操作数，而其他的节点为操作符，根节点为优先级最低且靠右的操作符（如上述表达式优先级最低的是 <code>-</code> 和 <code>+</code>，但 <code>+</code> 更靠右，所以根为 <code>+</code> ），圆括号不包括(后面左右孩子可以类似的递归处理)。如上述中缀表达式转换后的表达式树如下：</p><p><img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/%E6%A0%91/%E4%B8%AD%E8%BD%AC%E5%90%8E/%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%A0%91.jpg" alt="表达式树"></p></li><li><p>经过后序遍历表达式树后得到的后缀表达式为：<code>12 3 + 4 * + 5 –</code></p></li></ul></li><li><p>方法二：利用辅助栈</p><ul><li><p>从左到右遍历中缀表达式的每个操作数和操作符。当读到操作数时，立即把它输出，即成为后缀表达式的一部分；若读到操作符，判断该符号与栈顶符号的优先级，若该符号优先级高于栈顶元素，则将该操作符入栈，否则就一次把栈中运算符弹出并加到后缀表达式尾端，直到遇到优先级低于该操作符的栈元素，然后把该操作符压入栈中。如果遇到 <code>(</code>，直接压入栈中，如果遇到一个 <code>)</code>，那么就将栈元素弹出并加到后缀表达式尾端，但左右括号并不输出。最后，如果读到中缀表达式的尾端，将栈元素依次完全弹出并加到后缀表达式尾端。</p></li><li><p>仍然以上面的表达式为例，其转换过程如下：</p><p>  <img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/%E6%A0%91/%E4%B8%AD%E8%BD%AC%E5%90%8E/%E8%BE%85%E5%8A%A9%E6%A0%88.png" alt="辅助栈"></p></li><li><p>利用辅助栈后缀表达式与用表达式树的结果一样，都为：<code>1 2 3 + 4 * + 5 –</code></p></li></ul></li></ul></li></ul><h4 id="后缀表达式转换为中缀表达式"><a href="#后缀表达式转换为中缀表达式" class="headerlink" title="后缀表达式转换为中缀表达式"></a>后缀表达式转换为中缀表达式</h4><ul><li><p>假定有后缀表达式<code>1 2 3 + 4 * +5 –</code>，请将它转化为中缀表达式。</p><ul><li><p>方法一：利用表达式树</p><ul><li><p>从左到右扫面后缀表达式，一次一个符号读入表达式。如果符号是操作数，那么就建立一个单节点树并将它推入栈中。如果符号是操作符，那么就从栈中弹出两个树T1和T2（T1先弹出）并形成一颗新的树，该树的根就是操作符，它的左、右儿子分别是T2和T1。然后将指向这棵新树的指针压入栈中。</p></li><li><p>前三个符号是操作数，因此创建三颗单节点树并将指向它们的指针压入栈中。</p><p>  <img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/%E6%A0%91/%E5%90%8E%E8%BD%AC%E4%B8%AD/1.jpg" alt="1"></p></li><li><p><code>+</code>被读入，因此指向最后两颗树的指针被弹出，形成一颗新树，并将指向新树的指针压入栈中。以下的流程图以相同原理执行。</p><p>  <img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/%E6%A0%91/%E5%90%8E%E8%BD%AC%E4%B8%AD/2.jpg" alt="2"></p><p>  <img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/%E6%A0%91/%E5%90%8E%E8%BD%AC%E4%B8%AD/3.jpg" alt="3"></p><p>  <img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/%E6%A0%91/%E5%90%8E%E8%BD%AC%E4%B8%AD/4.png" alt="4"></p><p>  <img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/%E6%A0%91/%E5%90%8E%E8%BD%AC%E4%B8%AD/5.jpg" alt="5"></p></li><li><p>最后再中序遍历所得的表达式树即得到我们所需的中缀表达式：<code>1+（（2 + 3）* 4）-5</code></p></li></ul></li></ul></li></ul><h4 id="中缀表达式转换为前缀表达式"><a href="#中缀表达式转换为前缀表达式" class="headerlink" title="中缀表达式转换为前缀表达式"></a>中缀表达式转换为前缀表达式</h4><ul><li><p>假定有中缀表达式<code>1 + (( 2 + 3) * 4 ) – 5</code>，请将它转化为前缀表达式。</p><ul><li><p>方法一：利用表达式树</p><ul><li><p>先将表达式用表达式树来表示，然后再前序遍历表达式树即得到我们所需的前缀表大式。(表达式树前面已经介绍过，这里不再累赘)。</p></li><li><p>此处，经过前序遍历所得前缀表达式为：<code>- + 1 * + 2 3 4 5</code></p></li></ul></li><li><p>方法二：利用辅助栈</p><ul><li><p>首先构造一个运算符栈，然后<strong>从右至左扫描中缀表达式</strong>。如果是操作数，则直接输出，作为前缀表达式的一个直接转换表达式Temp（最后，前缀表达式由该表达式翻转得到）；如果是运算符，则比较优先级：若该运算符优先级大于等于栈顶元素，则将该运算符入栈，否则栈内元素出栈并加到<code>Temp</code>表达式尾端，直到该运算符大于等于栈顶元素的优先级时，再将该运算符压入栈中。遇到右括号直接压入栈中，如果遇到一个左括号，那么就将栈元素弹出并加到<code>Temp</code>表达式尾端，但左右括号并不输出。最后，若运算符栈中还有元素，则将元素一次弹出并加到<code>Temp</code>表达式尾端，最后一步是将<code>Temp</code>表达式翻转。其过程如下图所示：</p></li><li><p>从右到左开始扫描，5为数字放入Temp中，-为操作符入栈。</p><p>  <img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/%E6%A0%91/%E4%B8%AD%E8%BD%AC%E5%89%8D/1.jpg" alt="1"></p><p>  <img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/%E6%A0%91/%E4%B8%AD%E8%BD%AC%E5%89%8D/2-1.jpg" alt="2"></p><p>  <img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/%E6%A0%91/%E4%B8%AD%E8%BD%AC%E5%89%8D/2-2.jpg" alt="3"></p><p>  <img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/%E6%A0%91/%E4%B8%AD%E8%BD%AC%E5%89%8D/3.jpg" alt="4"></p><p>  <img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/%E6%A0%91/%E4%B8%AD%E8%BD%AC%E5%89%8D/3-2.jpg" alt="5"></p></li><li><p>遇到左括号，元素弹出直到遇到右括号为止。</p><p>  <img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/%E6%A0%91/%E4%B8%AD%E8%BD%AC%E5%89%8D/4.jpg" alt="6"></p><p>  <img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/%E6%A0%91/%E4%B8%AD%E8%BD%AC%E5%89%8D/5.jpg" alt="7"></p><p>  <img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/%E6%A0%91/%E4%B8%AD%E8%BD%AC%E5%89%8D/6.jpg" alt="8"></p></li><li><p>所得前缀表达式为：- + 1 * + 2 3 4 5</p></li></ul></li></ul></li></ul><h4 id="前缀表达式转换为中缀表达式："><a href="#前缀表达式转换为中缀表达式：" class="headerlink" title="前缀表达式转换为中缀表达式："></a>前缀表达式转换为中缀表达式：</h4><ul><li><p>假定有前缀表达式 <code>- + 1 * + 2 3 4 5</code>，请将它转化为中缀表达式。</p><ul><li><p>方法一：辅助栈</p><ul><li><p>首先创建一个数字栈。<strong>从右到左扫描前缀表达式</strong>，如果遇到操作数，则入栈。如果遇到操作符，则将栈顶元素弹出（后扫面的数字位于表达式前面），并和操作符结合写成表达式，作为中缀表达式。如果遇到的操作符优先级大于已存在表达式的最后执行操作符的优先级，则将已存在的表达式加上()。如下是前缀表达式转为中缀表达式的示意图：</p><ul><li><p>扫描到操作数直接入栈。</p><p><img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/%E6%A0%91/%E5%89%8D%E8%BD%AC%E4%B8%AD/1.jpg" alt="1"></p></li><li><p>扫描到操作符，将两个栈顶元素弹出，并和操作符结合写成表达式。</p><p><img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/%E6%A0%91/%E5%89%8D%E8%BD%AC%E4%B8%AD/2.jpg" alt="2"></p><p><img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/%E6%A0%91/%E5%89%8D%E8%BD%AC%E4%B8%AD/3.jpg" alt="3"></p><p><img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/%E6%A0%91/%E5%89%8D%E8%BD%AC%E4%B8%AD/4.jpg" alt="4"></p><p><img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/%E6%A0%91/%E5%89%8D%E8%BD%AC%E4%B8%AD/5.jpg" alt="5"></p></li><li><p>表达式不是<code>（2+3）*4 + 1</code>，因为 1 比 2、3、4 后扫描到。(如果不好理解，可以这样思考：遇到操作符出栈结合成为一个表达式，然后将这个表达式入栈，然后继续下一步(将整个表达式当做一个整体操作数))</p><p><img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/%E6%A0%91/%E5%89%8D%E8%BD%AC%E4%B8%AD/6.jpg" alt="6"></p></li><li><p>表达式不是<code>5-（1+（2+3）*4）</code>，因为 5 是最早扫面到的数字。</p></li></ul></li><li><p>所以中缀表达式为<code>(1 +（2 + 3）* 4） - 5</code>。</p></li></ul></li></ul></li></ul><h4 id="SOURCE"><a href="#SOURCE" class="headerlink" title="SOURCE"></a>SOURCE</h4><ul><li><a href="http://blog.csdn.net/walkerkalr/article/details/22798365" target="_blank" rel="noopener">http://blog.csdn.net/walkerkalr/article/details/22798365</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于袜子的一些问题</title>
      <link href="/2017/12/11/%E8%A2%9C%E5%AD%90/"/>
      <url>/2017/12/11/%E8%A2%9C%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><ul><li>明天就是双十二了，想起冬天刚好没棉袜穿了，上淘宝一搜，一大堆(我的天呀，各种类型和品牌，看得我一脸懵逼！)，也不知道怎么买(没有女朋友的我，麻木！)，想了想就上网搜了下，也没找到一些有用的参考(全部是淘宝的宣传。。。)，最终在微博上发现了一篇文章，看了下写的还是很详细很有用的，就转载留着以后用，哈哈。。。。。。</li></ul><a id="more"></a><h4 id="袜子啊袜子"><a href="#袜子啊袜子" class="headerlink" title="袜子啊袜子"></a>袜子啊袜子</h4><ul><li><p>都说脚是人的第二心脏。对于双脚的健康来说，一双好袜子可能跟一双好鞋一样重要。美国《悦己》杂志最新载文指出，出现3种情况，说明你的袜子就该淘汰了。</p><ul><li><p>出现三种情况袜子就该淘汰:</p><ul><li><p>失去弹性。袜子失去弹性，就会加大与双脚的摩擦，走路或运动时不跟脚，如果出汗，还会有滑腻的感觉，很容易受伤。</p></li><li><p>脚后跟变薄，有破洞。袜子穿久了必然会变薄，这也会导致脚跟受伤或起泡。</p></li><li><p>穿上不舒服。双脚有紧绷、刺痒，明显勒痕等不适感时，说明袜子不合适。</p></li></ul></li><li><p>如何买到合适的袜子？别看袜子小，但想要买一双合适的也不容易。对此，美国德利麦克斯袜子专家组提出了以下建议：</p><ul><li><p>少选羊毛袜。这种材质的袜子吸汗效果不好，易使双脚处于潮湿状态，引起水泡。一般情况下，最好选择棉袜，但如果去运动，建议购买灯芯绒材质的袜子，吸汗效果较好。</p></li><li><p>合脚和尺码非常重要。袜子应该完全合脚，不应太紧或太松。袜子过大，额外的纤维会加重摩擦，并损伤脚部皮肤。</p><ul><li><p>注意纤维密度。买袜子时，应该注意袜子纤维密度，太疏松的不建议买。</p></li><li><p>另外，脚趾分开袜、足弓束带袜等高品质的袜子，每个人也应该备几双。</p></li></ul></li></ul></li><li><p>选袜子的六字口诀。大家都知道，脚是人的”第二心脏”。所以，选对袜子比穿双好鞋更重要。有专家推荐了几条选择袜子的标准。</p><ul><li><p>谨记”紧松大光齐清”6字口诀。即袜口和袜筒松紧合适，袜底要松，袜后跟大，袜表面光滑，罗口平齐无歪斜，针纹组织清晰，花纹、袜头、袜跟无露针。</p><ul><li><p>颜色尽量和鞋里一致，购买儿童袜子优先选择浅色的，颜色越鲜艳的，里面添加化学成分就越多。</p></li><li><p>优先选择以棉纤维为主、加上适量弹性纤维的袜子。</p></li><li><p>考虑其用途和穿着对象，如日常穿着以舒适、透气为主，运动时穿着要以柔软、耐磨为主；汗脚者宜选购既透气又吸湿的棉线袜子，脚干裂者就选购吸湿性较差的涤纶袜和锦纶袜；儿童袜要尽量选择组织结构简单、浅颜色、表面平滑的袜子，不要选择有虚线露在外面的袜品。</p></li><li><p>在洗涤袜子时，切不可用力揉搓，以防止袜子在强烈摩擦后使袜丝滑出或断丝；洗涤袜子的水温不宜超过40℃，否则会使袜子受热后收缩、袜底变小，甚至还会使袜子硬化、变质。为了保持袜子的原有光泽，最好不要用含碱过多的肥皂，只要用手轻搓后，用清水冲净，放在阴凉通风处阴干。</p></li></ul></li></ul></li></ul></li></ul><h4 id="大小规格篇"><a href="#大小规格篇" class="headerlink" title="大小规格篇"></a>大小规格篇</h4><ul><li><p>袜子的规格是用袜号表示的，而袜号又是以袜底的实际长度尺寸为标准的，所以知道自己的脚长后便可选购合脚的袜子。可是，由于袜子所使用的原料不同，其在袜号系列上也有所不同。其中弹力尼龙袜，以袜长相差2cm为1档；棉纱线袜、锦纶丝袜、混纺袜等的袜号系列，则以相差1cm为1档。</p><ul><li><p>如何选择大小呢？首先，测量一下自己脚的长度。知道自己脚的长度后，可以挑选袜号。袜号以厘米为单位，袜号根据弹性的大小基本分成三个类型。</p><ul><li><p>第一类，没有弹性的棉袜、锦纶丝袜。这类袜子的袜号一般一厘米一档，袜号有：10、11、12、13、14、15、16、17、18、19、20、21、22、23、24、25、26、27、28、29、30。例如袜号10，即对应10cm的脚长。</p></li><li><p>第二类，由有弹性的锦纶或涤纶和没有弹性的棉交织，使袜子具有一定的弹性。袜号有：15~16、17~18、19~20、21~22、23~24、25~26、27~28。例如袜号为15~16，即15~16cm的脚适合。</p></li><li><p>第三类，由高弹性的锦纶丝或氨纶包芯纱与棉交织，使袜子具有较大的伸展性。袜号有：12~14、14~16、16~18、18~20、20~22、22~24、24~26、26~28、28~30。例如袜号为12~14，即12~14cm的脚适合。</p></li></ul></li></ul></li></ul><h4 id="材质篇"><a href="#材质篇" class="headerlink" title="材质篇"></a>材质篇</h4><ul><li><p>袜子的材质主要有以下几种：</p><ul><li><p>棉是传统的天然纤维，也是舒适度较高的纺织材料，直到今天仍然在大量的使用。不过，棉本身的性能就有很大的局限性。棉纤维的吸湿性很好，吸湿的速度很快，但是排湿就不行了，棉纤维湿了以后，干的会很慢的。</p></li><li><p>羊毛也是一种传统的天然纤维，它是以良好的保暖性而著称，但是，普通的羊毛是不太适合做袜子的，必须选用材质较高的羊毛，如：澳洲的MERINOWOOL（美丽奴羊毛）、NEWWOOL（新毛）等，都是很好的内衣和袜子的材料。不过，很多人会发现，用羊毛直接做贴身衣物的很少，即使有，价格也比较昂贵，这主要是由羊毛本身的结构特性决定的。在显微镜下，可以看到羊毛纤维有很多鳞片，排列有点象竹笋叶，而每一个鳞片的顶部都有一个角质化的尖，这个角质化的尖容易使羊毛纤维之间产生粘连现象，又叫赶粘，同时，这个角质化的尖又使羊毛在贴身时会有刺痒的感觉，所以，如果选用羊毛材料做袜子之类的贴身衣物时，必须将这个角质化的尖去掉，这道处理的费用相对较高，是造成产品昂贵的主要原因之一。羊毛本身的特性是保暖，同时它的吸湿性和排湿较差，在与其他纤维混纺或混织后，可制成很好的冬季保暖袜。</p></li><li><p>莱卡、氨纶和橡筋，全是弹性材料。莱卡是美国杜邦公司的注册商标，其实也是氨纶的一种，所以又叫莱卡氨伦，只不过是处理上要比普通氨纶要好得多，其延展和回复性都相当好，而且不易老化，现在，很多的户外品牌的袜子都选用莱卡来做弹性材料。橡筋实际就是橡皮筋，当然用来做袜子的要细得多，和纱一样细，是在制造过程中织进袜子里的，橡筋比较容易老化，在被汗水腐蚀或经过冬天的严寒以后会很容易失去原有的延展和会复性，象对于户外运动的专业运动袜这样比较昂贵的袜子来说，这一特性就使它不太经济核算了。不过，现在日本有一种橡筋，听说持久耐用性很好，还是在推广阶段。</p></li><li><p>NYLON（尼龙），有的成份标识上又叫锦纶，在户外运动袜里面是专门加强牢固度的，尼龙的加入何以延长袜子的使用寿命，不易损坏。</p></li><li><p>对于运动袜，特别是专业性很强的户外运动的专业运动袜，还必须有一些特殊的纤维的添加来突出它的专业功能性。这其中，COOLMAX是经常被用到的。COOLMAX是美国杜邦公司的专利纤维产品，纺织上又叫四管道异型聚酯纤维。普通的纤维横截面多是实心的圆形或椭圆型，而COOLMAX这种纤维是空心的，横截面程十子型，就象四根被并列在一起的管子。这种结构使纤维与空气的接触面积加大，在织物之间也同时保证了很多的空隙，这样一来，就保证了COOLMAX这种纤维具有很强的吸湿性和排湿性，掺有COOLMAX纤维的织物又有很好的透气性。要注意的是，COOLMAX是吸湿、导汗、透气的功能性纤维，并不是保暖纤维，它只不过是使湿气排出保持尽量干燥的保暖环境。</p></li><li><p>THERMOLITE是专门的保暖纤维，THERMOLITE也是美国杜邦公司的专利纤维产品，它和COOLMAX一样是聚酯纤维，同样结构也是中空的。据介绍，THERMOLITE是从北极熊的毛的结构受到启发而研制出来的，它的横截面是圆形的，中间是空的，象一根管子，这样一来可以提高纤维的蓬松度，从而达到保暖的效果，这个原理和羽绒的保暖原理有些类似。THERMOLITE的保暖效果很好，同时也有不错的排汗效果，是冬季保暖袜的比较理想的材料。</p></li><li><p>此外，还有竹纤维、兔毛等等的材质原料。在以后的发展中，也将会有更多的原料开发并运用到袜子里面。</p></li></ul></li></ul><h4 id="结构篇"><a href="#结构篇" class="headerlink" title="结构篇"></a>结构篇</h4><ul><li><p>要知道什么样的袜子是合脚的，这就要了解袜子的结构。袜由袜口、袜统和袜脚3部分组成。其中袜脚包括袜跟、袜底和袜背、袜头。袜口的作用是使袜子边缘不致脱散并紧贴腿上。袜子的主要参数有5个：袜号、袜底长、总长、口长和跟高。在挑选的过程中我们没法一一测量，但是从以下几方面，我们可以大致判断哪些袜子才是合脚的。</p><ul><li><p>首先，一定要有垫，就是在袜子的底部要有象毛巾一样的圈，所以又叫毛圈。毛圈的主要作用是增加鞋与脚之间的弹性，同时，也充分加大了袜子材料与空气接触的面积，使之有更好的吸湿排汗性，当然，吸湿排汗性的体现和材料也有很大的关系。针对不同强度的运动，毛圈的高度、密度和部位应该是有所不同的。在高海拔的登山中或极长途的行走，应该是在脚底、脚面部位都有毛圈的，而且毛圈的高度和密度都是最高的，这样才可以更好的全方位的对脚起到保护。在中长途的行走和中低海拔的登山中，一般袜子只要脚底部位加毛圈就够了，不过，毛圈的高度和密度还是要最高的要求。只有在短途行走和后勤补给比较充裕的行走中，如特种旅游和普通旅游，毛圈的高度和密度可以比较低，但是绝对不能没有，就是一般的体育锻炼，袜子也还是要有毛圈的。</p></li><li><p>其次，在袜子的脚弓部位一定要有一圈弹力的固定，使袜子能很好的贴服在脚上。过去经常有这样的事情发生：走了一段路以后，脚上的袜子全跑到前面去了，又或者袜子横着转开了，脚底的部位跑到脚侧面了，使脚很不舒服，这全是因为袜子与脚的贴附性差，所以，在脚弓部位加上弹性的固定，就可以尽可能的避免这类事情的发生。人的脚底在接触地面时，正常的话，脚弓部位接触地面最少，在行走时，脚弓所受到的摩擦最小，同时，这又是整个脚掌的中部，在这个部位加上固定是最合适的。弹性固定不能过紧，过紧一样会影响血液循环，也不能过松，否则起不到固定的作用，袜子在脚上一样会跑。</p></li><li><p>再有，袜子的脚尖、脚跟部位一定是要加厚，脚跟的受力是最大的，而脚尖又是相对比较薄弱的地方，特殊的保护是必要的。袜尖与袜子脚面部分的拼接一定要是平的，千万不能有棱，这个地方是脚面上的脚趾位置，如果接缝是棱的话，很容易把脚磨伤的。</p></li><li><p>袜身的主要部分就是这些，再有就是脚踝以上的部分，这部分基本上是露在鞋（靴）以外的，但是，也有一定的特殊要求。</p><ul><li>先说脚踝。这部分一般是鞋帮的位置，加有毛圈的垫还是必要的，但是由于这一部分是脚最先与空气接触的位置，透气的功能在结构上就必须要体现出来，一般是在脚踝的正面，和鞋舌接触的地方采用结构比毛圈结构稍微稀疏的波纹结构，同时加入弹性材料。因为鞋舌的内层多采用泡沫弹性材料，比鞋其他地方的材料要软，摩擦力较小，所以波纹结构选在这一位置不会对脚产生伤害。脚踝又是脚本身活动最多的地方，加入弹性材料可以保证脚的正常活动不会有太多的束缚感。</li></ul></li></ul></li></ul><h4 id="季节搭配篇"><a href="#季节搭配篇" class="headerlink" title="季节搭配篇"></a>季节搭配篇</h4><ul><li><p>在不同的季节，有不同的袜子供我们选择。</p><ul><li><p>炎热的夏季，袜子以美观、舒适为主。这个季节女士选择最多的是含弹性纤维的丝袜。不是所有的弹性纤维都是莱卡，含莱卡的丝袜是比较高档的丝袜，它比一般丝袜具有更好的回弹性，更强的透气性，更柔和的色泽。现在又有了3D工艺，它使丝袜更光滑更轻软，穿着更舒适自由。一双好的丝袜能修饰腿部的不足，有美体的效果。</p></li><li><p>夏季容易出汗，纯化纤的丝袜排汗虽好，但容易有异味，天然纤维和化纤混纺的薄袜是男士的首选。一般人有个误区，觉得棉含量越高越好。其实，全棉的袜子，吸汗好，但不排汗，脚容易出现水泡。天然纤维含量在55%以上就可以了。含麻纤维的袜子是较好的选择，不仅具有天然的抗菌功能，还有良好的吸汗和排汗功能。</p></li><li><p>春秋二季是气温最舒适的季节，棉以它舒适的触觉作为这个季节袜子的首选。这个季节外出走动的频次较高，可以选择一些功能性的纤维和棉混纺的袜子。例如Lycra可以减低肌肉的疲劳，恢复体力；CoolMax具有强大的透气性，使运动时保持脚部的干爽；等等。</p></li><li><p>寒冷的冬季，袜子以保暖为主。一般含羊毛80%左右的混纺袜是较好的选择，它比纯毛的袜子更加结实，具有其他混纺功能性纤维的优良效果，又具有羊毛优良的保暖性能。</p></li></ul></li></ul><h4 id="问答篇"><a href="#问答篇" class="headerlink" title="问答篇"></a>问答篇</h4><ul><li><p>有100%的棉袜吗？</p><ul><li>答：没有100%的棉袜。袜子本身是有弹性的，就说明袜子本身的成分里包含其他材料。如：氨纶、涤纶、锦纶等。氨纶主要的作用就是增加弹性，它具有高延性和高弹恢复率。因此掺有氨纶的袜子才会有弹性，不易缩水。而锦纶和涤纶具有强度高、耐磨性，掺有这些成分的袜子更加耐磨耐穿。含棉量在80%左右的袜子就可以称为全棉袜了。袜子不能说100%棉，因为袜子必须含有辅助成分，这样袜子才会具备良好的透气性，耐磨性，吸汗性！</li></ul></li><li><p>棉袜分多少种？</p><ul><li><p>答：通常含棉65%以上都是纯棉袜子，其实棉也分很多种类，如天然棉、精梳棉、丝光棉。</p><ul><li><p>精梳棉是粗棉里提炼出来的比较好的棉，也因从不同等级棉里不同而价格不同，还有经过烧毛公艺出来的精梳棉一般都不会起球的，通常价格也比较贵的，总的来说精梳棉是属于中高档的运动袜、休闲袜。</p></li><li><p>丝光棉是在精梳棉的基础上加了蚕丝，处理工艺更精细一些。有光泽，最不像纯棉了。看上去像尼龙袜或丝袜（这也是大家最不认同它的地方：分不清楚），因为是含有蚕丝，穿上去比较舒适，耐磨损。是属于高档的皮鞋袜子的主要材质。</p></li></ul></li></ul></li><li><p>丝袜分多少种？</p><ul><li><p>答：丝袜有那么多品种，该如何选择呢？总的来说女丝袜有四类：天鹅绒，包芯丝，水晶丝，弹性丝袜。依价格排列，天鹅绒的价格是最贵的，弹性丝袜的价格是最便宜的。</p><ul><li><p>天鹅绒袜的特点：采用进口材料设计编织，洗涤不变形；弹性佳，防勾丝处理，耐穿耐磨性增强三倍；具有承托力及按摩作用，穿着不易滑。缺点是价格较贵，透明度不如包芯丝。需要袜子透亮的MM请选择包芯丝。</p></li><li><p>包芯丝的特点：使用有多股超丝纤维合成一股的多孔原丝编织而成。具有更优良的柔软性和贴服性，多股纤维间的空气量多，透气性非常出色。但不如天鹅绒细腻，价格适中，由于轻薄透气的原因比天鹅绒更容易损坏，现在夏天一般都是使用包芯丝的比较多，穿着也比较舒服；</p></li><li><p>水晶丝的特点：水晶丝也有人叫它“玻璃丝”外表和包芯丝相似，有丝的感觉，比包芯丝更透亮，价格也比较便宜，但不如包芯丝贴脚，穿着的感觉不如包芯丝舒服；</p></li><li><p>最好讲讲弹性丝袜，弹性丝袜的透亮度不如包芯丝，质量方面也不如天鹅绒。属于老式工艺，编织的密度不如包芯丝等，不过手感也很柔软，穿着也比较服贴，价格便宜，适合对丝袜要求不高的MM穿着。</p></li></ul></li></ul></li><li><p>袜子里面多少“D”的含义？</p><ul><li>答：D：是指袜子纤维的纤度单位，每9000米纤维重多少克就称多少P。目前天鹅绒袜中，分6D“薄到底”，10D超薄，15D超薄，50D，80D，120D，150D，300D，到2000D不等。一般夏天可选用超薄的，春秋季节可选用50D，80D，120D，150D，在相同材料的情况下，D数越大则越厚！冬季可选用300D以上特厚保暖的天鹅绒袜。1600D的厚度基本上与普通棉毛裤差不多。包芯丝都是薄型的。</li></ul></li></ul><h4 id="袜子里的四大健康问题"><a href="#袜子里的四大健康问题" class="headerlink" title="袜子里的四大健康问题"></a>袜子里的四大健康问题</h4><ul><li><p>“虽说只是个配角，但如果每天都穿着不合格的袜子，就等于脚底下’踩着’一个隐形的健康杀手。”一般而言袜子隐藏四大健康问题。</p><ul><li><p>不耐磨。”有些袜子穿一两次就有洞了，大家都会想这是由于自己穿着不当造成的，其实，这说明袜子的耐磨性不合格。”袜子需要在重要部位，比如脚趾处、脚跟处加入高强力的纤维，并采用更为科学的织制工艺才能保证耐磨性，耐磨性不好的袜子往往使用的是低档材料，不仅容易穿破，也有可能磨伤脚部。</p></li><li><p>掉色严重。袜子的染色牢度也是袜子是否合格的重要指标。按规定，袜子的染色牢度应该达到4级，即颜色基本不会掉。1级就是当拿一件白色的衣物和深色袜子放在一起洗的时候，最后两件物品的颜色会变得难以区分。</p><ul><li><p>袜子掉色带来的问题不仅仅是污染其他衣物，更由于纺织产品在印染和后期整理等过程中要加入各种染料、助剂等整理剂，这些化学制剂或多或少都会含有或产生对人体有害的物质。</p></li><li><p>甲醛、芳香胺超标。按照流程，出厂前厂家要对袜子进行充分的水洗。因为在整个生产过程中会用到大量的含碱物质，没有充分清洗干净的袜子就会被检出很高的pH值。而甲醛和碱这两种物质都会对皮肤造成一定危害，比如容易引起过敏发炎等。</p><ul><li>甲醛出现在袜子里，远比在衣物中更可怕。这是因为，人的脚掌上汗腺、血管、神经系统非常发达，当脚排出一些体液的时候，这些体液有可能会造成染料的分解。此外，袜子中的有害物质不易扩散，还会与脚部不停摩擦，加大对皮肤的影响。</li></ul></li></ul></li><li><p>袜口紧。近年来，袜厂生产的袜子多是紧口的，常把脚腕勒得紧紧的，甚至勒出了红痕。袜口对脚踝局部的压迫常常会导致血压增高，严重者甚至诱发心脏病。</p></li></ul></li><li><p>不同的袜子怎么洗？</p><ul><li><p>有些人穿袜子其袜子很容易发臭，臭得甚至用洗洁剂也洗不掉。其实，在洗袜子时用些醋来洗，就可将袜子的臭味完全去除，而且还有杀菌作用。</p></li><li><p>专家说：”人们穿着袜子和鞋，非常容易出汗，也更容易感染细菌。”</p></li><li><p>袜子的除臭方法：有些人穿袜子其袜子很容易发臭，臭得甚至用洗洁剂也洗不掉。其实，在洗袜子时用些醋来洗，就可将袜子的臭味完全去除，而且还有杀菌作用。</p></li><li><p>不使袜子失去弹性：用洗衣机洗袜子时，先将橡皮筋扎起袜头的上面，用这方法就不会导致袜头失去弹性。除此之外，在晒晾时记得将袜头向上。</p></li><li><p>各种袜子清洗的科学方法：</p><ul><li><p>普通棉线袜，要勤洗勤换，换下即放在清水中浸泡2小时左右，然后再擦上肥皂用热水揉洗，这样污垢容易脱落。</p></li><li><p>纯丝袜。人造丝袜、尼龙袜等，洗涤时要放在40℃以下的肥皂水或合成洗涤液中轻轻搓揉，切忌用力猛搓。袜子洗后要阴干，不可曝晒和火烤。</p></li><li><p>羊毛袜洗涤时，应先将含碱少的中性肥皂切成皂片，放入热水中溶化，等水降温后，再将袜子放入，稍浸片刻，然后用手轻轻搓洗。对污垢较多的袜头和袜后跟，可再擦些肥皂揉搓，至干净为止。袜子搓完后，用清水漂洗干净，略为捏干，平摊在桌面上用手抹平，阴晾在通风处，或用白布遮盖在阳光下晒干。</p></li></ul></li></ul></li></ul><h4 id="SOURCE"><a href="#SOURCE" class="headerlink" title="SOURCE"></a>SOURCE</h4><ul><li><a href="http://blog.sina.com.cn/s/blog_631625de0102v7dv.html" target="_blank" rel="noopener">http://blog.sina.com.cn/s/blog_631625de0102v7dv.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 琐事 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>memset函数分析---一次错误的总结</title>
      <link href="/2017/12/10/memset/"/>
      <url>/2017/12/10/memset/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><ul><li>今天在写一个哈希表的程序的时候一直出现死循环的错误，经过调试后发现是 <code>memset</code> 函数的原因(没有清零数组中的元素(int类型的最后一个大小需要写 <code>sizeof(array)</code>))，具体情况下面分析。</li></ul><a id="more"></a><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><ul><li><p>原型：<code>void *memset(void *s, int ch, size_t n);</code></p><ul><li><p><code>int ch</code>的类型可以是<code>char</code> 或 <code>int</code></p></li><li><p>将s所指向的某一块内存中的每个字节的内容全部设置为ch指定的ASCII值， 块的大小由第三个参数指定，这个函数通常为新申请的内存做初始化工作， 其返回值为指向S的指针。</p></li></ul></li><li><p><strong>memset按字节赋值</strong>。(今天代码出错的原因，还是自己理解的不深入)</p></li><li><p>memset的作用是在一段内存块中填充某个给定的值，它是对较大的结构体或数组进行清零操作的一种最快方法。</p></li></ul><h4 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h4><ul><li><p>第一： 搞反了 ch 和 n 的位置.</p><ul><li>一定要记住如果要把一个<code>char a[20]</code>清零，一定是 <code>memset(a, 0, 20);</code> 而不是 <code>memset(a, 20, 0);</code></li></ul></li><li><p>第二： 过度使用memset，我想这些程序员可能有某种心理阴影，他们惧怕未经初始化的内存，所以他们会写出这样的代码：</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> buffer[<span class="number">20</span>];</span><br><span class="line"><span class="built_in">memset</span>(buffer, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">char</span>)*<span class="number">20</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(buffer, <span class="string">"123"</span>);</span><br></pre></td></tr></table></figure><ul><li>这里的memset是多余的. 因为这块内存马上就被覆盖了，清零没有意义.</li></ul></li><li><p>第三： 其实这个错误严格来讲不能算用错memset，但是它经常在使用memset的场合出现</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">some_func</span><span class="params">(struct something *a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">…</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">…</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这里错误的原因是函数传参过程中的指针降级，导致 <code>sizeof(a)</code>，返回的是一个 <code>something *</code> 指针类型大小的的字节数，如果是32位，就是4字节。</li></ul></li></ul><h4 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h4><ul><li><p>问：为何要用 <code>memset</code> 置零? <code>memset(&amp;Address, 0, sizeof(Address))；</code>经常看到这样的用法，其实不用的话，分配数据的时候，剩余的空间也会置零的。</p><ul><li><p>答：如果不清空，可能会在测试当中出现野值。</p><ul><li>其实不然！特别是对于字符指针类型的，剩余的部分通常是不会为0的，不妨作一个试验，定义一个字符数组，并输入一串字符，如果不用 <code>memset</code> 实现清零，显示出来就会有乱码。</li></ul></li></ul></li><li><p>问：下面的代码1能把数组中的元素值都设置成字符1，但是，代码2想把数组中的元素值设置成1，却是不可行的。</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代码1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">5</span>];</span><br><span class="line"><span class="built_in">memset</span>(a, <span class="string">'1'</span>, <span class="number">5</span>）;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代码2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">5</span>];</span><br><span class="line"><span class="built_in">memset</span>(a, <span class="number">1</span>, <span class="number">20</span>）;  <span class="comment">//如果这里改成memset(a,1,5*sizeof(int))也不可以，因为memset按字节赋值。</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>第一个程序为什么可以，而第二个不行？</p><ul><li><p>因为第一个程序的数组a 是字符型的，字符型占据内存大小是1Byte，而 <code>memset</code> 函数也是以字节为单位进行赋值的，所以你输出没有问题。而第二个程序a是整型的，使用 <code>memset</code> 还是按字节赋值，这样赋值完以后，每个数组元素的值实际上是 <code>0x01010101</code> 即十进制的16843009。</p><ul><li>如果用 <code>memset(a, 1, 20);</code>(实际上与 <code>memset(a, 1, 5*sizeof(int))</code> 结果是一样的)就是对a指向的内存的20个字节进行赋值，每个都用ASCⅡ为1的字符去填充，转为二进制后，1就是00000001，占一个字节。一个 <code>int</code> 元素是4字节，合一起就是0x01010101（十六进制），就等于16843009，就完成了对一个 <code>int</code> 元素的赋值了。所以用 <code>memset</code> 对非字符型数组赋初值是不可取的！</li></ul></li></ul></li></ul></li></ul><ul><li><p>怎么对bool型数组赋值：</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">11</span>;</span><br><span class="line"><span class="keyword">bool</span> arr[N];</span><br><span class="line"><span class="built_in">memset</span>(&amp;arr, <span class="number">1</span>, <span class="keyword">sizeof</span>(<span class="keyword">bool</span>) * N);</span><br></pre></td></tr></table></figure><ul><li>bool类型就是1或0.</li></ul></li><li><p>一些示例：</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//有一个结构体Some x，可以这样清零：</span></span><br><span class="line"><span class="built_in">memset</span>(&amp;x, <span class="number">0</span>, <span class="keyword">sizeof</span>(Some));</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果是一个结构体的数组Some x[10]，可以这样：</span></span><br><span class="line"><span class="built_in">memset</span>(x, <span class="number">0</span>, <span class="keyword">sizeof</span>(Some)*<span class="number">10</span>）；</span><br><span class="line"></span><br><span class="line"><span class="comment">//memset可以方便的清空一个结构类型的变量或数组。如：</span></span><br><span class="line">struct sample_struct</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> csName[<span class="number">16</span>];</span><br><span class="line"><span class="keyword">int</span> iSeq;</span><br><span class="line"><span class="keyword">int</span> iType;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对于变量</span></span><br><span class="line">struct sample_strcut stTest;</span><br><span class="line"></span><br><span class="line"><span class="comment">//一般情况下，清空stTest的方法：</span></span><br><span class="line">stTest.csName[<span class="number">0</span>]=&#123;<span class="string">'\0'</span>&#125;;</span><br><span class="line">stTest.iSeq=<span class="number">0</span>;</span><br><span class="line">stTest.iType=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//如果用memset的话非常方便：</span></span><br><span class="line"><span class="built_in">memset</span>(&amp;stTest, <span class="number">0</span>, <span class="keyword">sizeof</span>(struct sample_struct));</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果是数组：</span></span><br><span class="line">struct sample_struct TEST[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(TEST, <span class="number">0</span>, <span class="keyword">sizeof</span>(struct sample_struct)*<span class="number">10</span>）；</span><br><span class="line"><span class="comment">//另外：如果结构体中有数组的话还是需要对数组单独进行初始化处理的</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="source"><a href="#source" class="headerlink" title="source"></a>source</h4><ul><li><a href="http://www.360doc.com/content/17/0322/09/33093582_639073036.shtml" target="_blank" rel="noopener">http://www.360doc.com/content/17/0322/09/33093582_639073036.shtml</a></li><li><a href="http://www.cnblogs.com/youxin/p/3226817.html" target="_blank" rel="noopener">http://www.cnblogs.com/youxin/p/3226817.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>随笔2017-12-04</title>
      <link href="/2017/12/04/%E9%9A%8F%E7%AC%942017-12-04/"/>
      <url>/2017/12/04/%E9%9A%8F%E7%AC%942017-12-04/</url>
      
        <content type="html"><![CDATA[<h4 id="随笔2017-12-04"><a href="#随笔2017-12-04" class="headerlink" title="随笔2017-12-04"></a>随笔2017-12-04</h4><p>&emsp;&emsp;最近学习了许多新知识(也忙于考试)，有吸收消化的也有吸收没消化的，还有部分没吸收的，慢慢来吧，这个急不来(知识需要积累，但是更需要沉淀)。</p><a id="more"></a><p>&emsp;&emsp;有个话题很有意思：<strong>做应用层开发的人员应不应该要去了解和学习一些底层原理的知识</strong>？说下自己的理解吧，我认为相关的知识的底层实现的原理是一种思想与解决问题的思考过程，值得每个从事这一行业的相关人员去学习，从而让自己站在巨人的肩上去学习与思考，这样不仅仅会拓宽自己的视野，还能潜移默化的改变自己的思维习惯，提升自己的能力，最终决定你能够达到的高度。如果你只会用(尽管用的很好)，但是你不理解底层的原理，又怎么能在合适的场景应用，用到最佳效果(做出合理的优化与改变)，最后做出一些创新与发展。所以，我认为还是应该去学相关的知识的。我也庆幸自己的兴趣促使自己在这方面坚持了下来，庆幸自己意识到了这个问题从而更加坚定！</p><p>&emsp;&emsp;高三明悟的道理：知识在于积累，更在于思考与沉淀。</p><p>&emsp;&emsp;高一就记在心里的话(感谢班主任)：少说话，多观察，多思考！</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>自旋锁与互斥锁</title>
      <link href="/2017/12/02/%E8%87%AA%E6%97%8B%E9%94%81/"/>
      <url>/2017/12/02/%E8%87%AA%E6%97%8B%E9%94%81/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><ul><li><p>互斥锁</p><ul><li>互斥锁是一种实现线程同步的机制：<strong>当一个线程尝试获取互斥锁，如果互斥锁已经被占用则该线程会被挂起进入睡眠状态，直到被唤醒</strong>。线程被挂起时，CPU会将该线程当前的处理状态保存到内存中，等到唤醒时从内存中读取上次的处理状态，这个CPU切换线程处理状态的过程被称为“上下文切换”。上下文切换是一个非常耗时的操作，它需要相当多的CPU指令才能完成。但在早期单核处理器中，只能通过这个方式来完成，毕竟一口锅不能同时炒两盘不一样的菜。</li></ul></li></ul><a id="more"></a><h4 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h4><ul><li><p>多核处理器开始普及之后，使用互斥锁经常会出现一种尴尬的情况：一个线程因为尝试获取互斥锁失败而进入睡眠状态，但上下文切换还没完成或者说刚切换上下文没多久，另一个线程就已经释放了那个互斥锁(所以出现了自旋锁)。</p></li><li><p>概念</p><ul><li><p>自旋锁是为实现保护共享资源而提出一种锁机制。其实，自旋锁与互斥锁比较类似，它们都是为了解决对某项资源的互斥使用。无论是互斥锁，还是自旋锁，在任何时刻，最多只能有一个保持者，也就说，在任何时刻最多只能有一个执行单元获得锁。但是两者在调度机制上略有不同。<strong>对于互斥锁，如果资源已经被占用，资源申请者只能进入睡眠状态。但是自旋锁不会引起调用者睡眠</strong>，如果自旋锁已经被别的执行单元保持，调用者就一直循环在那里看是否该自旋锁的保持者已经释放了锁，”自旋”一词就是因此而得名。(查看<a href="https://zh.wikipedia.org/wiki/%E8%87%AA%E6%97%8B%E9%94%81" target="_blank" rel="noopener">维基百科</a>)</p></li><li><p>自旋锁和互斥锁一样也是实现线程同步的一种机制：<strong>当一个线程尝试获取自旋锁时，如果自旋锁已经被占用则该线程会一直循环等待并反复检查锁是否可用，直到锁可用时才会退出循环</strong>。如果持有锁的线程很快就释放了并且线程竞争不激烈，那自旋的效率就非常好，反之，自旋就会白白浪费CPU的处理时间，这反而会带来性能上的损失。</p></li></ul></li><li><p>问题</p><ul><li><p>如果某个线程<strong>持有锁的时间过长</strong>，就会导致其它等待获取锁的线程进入循环等待，消耗CPU。使用不当会造成CPU使用率极高。</p></li><li><p><strong>不公平的锁</strong>(即无法满足等待时间最长的线程优先获取锁)就会存在”线程饥饿”问题。</p></li><li><p>在用自旋锁时有可能<strong>造成死锁</strong>，当递归调用时有可能造成死锁，调用有些其他函数也可能造成死锁，如 <code>copy_to_user()</code>、<code>copy_from_user()</code>、<code>kmalloc()</code>等</p></li><li><p><strong>说明：</strong>我们要慎重使用自旋锁，自旋锁只有在内核可抢占式或SMP的情况下才真正需要，在单CPU且不可抢占式的内核下，自旋锁的操作为空操作。自旋锁适用于锁使用者保持锁时间比较短的情况下。</p></li></ul></li><li><p>优点</p><ul><li>自旋锁<strong>不会使线程状态发生切换，一直处于用户态，即线程一直都是active的；不会使线程进入阻塞状态，减少了不必要的上下文切换，执行速度快</strong>(非自旋锁在获取不到锁的时候会进入阻塞状态，从而进入内核态，当获取到锁的时候需要从内核态恢复，需要线程上下文切换)</li></ul></li><li><p>特点</p><ul><li><p><strong>单CPU非抢占内核下：</strong> <strong>自旋锁会在编译时被忽略</strong>（因为单CPU且非抢占模式情况下，不可能发生进程切换，时钟只有一个进程处于临界区（自旋锁实际没什么用了）</p></li><li><p><strong>单CPU抢占内核下：</strong> <strong>自选锁仅仅当作一个设置抢占的开关</strong>（因为单CPU不可能有并发访问临界区的情况，禁止抢占就可以保证临街区唯一被拥有）</p></li><li><p><strong>多CPU下：</strong> <strong>此时才能完全发挥自旋锁的作用，自旋锁在内核中主要用来防止多处理器中并发访问临界区，防止内核抢占造成的竞争</strong>。</p></li></ul></li></ul><h4 id="自旋锁与互斥锁"><a href="#自旋锁与互斥锁" class="headerlink" title="自旋锁与互斥锁"></a>自旋锁与互斥锁</h4><ul><li><p>原理</p><ul><li><p>互斥锁：线程会从sleep（加锁）——&gt;running（解锁），过程中有上下文的切换，cpu的抢占，信号的发送等开销。</p></li><li><p>自旋锁：线程一直是running(加锁——&gt;解锁)，死循环检测锁的标志位。</p></li><li><p>用一句话概括互斥锁和自旋锁：<strong>互斥锁是睡等，自旋锁是忙等</strong>。</p></li></ul></li><li><p>区别</p><ul><li><p><strong>性能问题</strong></p><ul><li>互斥锁的起始原始开销要高于自旋锁，但是基本是一劳永逸，临界区持锁时间的大小并不会对互斥锁的开销造成影响，而自旋锁是死循环检测，加锁全程消耗cpu，起始开销虽然低于互斥锁，但是随着持锁时间，加锁的开销是线性增长。</li></ul></li><li><p><strong>释放问题</strong></p><ul><li><p>自旋锁你不需要操心锁持有进(线)程意外结束(加锁到解锁过程中进程被kill了)的时候，锁的释放问题(需要写点代码)</p></li><li><p>互斥锁最好用于那种生命周期特别长和特别稳定的代码段，例如中断处理例程内核代码。</p></li></ul></li><li><p>其它(互斥锁看做二元信号量)</p><ul><li><p>信号量和读写信号量适合于保持时间较长的情况，它们会导致调用者睡眠，因而<strong>自旋锁适合于保持时间非常短的情况</strong>。</p></li><li><p><strong>自旋锁可以用于中断，不能用于进程上下文(会引起死锁)</strong>。而信号量不允许使用在中断中，而可以用于进程上下文。</p></li><li><p><strong>自旋锁保持期间是抢占失效的</strong>，自旋锁被持有时，内核不能被抢占，而信号量和读写信号量保持期间是可以被抢占的。</p></li></ul></li></ul></li><li><p>应用</p><ul><li><p>互斥锁(互斥锁用于临界区持锁时间比较长的操作，比如下面这些情况都可以考虑)</p><ul><li><p>临界区有IO操作</p></li><li><p>临界区代码复杂或者循环量大</p></li><li><p>被保护的共享资源只在进程上下文访问</p></li><li><p>临界区竞争非常激烈</p></li><li><p>单核处理器</p></li></ul></li><li><p>自旋锁</p><ul><li><p>主要用在临界区持锁时间非常短且CPU资源不紧张的情况下，自旋锁一般用于多核的服务器。</p></li><li><p>被保护的共享资源需要在中断上下文访问(包括底半部(中断处理句柄)和顶半部(软中断))</p></li></ul></li></ul></li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li><p>自旋锁的初衷就是：在短期间内进行轻量级的锁定。一个被争用的自旋锁使得请求它的线程在等待锁重新可用的期间进行自旋(特别浪费处理器时间)，所以自旋锁不应该被持有时间过长。如果需要长时间锁定的话, 最好使用信号量。</p></li><li><p>既然互斥锁与自旋锁各有优劣，我们可以把它们结合到一起：<strong>当一个线程获取锁失败，先让它自旋一段时间，一段时间过后还未能获取锁，再让它进入睡眠状态</strong>。这个过程的重点在于自旋时间的长短，过长可能退化成单纯的自旋锁，过短可能退化成互斥锁。</p></li><li><p>推荐阅读</p><ul><li><p>公平性</p><ul><li><p><a href="http://blog.onlycatch.com/post/%E8%87%AA%E6%97%8B%E9%94%81" target="_blank" rel="noopener">自旋锁的公平性</a></p></li><li><p><a href="http://hufeifei.cn/2017/07/17/ComputerAndOS/%E8%87%AA%E6%97%8B%E9%94%81%E5%85%AC%E5%B9%B3%E6%80%A7%E7%9A%84%E4%B8%89%E7%A7%8D%E5%AE%9E%E7%8E%B0/" target="_blank" rel="noopener">自旋锁公平性三种实现</a></p></li><li><p><a href="http://blog.fnil.net/blog/1df8c71d5019f4ca48c19b1707174897/" target="_blank" rel="noopener">自旋锁的优化</a></p></li></ul></li><li><p>API及宏解释</p><ul><li><p><a href="http://www.360doc.com/content/11/0302/14/3038654_97459411.shtml" target="_blank" rel="noopener">解释的比较详细</a></p></li><li><p><a href="http://guojing.me/linux-kernel-architecture/posts/spin-lock/" target="_blank" rel="noopener">自旋锁</a></p></li></ul></li><li><p>详解</p><ul><li><p><a href="https://www.ibm.com/developerworks/cn/linux/l-cn-rwspinlock1/" target="_blank" rel="noopener">读写自旋锁</a></p></li><li><p><a href="https://github.com/digoal/blog/blob/master/201611/20161109_02.md#日期" target="_blank" rel="noopener">信号量与自旋锁</a></p></li><li><p><a href="http://blog.csdn.net/freeelinux/article/details/53695111" target="_blank" rel="noopener">补充</a></p></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 锁 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>乐观锁与悲观锁</title>
      <link href="/2017/12/02/%E6%82%B2%E8%A7%82%E9%94%81%E4%B8%8E%E4%B9%90%E8%A7%82%E9%94%81/"/>
      <url>/2017/12/02/%E6%82%B2%E8%A7%82%E9%94%81%E4%B8%8E%E4%B9%90%E8%A7%82%E9%94%81/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><ul><li><p>最近学习遇到了”锁”这个有趣的知识，以前也只是听过各种”锁”，感觉很多而且杂乱，现在就将他们进行整理学习。</p></li><li><p>乐观锁和悲观锁本质上只是一种思想，在实现的时候悲观锁还是利用了数据库提供的”锁”机制(也只有数据库层提供的”锁”机制才能真正保证数据访问的排他性，否则，即使在本系统中实现了加”锁”机制，也无法保证外部系统不会修改数据)，乐观锁则会记录和检查数据版本。这两种”锁”多用于关系数据库的并发控制。</p></li></ul><a id="more"></a><h4 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h4><ul><li><p>概念</p><ul><li><p>在关系数据库管理系统里，悲观并发控制（又名“悲观锁”，Pessimistic Concurrency Control，缩写“PCC”）是一种并发控制的方法。它可以阻止一个事务以影响其他用户的方式来修改数据。如果一个事务执行的操作读某行数据应用了锁，那只有当这个事务把锁释放，其他事务才能够执行与该锁冲突的操作。<strong>(就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会 block，直到它拿到锁)</strong></p><ul><li><strong>悲观并发控制主要用于数据争用激烈的环境，以及发生并发冲突时使用锁保护数据的成本要低于回滚事务的成本的环境中。</strong></li></ul></li><li><p>在关系数据库管理系统里，乐观并发控制（又名“乐观锁”，Optimistic Concurrency Control，缩写“OCC”）是一种并发控制的方法。它假设多用户并发的事务在处理时不会彼此互相影响，各事务能够在不产生锁的情况下处理各自影响的那部分数据。在提交数据更新之前，每个事务会先检查在该事务读取数据后，有没有其他事务又修改了该数据。如果其他事务有更新的话，正在提交的事务会进行回滚。<strong>(就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，如果发现冲突了，则让返回用户错误的信息，让用户决定如何去做)</strong></p><ul><li><strong>乐观并发控制多数用于数据争用不大、冲突较少的环境中，这种环境中，偶尔回滚事务的成本会低于读取数据时锁定数据的成本，因此可以获得比其他并发控制方法更高的吞吐量。</strong></li></ul></li></ul></li><li><p>流程</p><ul><li><p>悲观锁</p><ul><li><p>在对任意记录进行修改前，先尝试为该记录加上排他锁（exclusive locking）。</p></li><li><p>如果加锁失败，说明该记录正在被修改，那么当前查询可能要等待或者抛出异常。 具体响应方式由开发者根据实际需要决定。</p></li><li><p>如果成功加锁，那么就可以对记录做修改，事务完成后就会解锁了。</p></li><li><p>其间如果有其他对该记录做修改或加排他锁的操作，都会等待我们解锁或直接抛出异常。</p></li></ul></li><li><p>乐观锁</p><ul><li><p>数据版本,为数据增加的一个版本标识(实现数据版本有两种方式，第一种是使用版本号，第二种是使用时间戳)。</p></li><li><p>当读取数据时，将版本标识的值一同读出，数据每更新一次，同时对版本标识进行更新。</p></li><li><p>当我们提交更新的时候，判断数据库表对应记录的当前版本信息与第一次取出来的版本标识进行比对，如果数据库表当前版本号与第一次取出来的版本标识值相等，则予以更新，否则认为是过期数据。</p></li></ul></li></ul></li></ul><h4 id="为什么需要”锁”"><a href="#为什么需要”锁”" class="headerlink" title="为什么需要”锁”"></a>为什么需要”锁”</h4><ul><li><p>在多用户环境中，在同一时间可能会有多个用户更新相同的记录，这会产生冲突。</p></li><li><p>典型的冲突有：</p><ul><li><p><strong>丢失更新：</strong>一个事务的更新覆盖了其它事务的更新结果，就是所谓的更新丢失。例如：用户A把值从6改为2后，用户B又把值从2改为6，则用户A丢失了他的更新。</p></li><li><p><strong>脏读：</strong>当一个事务读取其它完成一半事务的记录时，就会发生脏读取。例如：用户A,B看到的值都是6，用户B把值改为2的过程中，用户A读到的值仍为6。</p></li></ul></li></ul><h4 id="失效情况"><a href="#失效情况" class="headerlink" title="失效情况"></a>失效情况</h4><ul><li><p>悲观锁</p><ul><li><strong>时间戳的精度如果不够</strong>，如毫秒级别，那么在高并发，或者非常凑巧情况下，有失效的可能。(如果使用高精度时间戳的话，成本又太高)</li></ul></li><li><p>乐观锁</p><ul><li><p>乐观锁存在失效的情况，属小概率事件，需要多个条件共同配合才会出现。如：</p><ul><li><p>应用采用自己的策略管理主键ID。如，常见的取当前ID字段的最大值＋1作为新ID。</p></li><li><p>版本号字段 ver 默认值为 0 。</p></li><li><p>用户A读取了某个记录准备修改它。该记录正好是ID最大的记录，且之前没被修改过， ver 为默认值 0。</p></li><li><p>在用户A读取完成后，用户B恰好删除了该记录。之后，用户C又插入了一个新记录。</p></li><li><p>此时，阴差阳错的，新插入的记录的ID与用户A读取的记录的ID是一致的， 而版本号两者又都是默认值 0。</p></li><li><p>用户A在用户C操作完成后，修改完成记录并保存。由于ID、ver均可以匹配上， 因此用户A成功保存。但是，却把用户C插入的记录覆盖掉了。</p></li></ul></li><li><p>乐观锁此时的失效，根本原因在于应用所使用的<strong>主键ID管理策略</strong>， 正好与乐观锁存在极小程度上的不兼容。</p></li><li><p><strong>时间戳的精度如果不够</strong>，如毫秒级别，那么在高并发，或者非常凑巧情况下，有失效的可能。(如果使用高精度时间戳的话，成本又太高)</p></li></ul></li></ul><h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h4><ul><li><p>悲观锁</p><ul><li><p>悲观并发控制实际上是“先取锁再访问”的保守策略，为<strong>数据处理的安全</strong>提供了保证。</p></li><li><p>悲观锁<strong>适用于可靠的持续性连接</strong>，诸如C/S应用。 对于Web应用的HTTP连接，先天不适用。</p></li><li><p>锁的使用意味着<strong>性能的损耗</strong>，在高并发、<strong>锁定持续时间长</strong>的情况下，尤其严重。 Web应用的性能瓶颈多在数据库处，使用悲观锁，进一步收紧了瓶颈。</p></li><li><p>非正常中止情况下的解锁机制，设计和实现起来很麻烦，<strong>成本</strong>还很高。</p></li><li><p>不够严谨的设计下，可能产生莫名其妙的，不易被发现的，让人头疼到想把键盘一巴掌碎的<strong>死锁</strong>问题。</p></li></ul></li><li><p>乐观锁</p><ul><li><p>乐观并发控制相信事务之间的数据竞争(data race)的概率是比较小的，因此尽可能直接做下去，直到提交的时候才去锁定，所以<strong>不会产生任何锁和死锁</strong>。</p></li><li><p>但如果直接简单这么做，还是有可能会遇到不可预期的结果，例如两个事务都读取了数据库的某一行，经过修改以后写回数据库，这时<strong>就会出现”脏”数据</strong>的问题。</p></li></ul></li></ul><h4 id="参考及推荐"><a href="#参考及推荐" class="headerlink" title="参考及推荐"></a>参考及推荐</h4><ul><li><p>参考</p><ul><li><p><a href="http://blog.csdn.net/YChenFeng/article/details/75003911" target="_blank" rel="noopener">http://blog.csdn.net/YChenFeng/article/details/75003911</a></p></li><li><p><a href="http://www.digpage.com/lock.html" target="_blank" rel="noopener">http://www.digpage.com/lock.html</a></p></li><li><p><a href="http://www.hollischuang.com/archives/934" target="_blank" rel="noopener">http://www.hollischuang.com/archives/934</a></p></li><li><p><a href="https://zh.wikipedia.org/wiki/%E6%82%B2%E8%A7%82%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/%E6%82%B2%E8%A7%82%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6</a></p></li><li><p><a href="https://zh.wikipedia.org/wiki/%E4%B9%90%E8%A7%82%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/%E4%B9%90%E8%A7%82%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6</a></p></li></ul></li><li><p>推荐</p><ul><li><p><a href="https://www.zhihu.com/question/29420056" target="_blank" rel="noopener">https://www.zhihu.com/question/29420056</a></p></li><li><p><a href="http://www.cnblogs.com/0201zcr/p/4782283.html" target="_blank" rel="noopener">http://www.cnblogs.com/0201zcr/p/4782283.html</a></p></li><li><p><a href="http://www.digpage.com/lock.html" target="_blank" rel="noopener">http://www.digpage.com/lock.html</a></p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 锁 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>线程安全解决方法---锁</title>
      <link href="/2017/12/01/%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>/2017/12/01/%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><ul><li><p>前面文章说到的关于线程安全(并发)的问题，一般采取的解决的方法是 “加锁”</p></li><li><p>对于锁的使用一定要慎重与小心</p></li></ul><a id="more"></a><h4 id="线程安全解决方法—锁"><a href="#线程安全解决方法—锁" class="headerlink" title="线程安全解决方法—锁"></a>线程安全解决方法—锁</h4><ul><li><p>同步与锁</p><ul><li><p>为了避免一个变量被多个线程同时使用和修改，我们需要多个线程对该数据进行数据进行访问同步。同步就是一个线程在访问一个数据的时候，其他线程不能再对其进行访问。</p></li><li><p>同步最常见的方法是使用锁，锁是一种非强制机制，线程在访问数据时首先试图获取锁，在访问结束时释放锁。当锁还没释放时，其他的线程不能访问该数据，处于阻塞状态，直到锁释放，重新可用。</p></li></ul></li><li><p>常见的锁有：二元信号量，多元信号量(简称信号量)，互斥量，临界区，读写锁，条件变量</p><ul><li><p>二元信号量</p><ul><li><p>这是最简单的一种锁，只有两种状态，即占用和未占用，它适合只能被唯一一个线程访问的资源, 他可以先被一个线程获得，但是可以被其他线程释放。</p></li><li><p>当二元信号量处于非占用状态时，第一个试图获取该二元信号量的线程会获得该锁，并将二元信号量置为占用状态，此后其他的所有试图获取该二元信号量的线程将会等待，直到该锁被释放。</p></li></ul></li><li><p>信号量</p><ul><li><p>信号量可以称为多元信号量，它允许多个线程并发访问一个资源，一个初值为 N 的信号量，可以允许 N 个线程并发访问。</p><ul><li><p>线程访问资源时，首先获取信号量，具体步骤如下:</p><ul><li>将信号量的值减1</li><li>如果信号量相减的值大于0，则继续运行，否则进入等待状态。</li></ul></li><li><p>访问完资源后，进行下面操作</p><ul><li>将信号量加1，</li><li>如果大于1，唤醒一个等待中的进程</li></ul></li></ul></li><li><p>推荐阅读</p><ul><li><p>[信号量是什么怎么用] (<a href="https://www.zhihu.com/question/47411729" target="_blank" rel="noopener">https://www.zhihu.com/question/47411729</a>)</p></li><li><p><a href="http://blog.csdn.net/morewindows/article/details/7481609" target="_blank" rel="noopener">秒杀多线程</a></p></li></ul></li></ul></li><li><p>互斥量</p><ul><li><p>互斥量和二元信号量很相似，同时只允许一个线程访问，只是二元信号量它可以被一个线程获取，但可以被任意进程释放。互斥量与之不同，一个进程获取了互斥量，释放时只能由本线程释放，不能由其他线程释放。</p></li><li><p>推荐阅读</p><ul><li><p><a href="https://github.com/forhappy/Cplusplus-Concurrency-In-Practice/blob/master/zh/chapter4-Mutex/4.2%20Mutex-tutorial.md" target="_blank" rel="noopener">std::mutex</a></p></li><li><p><a href="http://www.cnblogs.com/yuuyuu/p/5140251.html" target="_blank" rel="noopener">线程同步</a></p></li><li><p><a href="http://blog.csdn.net/morewindows/article/details/7470936" target="_blank" rel="noopener">秒杀多线程</a></p></li></ul></li></ul></li><li><p>临界区</p><ul><li><p>临界区是比互斥量更为严格的一种锁，我们把临界区的锁的获取称为进入临界区，锁的释放离开临界区。不管是互斥量还是信号量，他们都是在整个系统中可见的，也就是说一个进程创建了一个互斥量和信号量，其他进程可以获取该锁。然而临界区的作用范围仅限于本进程可见，其他进程是无法获取该锁的，除此之外，临界区和互斥量相同。</p></li><li><p>临界区和互斥量与信号量的区别在于，互斥量和信号量在系统中任何进程里都是可见的，也就是说，一个进程创建了一个互斥量或信号量，另一个进程试图去获取该锁时合法的。然而，临界区的作用范围仅限于本进程中，其他的进程无法获取该锁（类似于静态全局变量对全局变量）。除此之外，临界区具有和互斥量相同的性质。</p></li><li><p>推荐阅读</p><ul><li><a href="http://c.biancheng.net/cpp/html/2597.html" target="_blank" rel="noopener">实现临界区基本方法</a></li></ul></li></ul></li><li><p>读写锁</p><ul><li><p>假想一个场景，如果一个进程中，对一个数据要进行大量的读写，更具体的来说是大量地读，少量地写，如果每次在读写之前都上锁，读写完成后都释放锁，那么加入我读写一共进行1000次，那就一共有1000次获得锁和释放锁的过程，如果使用读写锁，事情会变得相对简单(在读取的时候不加锁，在有线程需要写的时候进行加锁)。</p></li><li><p>首先读写锁有两种获取方式，一种是独占式，一种是共享式。</p><ul><li>当锁处于自由状态时，以任何一种状态获得锁都能成功，如果锁处于共享状态，其他线程以共享方式获得也能成功(独占式不行)。如果一个锁处于独占式的状态，那么以任何一种方法都不能获得锁</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">读写锁状态           以共享方式获取      以独占方式获取</span><br><span class="line">自由                 成功              成功</span><br><span class="line">共享                 成功              等待</span><br><span class="line">独占                 等待              等待</span><br></pre></td></tr></table></figure></li><li><p>推荐阅读</p><ul><li><p><a href="http://www.cnblogs.com/yuuyuu/p/5143881.html" target="_blank" rel="noopener">读写锁1</a></p></li><li><p><a href="http://blog.csdn.net/tennysonsky/article/details/46485735" target="_blank" rel="noopener">读写锁2</a></p></li></ul></li></ul></li><li><p>条件变量</p><ul><li><p>以上介绍的锁处于系统自动控制的状态，不能准确地控制各自线程的顺序，所以再次基础上，我们又加上了条件变量这个机制<a href="http://www.jianshu.com/p/01ad36b91d39" target="_blank" rel="noopener">详细原因</a>。官方点来说条件变量是一种同步手段，对于条件变量来说，线程有两种状态，一种是线程可以等待条件变量(类比接收一个信号)，其次是线程可以唤醒条件变量(类比发送一个信号)。一个条件变量可以被多个线程等待，通俗点来说当一个线程唤醒了一个条件变量(发送信号)后，多个线程等到了条件变量(接收到了信号)，那么多个线程就可以一起执行。</p></li><li><p>推荐阅读</p><ul><li><p><a href="http://www.cnblogs.com/yuuyuu/p/5140875.html" target="_blank" rel="noopener">条件变量</a></p></li><li><p><a href="https://github.com/forhappy/Cplusplus-Concurrency-In-Practice/blob/master/zh/chapter5-Condition-Variable/5.2%20Condition-variable-tutorial.md" target="_blank" rel="noopener">条件变量详解</a></p></li><li><p><a href="http://originlee.com/2015/01/21/trick-in-conditon-variable/" target="_blank" rel="noopener">条件变量陷阱与思考</a></p></li></ul></li></ul></li></ul></li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li><p>注意</p><ul><li><p>在锁中间最好避免出现函数调用的现象，以防出现重入现象</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是一个函数调用自身的例子，当打印出hello world之后就一直卡死，造成死锁</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="keyword">pthread_mutex_t</span> task_mutex;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pthread_mutex_lock(&amp;task_mutex);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"hello world"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">hello();</span><br><span class="line">pthread_mutex_unlock(&amp;task_mutex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">hello();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><a href="https://www.zhihu.com/question/39850927" target="_blank" rel="noopener">互斥锁，同步锁，临界区，互斥量，信号量，自旋锁之间的联系</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线程 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>惊群现象</title>
      <link href="/2017/11/29/%E6%83%8A%E7%BE%A4%E7%8E%B0%E8%B1%A1/"/>
      <url>/2017/11/29/%E6%83%8A%E7%BE%A4%E7%8E%B0%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><ul><li><p>什么是“惊群”，会产生什么问题？</p><ul><li><p>惊群是当许多进(线)程等待一个事件，事件发生后这些进(线)程被唤醒，单只有一个进(线)程能获得CPU执行权，其他进(线)程又得被阻塞，这造成了严重的系统上下文切换代价。</p><ul><li><p>系统对用户进程/线程频繁的无效调度，大幅度的降低系统效率</p></li><li><p>为了确保只有一个进程或线程得到资源，用户必须对资源加锁，这就进一步增加了系统开销</p></li></ul><a id="more"></a></li><li><p>网络模型如下图所示：</p><p><img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/epoll/%E6%83%8A%E7%BE%A4.png" alt="惊群"></p></li></ul></li><li><p>“惊群”的现象怎么用代码模拟出来？</p><ul><li>这个会在后面讲解</li></ul></li><li><p>如何处理“惊群”问题，处理“惊群”后的现象又是怎么样呢？</p><ul><li><p>处理方法</p><ul><li><p>不希望把所有进程都唤醒，就采用定点唤醒某一个进程的做法。(Linux内核的accept解决方法)</p></li><li><p>尽量避免进程上下文切换(Nginx解决epoll的方法(抢占锁))</p></li></ul></li><li><p>现象后面讲解</p></li></ul></li></ul><h4 id="accept惊群"><a href="#accept惊群" class="headerlink" title="accept惊群"></a>accept惊群</h4><ul><li><p>我们都知道常见的C/S模式的服务器一般都会在主进程执行 <code>socket()+bind()+listen()</code> 后，<code>fork()</code> 多个子进程，每个子进程都通过 <code>accept()</code> 循环处理这个 <code>socket</code>；此时，每个进程都阻塞在 <code>accpet()</code> 调用上，<strong>当一个新连接到来时，所有的进程都会被唤醒，但其中只有一个进程会 <code>accept()</code> 成功，其余皆失败，重新休眠</strong>。这就是 <code>accept 惊群</code>。</p><ul><li>打个比方，街边有一家麦当劳餐厅，里面有4个服务小窗口，每个窗口各有一名服务员。当大门口进来一位新客人时，“欢迎光临！”餐厅大门的感应式门铃自动响了<strong>（相当于操作系统底层捕捉到了一个网络事件）</strong>，于是4个服务员都抬起头<strong>（相当于操作系统唤醒了所有服务进程）</strong>希望将客人招呼过去自己所在的服务窗口。但结果可想而知，客人最终只会走向其中某一个窗口，而其他3个窗口的服务员只能“失望叹息”<strong>（这一声无奈的叹息就相当于accept()返回EAGAIN错误）</strong>，然后埋头继续忙自己的事去。</li></ul></li><li><p>如果只用一个进程去 accept 新连接，并通过消息队列等同步方式使其他子进程处理这些新建的连接，那么将会造成效率低下；因为这个进程只能用来 accept 连接，该进程可能会造成瓶颈。</p></li><li><p>我们已经知道了“惊群”是怎么回事，那么就按照上面的图编码实现看一下效果。我尝试使用多进程模型，创建一个父进程绑定一个端口监听socket，然后fork出多个子进程，子进程们开始循环处理（比如accept）这个socket。测试代码如下所示：</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IP   <span class="meta-string">"127.0.0.1"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PORT  55555</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WORKER 4</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">worker</span><span class="params">(<span class="keyword">int</span> listenfd, <span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"I am worker %d, begin to accept connection.\n"</span>, i);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">client_addr</span>;</span></span><br><span class="line"><span class="keyword">socklen_t</span> client_addrlen = <span class="keyword">sizeof</span>( client_addr );</span><br><span class="line"><span class="keyword">int</span> connfd = accept( listenfd, ( struct sockaddr* )&amp;client_addr, &amp;client_addrlen );</span><br><span class="line"><span class="keyword">if</span> (connfd != <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"worker %d accept a connection success.\t"</span>, i);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"ip :%s\t"</span>,inet_ntoa(client_addr.sin_addr));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"port: %d \n"</span>,client_addr.sin_port);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"worker %d accept a connection failed,error:%s"</span>, i, strerror(errno));</span><br><span class="line">close(connfd);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">address</span>;</span></span><br><span class="line">bzero(&amp;address, <span class="keyword">sizeof</span>(address));</span><br><span class="line">address.sin_family = AF_INET;</span><br><span class="line">inet_pton( AF_INET, IP, &amp;address.sin_addr);</span><br><span class="line">address.sin_port = htons(PORT);</span><br><span class="line"><span class="keyword">int</span> listenfd = socket(PF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">assert(listenfd &gt;= <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ret = bind(listenfd, (struct sockaddr*)&amp;address, <span class="keyword">sizeof</span>(address));</span><br><span class="line">assert(ret != <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">ret = listen(listenfd, <span class="number">5</span>);</span><br><span class="line">assert(ret != <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; WORKER; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Create worker %d\n"</span>, i+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">pid_t</span> pid = fork();</span><br><span class="line"><span class="comment">/*child  process */</span></span><br><span class="line"><span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</span><br><span class="line">worker(listenfd, i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pid &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"fork error"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*wait child process*/</span></span><br><span class="line"><span class="keyword">int</span> status;</span><br><span class="line">wait(&amp;status);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>编译执行，在本机上使用 <code>telnet 127.0.0.1 55555</code> 测试，结果如下所示：</p><p>  <img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/epoll/%E6%B5%8B%E8%AF%95accept.png" alt="测试"></p><ul><li><p>按照“惊群”现象，期望结果应该是4个子进程都会accpet到请求，其中只有一个成功，另外三个失败的情况。而实际的结果显示，父进程开始创建4个子进程，每个子进程开始等待accept连接。当telnet连接来的时候，只有worker0 子进程accpet到请求，而其他的三个进程并没有接收到请求。</p><ul><li><p>其实在Linux2.6版本以后，内核内核已经解决了accept()函数的“惊群”问题。处理方式就是，当内核接收到一个客户连接后，只会唤醒等待队列上的第一个进程。所以，如果服务器采用accept阻塞调用方式，在最新的Linux系统上，已经没有“惊群”的问题了。</p></li><li><p>但是很不幸，通常我们的程序没那么简单，不会愿意阻塞在accept调用上，我们还有许多其他网络读写事件要处理，linux下我们爱用epoll解决非阻塞socket。所以，即使accept调用没有惊群了，我们也还得处理惊群这事，因为epoll有这问题。上面说的测试程序，如果我们在子进程内不是阻塞调用accept，而是用epoll_wait，就会发现，新连接过来时，多个子进程都会在epoll_wait后被唤醒！</p></li></ul></li></ul></li></ul></li><li><p>相关文章/帖子</p><ul><li><a href="http://bbs.chinaunix.net/thread-946261-1-1.html" target="_blank" rel="noopener">惊群(thundering herd)问题在linux上可能是莫须有的问题</a></li><li><a href="https://stackoverflow.com/questions/2213779/does-the-thundering-herd-problem-exist-on-linux-anymore" target="_blank" rel="noopener">Does the Thundering Herd Problem exist on Linux anymore?</a></li></ul></li></ul><h4 id="epoll惊群"><a href="#epoll惊群" class="headerlink" title="epoll惊群"></a>epoll惊群</h4><ul><li><p>如上所述，accept 已经不存在惊群问题，但 epoll 上还是存在惊群问题。即，如果多个进程/线程阻塞在监听同一个 listening socket fd 的 epoll_wait 上，当有一个新的连接到来时，所有的进程都会被唤醒。</p></li><li><p>主进程仍执行 socket()+bind()+listen() 后，将该 socket 加入到 epoll 中，然后 fork 出多个子进程，每个进程都阻塞在 epoll_wait() 上，如果有事件到来，则判断该事件是否是该 socket 上的事件，如果是，说明有新的连接到来了，则进行 accept 操作</p></li><li><p>那么，当新的连接到来时，是否每个阻塞在 epoll_wait 上的进程都会被唤醒呢？</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/epoll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netdb.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IP   <span class="meta-string">"127.0.0.1"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PORT  55555</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PROCESS_NUM 4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXEVENTS 64</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">create_and_bind</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> fd = socket(PF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serveraddr</span>;</span></span><br><span class="line">serveraddr.sin_family = AF_INET;</span><br><span class="line">inet_pton( AF_INET, IP, &amp;serveraddr.sin_addr);  </span><br><span class="line">serveraddr.sin_port = htons(PORT);</span><br><span class="line">bind(fd, (struct sockaddr*)&amp;serveraddr, <span class="keyword">sizeof</span>(serveraddr));</span><br><span class="line"><span class="keyword">return</span> fd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">make_socket_non_blocking</span> <span class="params">(<span class="keyword">int</span> sfd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> flags, s;</span><br><span class="line">flags = fcntl (sfd, F_GETFL, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (flags == <span class="number">-1</span>) &#123;</span><br><span class="line">perror (<span class="string">"fcntl"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">flags |= O_NONBLOCK;</span><br><span class="line">s = fcntl (sfd, F_SETFL, flags);</span><br><span class="line"><span class="keyword">if</span> (s == <span class="number">-1</span>) &#123;</span><br><span class="line">perror (<span class="string">"fcntl"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">worker</span><span class="params">(<span class="keyword">int</span> sfd, <span class="keyword">int</span> efd, struct epoll_event *events, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line"><span class="comment">/* The event loop */</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> n, i;</span><br><span class="line">n = epoll_wait(efd, events, MAXEVENTS, <span class="number">-1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"worker  %d return from epoll_wait!\n"</span>, k);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> ((events[i].events &amp; EPOLLERR) || (events[i].events &amp; EPOLLHUP) || (!(events[i].events &amp;EPOLLIN))) &#123;</span><br><span class="line"><span class="comment">/* An error has occured on this fd, or the socket is not ready for reading (why were we notified then?) */</span></span><br><span class="line"><span class="built_in">fprintf</span> (<span class="built_in">stderr</span>, <span class="string">"epoll error\n"</span>);</span><br><span class="line">close (events[i].data.fd);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (sfd == events[i].data.fd) &#123;</span><br><span class="line"><span class="comment">/* We have a notification on the listening socket, which means one or more incoming connections. */</span></span><br><span class="line">struct sockaddr in_addr;</span><br><span class="line"><span class="keyword">socklen_t</span> in_len;</span><br><span class="line"><span class="keyword">int</span> infd;</span><br><span class="line"><span class="keyword">char</span> hbuf[NI_MAXHOST], sbuf[NI_MAXSERV];</span><br><span class="line">in_len = <span class="keyword">sizeof</span> in_addr;</span><br><span class="line">infd = accept(sfd, &amp;in_addr, &amp;in_len);</span><br><span class="line"><span class="keyword">if</span> (infd == <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"worker %d accept failed!\n"</span>, k);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"worker %d accept successed!\n"</span>, k);</span><br><span class="line"><span class="comment">/* Make the incoming socket non-blocking and add it to the list of fds to monitor. */</span></span><br><span class="line">close(infd); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> sfd, s;</span><br><span class="line"><span class="keyword">int</span> efd;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">event</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> *<span class="title">events</span>;</span></span><br><span class="line">sfd = create_and_bind();</span><br><span class="line"><span class="keyword">if</span> (sfd == <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="built_in">abort</span> ();</span><br><span class="line">&#125;</span><br><span class="line">s = make_socket_non_blocking (sfd);</span><br><span class="line"><span class="keyword">if</span> (s == <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="built_in">abort</span> ();</span><br><span class="line">&#125;</span><br><span class="line">s = listen(sfd, SOMAXCONN);</span><br><span class="line"><span class="keyword">if</span> (s == <span class="number">-1</span>) &#123;</span><br><span class="line">perror (<span class="string">"listen"</span>);</span><br><span class="line"><span class="built_in">abort</span> ();</span><br><span class="line">&#125;</span><br><span class="line">efd = epoll_create(MAXEVENTS);</span><br><span class="line"><span class="keyword">if</span> (efd == <span class="number">-1</span>) &#123;</span><br><span class="line">perror(<span class="string">"epoll_create"</span>);</span><br><span class="line"><span class="built_in">abort</span>();</span><br><span class="line">&#125;</span><br><span class="line">event.data.fd = sfd;</span><br><span class="line">event.events = EPOLLIN;</span><br><span class="line">s = epoll_ctl(efd, EPOLL_CTL_ADD, sfd, &amp;event);</span><br><span class="line"><span class="keyword">if</span> (s == <span class="number">-1</span>) &#123;</span><br><span class="line">perror(<span class="string">"epoll_ctl"</span>);</span><br><span class="line"><span class="built_in">abort</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Buffer where events are returned */</span></span><br><span class="line">events = <span class="built_in">calloc</span>(MAXEVENTS, <span class="keyword">sizeof</span> event);</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"><span class="keyword">for</span>(k = <span class="number">0</span>; k &lt; PROCESS_NUM; k++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Create worker %d\n"</span>, k+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> pid = fork();</span><br><span class="line"><span class="keyword">if</span>(pid == <span class="number">0</span>) &#123;</span><br><span class="line">worker(sfd, efd, events, k);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> status;</span><br><span class="line">wait(&amp;status);</span><br><span class="line"><span class="built_in">free</span> (events);</span><br><span class="line">close (sfd);</span><br><span class="line"><span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>测试结果：</p><p>  <img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/epoll/epoll%E6%B5%8B%E8%AF%95.png" alt="epoll"></p><ul><li><p>我们发现，当我模拟发起一个请求时，只有一个或少数几个进程被唤醒了(是不是linux内核也做了一些操作让epoll在某些情况下只唤醒部分进程呢？)。</p></li><li><p>代码改进如下(在epoll_wait后调用sleep)：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">worker</span><span class="params">(<span class="keyword">int</span> sfd, <span class="keyword">int</span> efd, struct epoll_event *events, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line"><span class="comment">/* The event loop */</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> n, i;</span><br><span class="line">n = epoll_wait(efd, events, MAXEVENTS, <span class="number">-1</span>);</span><br><span class="line"><span class="comment">/*keep running*/</span></span><br><span class="line">sleep(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"worker  %d return from epoll_wait!\n"</span>, k); </span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> ((events[i].events &amp; EPOLLERR) || (events[i].events &amp; EPOLLHUP) || (!(events[i].events &amp;EPOLLIN))) &#123;</span><br><span class="line"><span class="comment">/* An error has occured on this fd, or the socket is not ready for reading (why were we notified then?) */</span></span><br><span class="line"><span class="built_in">fprintf</span> (<span class="built_in">stderr</span>, <span class="string">"epoll error\n"</span>);</span><br><span class="line">close (events[i].data.fd);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (sfd == events[i].data.fd) &#123;</span><br><span class="line"><span class="comment">/* We have a notification on the listening socket, which means one or more incoming connections. */</span></span><br><span class="line">struct sockaddr in_addr;</span><br><span class="line"><span class="keyword">socklen_t</span> in_len;</span><br><span class="line"><span class="keyword">int</span> infd;</span><br><span class="line"><span class="keyword">char</span> hbuf[NI_MAXHOST], sbuf[NI_MAXSERV];</span><br><span class="line">in_len = <span class="keyword">sizeof</span> in_addr;</span><br><span class="line">infd = accept(sfd, &amp;in_addr, &amp;in_len);</span><br><span class="line"><span class="keyword">if</span> (infd == <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"worker %d accept failed,error:%s\n"</span>, k, strerror(errno));</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"worker %d accept successed!\n"</span>, k);</span><br><span class="line"><span class="comment">/* Make the incoming socket non-blocking and add it to the list of fds to monitor. */</span></span><br><span class="line">close(infd);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>再次运行发现其实linux内核并没有做什么，上面出现的现象的原因是我们的进程在处理事件的速度太快，还没等到唤醒所有的进程就处理完毕了，所以造成只唤醒了部分进程的假象。</p></li><li><p>为什么只解决了 accept() 的惊群问题，而没有解决 epoll() 的？</p><ul><li>accept 确实应该只能被一个进程调用成功，内核很清楚这一点。但 epoll 不一样，他监听的文件描述符，除了可能后续被 accept 调用外，还有可能是其他网络 IO 事件的，而其他 IO 事件是否只能由一个进程处理，是不一定的，内核不能保证这一点，这是一个由用户决定的事情，例如可能一个文件会由多个进程来读写。所以，对 epoll 的惊群，内核则不予处理。</li></ul></li></ul></li></ul></li><li><p>解决问题</p><ul><li><p>网上有好多优秀的文章已经阐述的很详细了，我就只解释下原理，想要查看细节的请自行查看(下面的链接)。</p></li><li><p>Linux</p><ul><li><p>对于一些 linux 内核中已知的惊群问题，内核开发者增加了“互斥等待”选项：</p><ul><li><p>当一个等待队列入口如果 <code>WQ_FLAG_EXCLUSEVE</code> 标志置位，它被添加到等待队列尾部，否则添加到队列尾部。</p></li><li><p>当 wake_up 被在一个队列上调用时，它在唤醒第一个有 <code>WQ_FLAG_EXCLUSEVE</code> 标志的进程后终止。</p></li></ul></li><li><p>因此，对于互斥等待的行为，内核只会唤醒队列中的第一个进程</p></li><li><p><a href="https://jin-yang.github.io/post/linux-details-of-thundering-herd.html" target="_blank" rel="noopener">https://jin-yang.github.io/post/linux-details-of-thundering-herd.html</a> (跳到最后看3.9以上的内核怎样处理的)</p></li><li><p><a href="https://groups.google.com/forum/#!msg/openresty/IY43D2qs3ok/MwV4F1eiAQAJ" target="_blank" rel="noopener">https://groups.google.com/forum/#!msg/openresty/IY43D2qs3ok/MwV4F1eiAQAJ</a> (配合上面的一起看，要看回答(回答有解释为什么能实现多个描述符监听同一个端口))</p></li></ul></li><li><p>nginx</p><ul><li><p>nginx 使用 <code>ngx_accept_mutex</code> 作为互斥锁让所有 worker 进程竞争，最终只有一个进程可以获得锁，以保证只有一个进程执行 <code>epoll_wait</code> 操作，并 accept</p></li><li><p>它的负载均衡也很简单，当达到最大connection的7/8时，本worker不会去试图拿accept锁，也不会去处理新连接，这样其他nginx worker进程就更有机会去处理监听句柄，建立新连接了。而且，由于timeout的设定，使得没有拿到锁的worker进程，去拿锁的频率更高。</p></li><li><p><a href="http://www.cnblogs.com/my_life/articles/5145050.html" target="_blank" rel="noopener">http://www.cnblogs.com/my_life/articles/5145050.html</a> (从中间的部分开始看)</p></li><li><p><a href="https://groups.google.com/forum/#!msg/openresty/IY43D2qs3ok/MwV4F1eiAQAJ" target="_blank" rel="noopener">https://groups.google.com/forum/#!msg/openresty/IY43D2qs3ok/MwV4F1eiAQAJ</a> (配合后面的回答看，链接一定要点进去)</p></li><li><p><a href="https://pureage.info/2015/12/22/thundering-herd.html" target="_blank" rel="noopener">https://pureage.info/2015/12/22/thundering-herd.html</a> (直接跳到最后面看步骤和思想，建议配合下面的阅读)</p></li><li><p><a href="http://techlog.cn/article/list/10182833" target="_blank" rel="noopener">http://techlog.cn/article/list/10182833</a> (很详细的代码解释，建议阅读)</p></li></ul></li><li><p>其它</p><ul><li><a href="http://blog.163.com/pandalove@126/blog/static/9800324520122633515612/" target="_blank" rel="noopener">http://blog.163.com/pandalove@126/blog/static/9800324520122633515612/</a></li></ul></li></ul></li></ul><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://zh.wikipedia.org/wiki/%E6%83%8A%E7%BE%A4%E9%97%AE%E9%A2%98" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/%E6%83%8A%E7%BE%A4%E9%97%AE%E9%A2%98</a></li><li><a href="https://www.zhihu.com/question/24169490" target="_blank" rel="noopener">https://www.zhihu.com/question/24169490</a> (第一个回答下面的评论)</li><li><a href="http://www.cnblogs.com/Anker/p/7071849.html" target="_blank" rel="noopener">http://www.cnblogs.com/Anker/p/7071849.html</a></li><li>以及上面所提到的文章</li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Others </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>线程安全</title>
      <link href="/2017/11/29/%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/"/>
      <url>/2017/11/29/%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><ul><li><p>在单线程进程中，只存在一个控制流。因此，这些进程所执行的代码无需重入或是线程安全的。在多线程程序中，相同的功能和资源可以通过多个控制流并发访问。</p></li><li><p>要保护资源的完整性，编写的多线程程序代码必须能重入并是线程安全的。重入和线程安全都与函数处理资源的方式相关。</p></li></ul><a id="more"></a><h4 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h4><ul><li><p>概念</p><ul><li><p>线程，有时也称轻量级进程(LWP)，它是程序执行流的最小单元。它由堆栈，寄存器集，线程ID，当前指令指针(PC)组成。</p></li><li><p>线程也可以理解为颗粒度更小的进程，对任务划分更为精细，线程可以像进程一样，进行并发，提高了程序的响应度，一个进程包含了多个线程。</p></li><li><p>线程之间可以共享进程中一部分的内存空间(包括代码段，数据段，堆)，还有一个进程中的资源(如打开的文件，socket，还有信号)</p></li><li><p>进程是可以作为一个程序独立运行的，但是线程并不可以，它必须依附于进程来工作，一个进程最少有一个线程。</p></li></ul></li><li><p>线程的访问权限</p><ul><li><p>栈：（尽管并不是完全不能被其他线程访问，但是一般情况下，还是被认为为私有数据）</p></li><li><p>线程局部存储(Thread Local Storge, TLS)：是某些操作系统为线程单独提供的私有空间，通常具有很有限的容量。</p></li><li><p>寄存器(包括pc寄存器)：寄存器是执行流的基本数据，为线程私有。</p></li><li><p>线程私有:</p><ul><li>函数参数</li><li>TLS</li><li>栈</li></ul></li><li><p>线程之间共享:</p><ul><li>代码段</li><li>全局变量</li><li>函数中的静态变量</li><li>堆上的数据</li><li>一些进程中资源:打开的文件，socket，信号等</li></ul></li></ul></li><li><p>线程的调度和优先级</p><ul><li><p>线程在运行时可以有三种状态：等待，就绪，运行</p><ul><li>等待 -&gt; 就绪 -&gt; 运行 -&gt; 等待</li><li>运行 -&gt; 就绪 -&gt; 运行(对于CPU密集型程序常出现时间片用完还没完成任务，于是在运行)</li></ul></li><li><p>概念</p><ul><li><p>多线程的出现，导致了一个处理器上经常要运行多个线程，各个线程怎么运行？谁先谁后？这些问题都交给了线程调度，有了线程调度，一个线程在规定的时间片(处于运行中的程序拥有的一段可以执行的时间)内运行，超出了时间片的时间，调度机制将会安排下一个线程运行。</p></li><li><p>现在线程调度虽然各不相同，但是都有优先级调度和轮转法的痕迹。轮转法(让每一个程序都运行一段时间，时间一到就切换到下一个程序)，优先级调度(根据程序的优先级来运行，优先级高的先运行)。</p></li></ul></li><li><p>线程提升优先级的方法</p><ul><li>手动设置</li><li>根据等待的频繁程度，增加或减少优先级。</li><li>随着时间的累计，逐渐增减优先级</li></ul></li><li><p>线程饿死</p><ul><li>如果一个高优先级的CPU密集型任务，在每次时间片用尽后进入就绪状态，然后又进入运行状态，那么很低优先级的程序就会永远等不到运行，这就是线程饿死</li></ul></li></ul></li><li><p>抢占式线程和不可抢占式线程</p><ul><li><p>每当一个线程在执行时间到达时间片后，都会被系统收回控制权，之后执行其他线程，这就是抢占式</p></li><li><p>当在不可抢占式线程中时，线程是不可抢占的，除非线程自己发出一个停止执行的命令，或者进入等待。在该线程模型下，</p></li><li><p>线程必须自己主动进入就绪状态，而不是靠时间片强行进入就绪状态。如果一个线程没有等待，也没有主动进入就绪，那么它将一直运行，其他线程被阻塞</p></li><li><p>现在非抢占式线程基本已经看不到了，基本上都是抢占式进程</p></li></ul></li></ul><h4 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h4><ul><li><p>概念</p><ul><li><p>线程安全的概念比较直观，一般来说，一个函数被称为线程安全的，当且仅当被多个并发线程反复调用时，它会一直产生正确的结果。</p></li><li><p><a href="http://www.jasongj.com/java/thread_safe/" target="_blank" rel="noopener">多线程编程中的三个核心概念</a></p></li></ul></li><li><p>确保线程安全</p><ul><li>要确保函数线程安全，主要需要考虑的是线程之间的共享变量。属于同一线程的不同进程会共享进程内存空间中的全局区和堆，而私有的线程空间则主要包括栈和寄存器。因此，对于同一进程的不同线程来说，每个线程的局部变量都是私有的，而全局变量、局部静态变量、分配于堆的变量都是共享的。而对于这些共享变量进行访问时，如果要保证线程安全，则必须通过加锁的方式。</li></ul></li><li><p>线程不安全的后果</p><ul><li>线程不安全可能导致的后果是显而易见的——共享变量的值由于不同线程的访问，可能发生不可预料的变化，进而导致程序的错误，甚至崩溃。</li></ul></li></ul><h4 id="可重入函数"><a href="#可重入函数" class="headerlink" title="可重入函数"></a>可重入函数</h4><ul><li><p>概念</p><ul><li><p>可重入的概念基本没头比较正式的完整解释，这里有个大体的理解，所谓的“重入”，常见的情况是，程序执行到某个函数foo()，收到信号，于是暂停目前正在执行的函数，转到信号处理函数，而这个信号处理函数的执行过程中，又恰恰也会进到刚刚执行的函数foo()，这样便发生了所谓的重入。此时如果foo()能够正确的运行，而且处理完成后，之前暂停的foo()也能够正确运行，则说明它时可重入的。</p></li><li><p>Linux中可重入这个概念一般只有在signal的场景下有意义，叫async-signal-safe。很多线程安全的函数都是不可重入的，例如malloc。可重入函数一般也是线程安全的，当然据说时是有反例的。</p></li></ul></li><li><p>确保可重入</p><ul><li><p>要确保函数可重入，需要满足一下几个条件：</p><ul><li><p>不在函数内部使用静态或全局数据</p></li><li><p>不返回静态或全局数据，所有数据都由函数的调用者提供</p></li><li><p>使用本地数据，或者通过制作全局数据的本地拷贝来保护全局数据</p></li><li><p>不掉用不可重入函数</p></li><li><p>不可重入的后果</p></li></ul></li><li><p>不可重入的后果主要体现在像信号处理函数这样需要重入的情况中。如果信号处理函数中使用了不可重入的函数，则可能导致程序的错误甚至崩溃。</p></li></ul></li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li><p>可重入与线程安全并不等同。一般来说，可重入的函数一定时线程安全的，但反过来说就不一定成立了，也就是说，可重入是比线程安全要要求严格的</p><ul><li><p>如果一个函数中用到了全局或静态变量，那么他不是线程安全的，也不是可重入的</p></li><li><p>如果我们对它加以改进，在访问全局或者静态变量时使用互斥量或信号量等方式加锁，则可以使它变成线程安全的，但此时它仍然是不可重入的，因为通常加锁方式是针对不同线程的访问，而对同一线程可能出现问题</p></li><li><p>如果将函数中的全局或静态变量去掉，改成函数参数等其他形式，则有可能使函数变成既线程安全，又可重入</p></li></ul></li><li><p><a href="https://www.ibm.com/support/knowledgecenter/zh/ssw_aix_71/com.ibm.aix.genprogc/writing_reentrant_thread_safe_code.htm" target="_blank" rel="noopener">编写重入和线程安全代码</a></p></li><li><p>示例：<a href="http://roux.top/2017/10/09/str%E5%8D%9A%E5%AE%A2%E6%80%BB%E7%BB%93/#strtok函数">strtok</a></p><ul><li><code>strtok</code> 函数是既不可重入的，也不是线程安全的；加锁的 <code>strtok</code> 不是可重入的，但线程安全；而 <code>strok_r</code> 既是可重入的，也是线程安全的。</li></ul></li></ul><h4 id="参考及推荐"><a href="#参考及推荐" class="headerlink" title="参考及推荐"></a>参考及推荐</h4><ul><li><p>参考</p><ul><li><p><a href="https://www.ibm.com/support/knowledgecenter/zh/ssw_aix_71/com.ibm.aix.genprogc/writing_reentrant_thread_safe_code.htm" target="_blank" rel="noopener">https://www.ibm.com/support/knowledgecenter/zh/ssw_aix_71/com.ibm.aix.genprogc/writing_reentrant_thread_safe_code.htm</a></p></li><li><p><a href="https://www.gsxio.com/reentrant-function-and-thread-safety.html" target="_blank" rel="noopener">https://www.gsxio.com/reentrant-function-and-thread-safety.html</a></p></li><li><p><a href="http://sindrilin.com/note/2017/09/09/%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/" target="_blank" rel="noopener">http://sindrilin.com/note/2017/09/09/%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/</a></p></li></ul></li><li><p>推荐</p><ul><li><p><a href="http://www.bijishequ.com/detail/277766?p=" target="_blank" rel="noopener">http://www.bijishequ.com/detail/277766?p=</a></p></li><li><p><a href="http://www.cppblog.com/elva/archive/2011/01/21/139019.html" target="_blank" rel="noopener">http://www.cppblog.com/elva/archive/2011/01/21/139019.html</a></p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线程 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>epoll源码分析</title>
      <link href="/2017/11/27/epoll%E6%BA%90%E7%A0%81/"/>
      <url>/2017/11/27/epoll%E6%BA%90%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h4 id="epoll的实现"><a href="#epoll的实现" class="headerlink" title="epoll的实现"></a>epoll的实现</h4><ul><li><p>执行 <code>epoll_create</code> 时，创建了红黑树和就绪 list 链表。</p></li><li><p>执行 <code>epoll_ctl</code> 时，如果增加fd（socket），则检查在红黑树中是否存在，存在立即返回，不存在则添加到红黑树上，然后向内核注册回调函数，用于当中断事件来临时向准备就绪list链表中插入数据。</p></li><li><p>执行 <code>epoll_wait</code> 时立刻返回准备就绪链表里的数据即可。</p></li></ul><a id="more"></a><h4 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h4><ul><li><p>epoll用 <code>kmem_cache_create</code>（slab分配器）分配内存用来存放 <code>struct epitem</code> 和 <code>struct eppoll_entry</code>。</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> __<span class="function">init <span class="title">eventpoll_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">   mutex_init(&amp;pmutex);</span><br><span class="line"></span><br><span class="line">   ep_poll_safewake_init(&amp;psw);</span><br><span class="line"></span><br><span class="line">   epi_cache = kmem_cache_create(<span class="string">"eventpoll_epi"</span>, <span class="keyword">sizeof</span>(struct epitem), <span class="number">0</span>, SLAB_HWCACHE_ALIGN|EPI_SLAB_DEBUG|SLAB_PANIC, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">   pwq_cache = kmem_cache_create(<span class="string">"eventpoll_pwq"</span>, <span class="keyword">sizeof</span>(struct eppoll_entry), <span class="number">0</span>, EPI_SLAB_DEBUG|SLAB_PANIC, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>当向系统中添加一个 fd 时，就创建一个 <code>epitem</code> 结构体，这是内核管理 epoll 的基本数据结构：</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">epitem</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rb_node</span>  <span class="title">rbn</span>;</span>        <span class="comment">//用于主结构管理的红黑树</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span>  <span class="title">rdllink</span>;</span>  <span class="comment">//事件就绪队列</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">epitem</span>  *<span class="title">next</span>;</span>       <span class="comment">//用于主结构体中的链表</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_filefd</span>  <span class="title">ffd</span>;</span>   <span class="comment">//这个结构体对应的被监听的文件描述符信息</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>  nwait;                 <span class="comment">//poll操作中事件的个数</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span>  <span class="title">pwqlist</span>;</span>  <span class="comment">//双向链表，保存着被监视文件的等待队列，功能类似于select/poll中的poll_table</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">eventpoll</span>  *<span class="title">ep</span>;</span>      <span class="comment">//该项属于哪个主结构体（多个epitm从属于一个eventpoll）</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span>  <span class="title">fllink</span>;</span>   <span class="comment">//双向链表，用来链接被监视的文件描述符对应的struct file。因为file里有f_ep_link,用来保存所有监视这个文件的epoll节点</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span>  <span class="title">event</span>;</span>  <span class="comment">//注册的感兴趣的事件,也就是用户空间的epoll_event</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>而每个epoll fd（epfd）对应的主要数据结构为：</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">eventpoll</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">spin_lock_t</span>       lock;        <span class="comment">//对本数据结构的访问</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mutex</span>      <span class="title">mtx</span>;</span>         <span class="comment">//防止使用时被删除</span></span><br><span class="line"><span class="keyword">wait_queue_head_t</span>     wq;      <span class="comment">//sys_epoll_wait() 使用的等待队列</span></span><br><span class="line"><span class="keyword">wait_queue_head_t</span>   poll_wait;       <span class="comment">//file-&gt;poll()使用的等待队列</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span>    <span class="title">rdllist</span>;</span>        <span class="comment">//事件满足条件的链表</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rb_root</span>      <span class="title">rbr</span>;</span>            <span class="comment">//用于管理所有fd的红黑树（树根）</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">epitem</span>      *<span class="title">ovflist</span>;</span>       <span class="comment">//将事件到达的fd进行链接起来发送至用户空间</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//struct eventpoll在epoll_create时创建。</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">sys_epoll_create</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">eventpoll</span> *<span class="title">ep</span>;</span></span><br><span class="line">...</span><br><span class="line">ep_alloc(&amp;ep); <span class="comment">//为ep分配内存并进行初始化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 调用anon_inode_getfd 新建一个file instance，</span></span><br><span class="line"><span class="comment">也就是epoll可以看成一个文件（匿名文件）。</span></span><br><span class="line"><span class="comment">因此我们可以看到epoll_create会返回一个fd。</span></span><br><span class="line"><span class="comment">epoll所管理的所有的fd都是放在一个大的结构eventpoll(红黑树)中，</span></span><br><span class="line"><span class="comment">将主结构体struct eventpoll *ep放入file-&gt;private项中进行保存（sys_epoll_ctl会取用）*/</span></span><br><span class="line"></span><br><span class="line"> fd = anon_inode_getfd(<span class="string">"[eventpoll]"</span>, &amp;eventpoll_fops, ep, O_RDWR | (flags &amp; O_CLOEXEC));</span><br><span class="line"> <span class="keyword">return</span> fd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//其中，ep_alloc(struct eventpoll **pep)为pep分配内存，并初始化。</span></span><br><span class="line"><span class="comment">//其中，上面注册的操作eventpoll_fops定义如下：</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">eventpoll_fops</span> = &#123;</span></span><br><span class="line">.release=  ep_eventpoll_release,</span><br><span class="line">.poll    =  ep_eventpoll_poll,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>这样说来，内核中维护了一棵红黑树，大致的结构如下：</p><ul><li><p>简单版<br><img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/epoll/epoll%E7%BA%A2%E9%BB%91%E6%A0%91.jpg" alt="红黑树简单"></p></li><li><p>复杂版<br><img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/epoll/poll%E5%92%8Cepoll%E5%86%85%E6%A0%B8%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90.jpg" alt="红黑树详细"></p></li></ul></li><li><p>接着是epoll_ctl函数（省略了出错检查等代码）：</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">asmlinkage <span class="keyword">long</span> <span class="title">sys_epoll_ctl</span><span class="params">(<span class="keyword">int</span> epfd,<span class="keyword">int</span> op,<span class="keyword">int</span> fd,struct epoll_event __user *event)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> error;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file</span> *<span class="title">file</span>,*<span class="title">tfile</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">eventpoll</span> *<span class="title">ep</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">epds</span>;</span></span><br><span class="line">error = -FAULT;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断参数的合法性，将 __user *event 复制给 epds。</span></span><br><span class="line"><span class="keyword">if</span>(ep_op_has_event(op) &amp;&amp; copy_from_user(&amp;epds,event,<span class="keyword">sizeof</span>(struct epoll_event)))</span><br><span class="line"><span class="keyword">goto</span> error_return; <span class="comment">//省略跳转到的代码</span></span><br><span class="line"></span><br><span class="line">file  = fget (epfd); <span class="comment">// epoll fd 对应的文件对象</span></span><br><span class="line">tfile = fget(fd);    <span class="comment">// fd 对应的文件对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在create时存入进去的（anon_inode_getfd），现在取用。</span></span><br><span class="line">ep = file-&gt;<span class="keyword">private</span>-&gt;data;</span><br><span class="line"></span><br><span class="line">mutex_lock(&amp;ep-&gt;mtx);</span><br><span class="line"></span><br><span class="line"><span class="comment">//防止重复添加（在ep的红黑树中查找是否已经存在这个fd）</span></span><br><span class="line">epi = epi_find(ep,tfile,fd);</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(op)</span><br><span class="line">&#123;</span><br><span class="line">   ...</span><br><span class="line"><span class="keyword">case</span> EPOLL_CTL_ADD:  <span class="comment">//增加监听一个fd</span></span><br><span class="line"><span class="keyword">if</span>(!epi)</span><br><span class="line">&#123;</span><br><span class="line">epds.events |= EPOLLERR | POLLHUP;     <span class="comment">//默认包含POLLERR和POLLHUP事件</span></span><br><span class="line">error = ep_insert(ep,&amp;epds,tfile,fd);  <span class="comment">//在ep的红黑树中插入这个fd对应的epitm结构体。</span></span><br><span class="line">&#125; <span class="keyword">else</span>  <span class="comment">//重复添加（在ep的红黑树中查找已经存在这个fd）。</span></span><br><span class="line">error = -EEXIST;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> error;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ep_insert的实现如下：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">static int ep_insert(struct eventpoll *ep, struct epoll_event *event, struct file *tfile, int fd)</span><br><span class="line">&#123;</span><br><span class="line">int error ,revents,pwake = 0;</span><br><span class="line">unsigned long flags ;</span><br><span class="line">struct epitem *epi;</span><br><span class="line">/*</span><br><span class="line">struct ep_queue&#123;</span><br><span class="line">poll_table pt;</span><br><span class="line">struct epitem *epi;</span><br><span class="line">&#125;*/</span><br><span class="line"></span><br><span class="line">struct ep_pqueue epq;</span><br><span class="line"></span><br><span class="line">//分配一个epitem结构体来保存每个加入的fd</span><br><span class="line">if(!(epi = kmem_cache_alloc(epi_cache,GFP_KERNEL)))</span><br><span class="line">goto error_return;</span><br><span class="line"></span><br><span class="line">//初始化该结构体</span><br><span class="line">ep_rb_initnode(&amp;epi-&gt;rbn);</span><br><span class="line">INIT_LIST_HEAD(&amp;epi-&gt;rdllink);</span><br><span class="line">INIT_LIST_HEAD(&amp;epi-&gt;fllink);</span><br><span class="line">INIT_LIST_HEAD(&amp;epi-&gt;pwqlist);</span><br><span class="line">epi-&gt;ep = ep;</span><br><span class="line">ep_set_ffd(&amp;epi-&gt;ffd,tfile,fd);</span><br><span class="line">epi-&gt;event = *event;</span><br><span class="line">epi-&gt;nwait = 0;</span><br><span class="line">epi-&gt;next = EP_UNACTIVE_PTR;</span><br><span class="line"></span><br><span class="line">epq.epi = epi;</span><br><span class="line"></span><br><span class="line">//安装poll回调函数</span><br><span class="line">init_poll_funcptr(&amp;epq.pt, ep_ptable_queue_proc );</span><br><span class="line"></span><br><span class="line">/* 调用poll函数来获取当前事件位，其实是利用它来调用注册函数ep_ptable_queue_proc（poll_wait中调用）。</span><br><span class="line">   如果fd是套接字，f_op为socket_file_ops，poll函数是</span><br><span class="line">   sock_poll()。如果是TCP套接字的话，进而会调用</span><br><span class="line">   到tcp_poll()函数。此处调用poll函数查看当前</span><br><span class="line">   文件描述符的状态，存储在revents中。</span><br><span class="line">   在poll的处理函数(tcp_poll())中，会调用sock_poll_wait()，</span><br><span class="line">   在sock_poll_wait()中会调用到epq.pt.qproc指向的函数，</span><br><span class="line">   也就是ep_ptable_queue_proc()。  */</span><br><span class="line">revents = tfile-&gt;f_op-&gt;poll(tfile, &amp;epq.pt);</span><br><span class="line"></span><br><span class="line">spin_lock(&amp;tfile-&gt;f_ep_lock);</span><br><span class="line">list_add_tail(&amp;epi-&gt;fllink,&amp;tfile-&gt;f_ep_lilnks);</span><br><span class="line">spin_unlock(&amp;tfile-&gt;f_ep_lock);</span><br><span class="line"></span><br><span class="line">ep_rbtree_insert(ep,epi); //将该epi插入到ep的红黑树中</span><br><span class="line"></span><br><span class="line">spin_lock_irqsave(&amp;ep-&gt;lock,flags);</span><br><span class="line"></span><br><span class="line">//  revents &amp; event-&gt;events：刚才fop-&gt;poll的返回值中标识的事件有用户event关心的事件发生。</span><br><span class="line"></span><br><span class="line">// !ep_is_linked(&amp;epi-&gt;rdllink)：epi的ready队列中有数据。ep_is_linked用于判断队列是否为空。</span><br><span class="line"></span><br><span class="line">/*  如果要监视的文件状态已经就绪并且还没有加入到就绪队列中,则将当前的</span><br><span class="line">epitem加入到就绪队列中.如果有进程正在等待该文件的状态就绪,则唤醒一个等待的进程。  */</span><br><span class="line">if((revents &amp; event-&gt;events) &amp;&amp; !ep_is_linked(&amp;epi-&gt;rdllink)) &#123;</span><br><span class="line"></span><br><span class="line">list_add_tail(&amp;epi-&gt;rdllink,&amp;ep-&gt;rdllist); //将当前epi插入到ep-&gt;ready队列中。</span><br><span class="line"></span><br><span class="line">/* 如果有进程正在等待文件的状态就绪，</span><br><span class="line">也就是调用epoll_wait睡眠的进程正在等待，</span><br><span class="line">则唤醒一个等待进程。</span><br><span class="line">waitqueue_active(q) 等待队列q中有等待的进程返回1，否则返回0。</span><br><span class="line">*/</span><br><span class="line">  if(waitqueue_active(&amp;ep-&gt;wq))</span><br><span class="line">   __wake_up_locked(&amp;ep-&gt;wq,TAKS_UNINTERRUPTIBLE | TASK_INTERRUPTIBLE);</span><br><span class="line"></span><br><span class="line">/*  如果有进程等待eventpoll文件本身（???）的事件就绪，</span><br><span class="line">   则增加临时变量pwake的值，pwake的值不为0时，</span><br><span class="line">   在释放lock后，会唤醒等待进程。 */</span><br><span class="line"> if(waitqueue_active(&amp;ep-&gt;poll_wait))</span><br><span class="line"> pwake++;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">spin_unlock_irqrestore(&amp;ep-&gt;lock,flags);</span><br><span class="line"></span><br><span class="line">if(pwake)</span><br><span class="line">ep_poll_safewake(&amp;psw,&amp;ep-&gt;poll_wait);  //唤醒等待eventpoll文件状态就绪的进程</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">init_poll_funcptr(&amp;epq.pt, ep_ptable_queue_proc);</span><br><span class="line">revents = tfile-&gt;f_op-&gt;poll(tfile, &amp;epq.pt);</span><br><span class="line"><span class="comment">//这两个函数将ep_ptable_queue_proc注册到epq.pt中的qproc。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">poll_table_struct</span> &#123;</span></span><br><span class="line">poll_queue_proc qproc;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> key;</span><br><span class="line">&#125;poll_table;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行f_op-&gt;poll(tfile, &amp;epq.pt)时，XXX_poll(tfile, &amp;epq.pt)函数会执行poll_wait()，poll_wait()会调用epq.pt.qproc函数，即ep_ptable_queue_proc。</span></span><br></pre></td></tr></table></figure></li><li><p>ep_ptable_queue_proc函数如下：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">/*  在文件操作中的poll函数中调用，将epoll的回调函数加入到目标文件的唤醒队列中。</span><br><span class="line">如果监视的文件是套接字，参数whead则是sock结构的sk_sleep成员的地址。  */</span><br><span class="line"></span><br><span class="line">static void ep_ptable_queue_proc(struct file *file, wait_queue_head_t *whead, poll_table *pt) &#123;</span><br><span class="line"></span><br><span class="line">/* struct ep_queue&#123;</span><br><span class="line"> poll_table pt;</span><br><span class="line"> struct epitem *epi;</span><br><span class="line">  &#125; */</span><br><span class="line"></span><br><span class="line">struct epitem *epi = ep_item_from_epqueue(pt); //pt获取struct ep_queue的epi字段。</span><br><span class="line">struct eppoll_entry *pwq;</span><br><span class="line"></span><br><span class="line">if (epi-&gt;nwait &gt;= 0 &amp;&amp; (pwq = kmem_cache_alloc(pwq_cache, GFP_KERNEL))) &#123;</span><br><span class="line"></span><br><span class="line">init_waitqueue_func_entry(&amp;pwq-&gt;wait, ep_poll_callback);</span><br><span class="line">pwq-&gt;whead = whead;</span><br><span class="line">pwq-&gt;base = epi;</span><br><span class="line">add_wait_queue(whead, &amp;pwq-&gt;wait);</span><br><span class="line">list_add_tail(&amp;pwq-&gt;llink, &amp;epi-&gt;pwqlist);</span><br><span class="line">epi-&gt;nwait++;</span><br><span class="line">&#125; else &#123;</span><br><span class="line"></span><br><span class="line">/* We have to signal that an error occurred */</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * 如果分配内存失败，则将nwait置为-1，表示</span><br><span class="line"> * 发生错误，即内存分配失败，或者已发生错误</span><br><span class="line"> */</span><br><span class="line">epi-&gt;nwait = -1;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//其中struct eppoll_entry定义如下：</span><br><span class="line">struct eppoll_entry &#123;</span><br><span class="line">   struct list_head llink;</span><br><span class="line">   struct epitem *base;</span><br><span class="line">   wait_queue_t wait;</span><br><span class="line">   wait_queue_head_t *whead;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//ep_ptable_queue_proc 函数完成 epitem 加入到特定文件的wait队列任务。</span><br><span class="line"></span><br><span class="line">/*ep_ptable_queue_proc有三个参数：</span><br><span class="line">struct file *file;              该fd对应的文件对象</span><br><span class="line">wait_queue_head_t *whead;       该fd对应的设备等待队列（同select中的mydev-&gt;wait_address）</span><br><span class="line">poll_table *pt;                 f_op-&gt;poll(tfile, &amp;epq.pt)中的epq.pt</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">在ep_ptable_queue_proc函数中，引入了另外一个非常重要的数据结构eppoll_entry。eppoll_entry主要完成epitem和epitem事件发生时的callback（ep_poll_callback）函数之间的关联。首先将eppoll_entry的whead指向fd的设备等待队列（同select中的wait_address），然后初始化eppoll_entry的base变量指向epitem，最后通过add_wait_queue将epoll_entry挂载到fd的设备等待队列上。完成这个动作后，epoll_entry已经被挂载到fd的设备等待队列。</span><br><span class="line">*/</span><br></pre></td></tr></table></figure></li><li><p>ep_poll_callback函数如下：</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">由于ep_ptable_queue_proc函数设置了等待队列的ep_poll_callback回调函数。所以在设备硬件数据到来时，硬件中断处理函数中会唤醒该等待队列上等待的进程时，会调用唤醒函数ep_poll_callback</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ep_poll_callback</span><span class="params">(<span class="keyword">wait_queue_t</span> *wait, <span class="keyword">unsigned</span> mode, <span class="keyword">int</span> sync, <span class="keyword">void</span> *key)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> pwake = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> flags;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">epitem</span> *<span class="title">epi</span> = <span class="title">ep_item_from_wait</span>(<span class="title">wait</span>);</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">eventpoll</span> *<span class="title">ep</span> = <span class="title">epi</span>-&gt;<span class="title">ep</span>;</span></span><br><span class="line"></span><br><span class="line">spin_lock_irqsave(&amp;ep-&gt;lock, flags);</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断注册的感兴趣事件</span></span><br><span class="line"><span class="comment">//#define EP_PRIVATE_BITS  (EPOLLONESHOT | EPOLLET)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//有非EPOLLONESHONT或EPOLLET事件</span></span><br><span class="line"><span class="keyword">if</span> (!(epi-&gt;event.events &amp; ~EP_PRIVATE_BITS))</span><br><span class="line"><span class="keyword">goto</span> out_unlock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (unlikely(ep-&gt;ovflist != EP_UNACTIVE_PTR)) &#123;</span><br><span class="line"><span class="keyword">if</span> (epi-&gt;next == EP_UNACTIVE_PTR) &#123;</span><br><span class="line">epi-&gt;next = ep-&gt;ovflist;</span><br><span class="line">ep-&gt;ovflist = epi;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">goto</span> out_unlock;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ep_is_linked(&amp;epi-&gt;rdllink))</span><br><span class="line"><span class="keyword">goto</span> is_linked;</span><br><span class="line"></span><br><span class="line"><span class="comment">//***关键***，将该fd加入到epoll监听的就绪链表中</span></span><br><span class="line">list_add_tail(&amp;epi-&gt;rdllink, &amp;ep-&gt;rdllist);</span><br><span class="line"></span><br><span class="line"><span class="comment">//唤醒调用epoll_wait()函数时睡眠的进程。用户层epoll_wait(...) 超时前返回。</span></span><br><span class="line"><span class="keyword">if</span> (waitqueue_active(&amp;ep-&gt;wq))</span><br><span class="line">__wake_up_locked(&amp;ep-&gt;wq, TASK_UNINTERRUPTIBLE | TASK_INTERRUPTIBLE);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (waitqueue_active(&amp;ep-&gt;poll_wait))</span><br><span class="line">pwake++;</span><br><span class="line"></span><br><span class="line"> out_unlock: spin_unlock_irqrestore(&amp;ep-&gt;lock, flags);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pwake)</span><br><span class="line">ep_poll_safewake(&amp;psw, &amp;ep-&gt;poll_wait);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">所以ep_poll_callback函数主要的功能是将被监视文件的等待事件就绪时，将文件对应的epitem实例添加到就绪队列中，当用户调用epoll_wait()时，内核会将就绪队列中的事件报告给用户。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>epoll_wait实现如下：</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">SYSCALL_DEFINE4(epoll_wait, <span class="keyword">int</span>, epfd, struct epoll_event __user *, events, <span class="keyword">int</span>, maxevents, <span class="keyword">int</span>, timeout)  &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> error;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file</span> *<span class="title">file</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">eventpoll</span> *<span class="title">ep</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 检查maxevents参数。 */</span></span><br><span class="line"><span class="keyword">if</span> (maxevents &lt;= <span class="number">0</span> || maxevents &gt; EP_MAX_EVENTS)</span><br><span class="line"><span class="keyword">return</span> -EINVAL;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 检查用户空间传入的events指向的内存是否可写。参见__range_not_ok()。 */</span></span><br><span class="line"><span class="keyword">if</span> (!access_ok(VERIFY_WRITE, events, maxevents * <span class="keyword">sizeof</span>(struct epoll_event))) &#123;</span><br><span class="line">error = -EFAULT;</span><br><span class="line"><span class="keyword">goto</span> error_return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取epfd对应的eventpoll文件的file实例，file结构是在epoll_create中创建。 */</span></span><br><span class="line">error = -EBADF;</span><br><span class="line">file = fget(epfd);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!file)</span><br><span class="line">  <span class="keyword">goto</span> error_return;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 通过检查epfd对应的文件操作是不是eventpoll_fops 来判断epfd是否是一个eventpoll文件。如果不是则返回EINVAL错误。 */</span></span><br><span class="line">error = -EINVAL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!is_file_epoll(file))</span><br><span class="line">  <span class="keyword">goto</span> error_fput;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* At this point it is safe to assume that the "private_data" contains  */</span></span><br><span class="line">ep = file-&gt;private_data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Time to fish for events ... */</span></span><br><span class="line">error = ep_poll(ep, events, maxevents, timeout);</span><br><span class="line">error_fput:</span><br><span class="line">fput(file);</span><br><span class="line"></span><br><span class="line">error_return:</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> error;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>epoll_wait调用ep_poll，ep_poll实现如下：</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ep_poll</span><span class="params">(struct eventpoll *ep, struct epoll_event __user *events, <span class="keyword">int</span> maxevents, <span class="keyword">long</span> timeout)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> res, eavail;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> flags;</span><br><span class="line"><span class="keyword">long</span> jtimeout;</span><br><span class="line"><span class="keyword">wait_queue_t</span> wait;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* timeout是以毫秒为单位，这里是要转换为jiffies时间。这里加上999(即1000-1)，是为了向上取整。 */</span></span><br><span class="line">jtimeout = (timeout &lt; <span class="number">0</span> || timeout &gt;= EP_MAX_MSTIMEO) ?MAX_SCHEDULE_TIMEOUT : (timeout * HZ + <span class="number">999</span>) / <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">retry:</span><br><span class="line">spin_lock_irqsave(&amp;ep-&gt;lock, flags);</span><br><span class="line">res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (list_empty(&amp;ep-&gt;rdllist)) &#123;</span><br><span class="line"><span class="comment">/* 没有事件，所以需要睡眠。当有事件到来时，睡眠会被ep_poll_callback函数唤醒。*/</span></span><br><span class="line">init_waitqueue_entry(&amp;wait, current); <span class="comment">//将current进程放在wait这个等待队列中。</span></span><br><span class="line">wait.flags |= WQ_FLAG_EXCLUSIVE;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 将当前进程加入到eventpoll的等待队列中，等待文件状态就绪或直到超时，或被信号中断。 */</span></span><br><span class="line">__add_wait_queue(&amp;ep-&gt;wq, &amp;wait);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (;;) &#123;</span><br><span class="line"><span class="comment">/* 执行ep_poll_callback()唤醒时应当需要将当前进程唤醒，所以当前进程状态应该为“可唤醒”TASK_INTERRUPTIBLE  */</span></span><br><span class="line">set_current_state(TASK_INTERRUPTIBLE);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 如果就绪队列不为空，也就是说已经有文件的状态就绪或者超时，则退出循环。*/</span></span><br><span class="line"><span class="keyword">if</span> (!list_empty(&amp;ep-&gt;rdllist) || !jtimeout)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 如果当前进程接收到信号，则退出循环，返回EINTR错误 */</span></span><br><span class="line"><span class="keyword">if</span> (signal_pending(current)) &#123;</span><br><span class="line">res = -EINTR;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">spin_unlock_irqrestore(&amp;ep-&gt;lock, flags);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 主动让出处理器，等待ep_poll_callback()将当前进程唤醒或者超时,返回值是剩余的时间。</span></span><br><span class="line"><span class="comment">从这里开始当前进程会进入睡眠状态，直到某些文件的状态就绪或者超时。</span></span><br><span class="line"><span class="comment">当文件状态就绪时，eventpoll的回调函数ep_poll_callback()会唤醒在ep-&gt;wq指向的等待队列中的进程。*/</span></span><br><span class="line"></span><br><span class="line">jtimeout = schedule_timeout(jtimeout);</span><br><span class="line"></span><br><span class="line">spin_lock_irqsave(&amp;ep-&gt;lock, flags);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">__remove_wait_queue(&amp;ep-&gt;wq, &amp;wait);</span><br><span class="line">set_current_state(TASK_RUNNING);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ep-&gt;ovflist链表存储的向用户传递事件时暂存就绪的文件。</span></span><br><span class="line"><span class="comment">* 所以不管是就绪队列ep-&gt;rdllist不为空，或者ep-&gt;ovflist不等于</span></span><br><span class="line"><span class="comment">* EP_UNACTIVE_PTR，都有可能现在已经有文件的状态就绪。</span></span><br><span class="line"><span class="comment">* ep-&gt;ovflist不等于EP_UNACTIVE_PTR有两种情况，一种是NULL，此时</span></span><br><span class="line"><span class="comment">* 可能正在向用户传递事件，不一定就有文件状态就绪，</span></span><br><span class="line"><span class="comment">* 一种情况时不为NULL，此时可以肯定有文件状态就绪，</span></span><br><span class="line"><span class="comment">* 参见ep_send_events()。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">eavail = !list_empty(&amp;ep-&gt;rdllist) || ep-&gt;ovflist != EP_UNACTIVE_PTR;</span><br><span class="line"></span><br><span class="line">spin_unlock_irqrestore(&amp;ep-&gt;lock, flags);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Try to transfer events to user space. In case we get 0 events and there's still timeout left over, we go trying again in search of more luck. */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 如果没有被信号中断，并且有事件就绪，但是没有获取到事件(有可能被其他进程获取到了)，并且没有超时，则跳转到retry标签处，重新等待文件状态就绪。 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!res &amp;&amp; eavail &amp;&amp; !(res = ep_send_events(ep, events, maxevents)) &amp;&amp; jtimeout)</span><br><span class="line"><span class="keyword">goto</span> retry;</span><br><span class="line"><span class="comment">/* 返回获取到的事件的个数或者错误码 */</span></span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">ep_send_events函数向用户空间发送就绪事件。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">ep_send_events()函数将用户传入的内存简单封装到ep_send_events_data结构中，然后调用ep_scan_ready_list() 将就绪队列中的事件传入用户空间的内存。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">用户空间访问这个结果，进行处理。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>结构如下</p><p>  <img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/epoll/epoll%E6%BA%90%E7%A0%81.png" alt="结构"></p></li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li><p>详细分析请<a href="http://www.cnhalo.net/2016/07/13/linux-epoll/" target="_blank" rel="noopener">点击此处</a></p></li><li><p>精简流程请<a href="http://www.hulkdev.com/posts/epoll-io" target="_blank" rel="noopener">点击此处</a></p></li><li><p>原文查看请<a href="http://www.cnblogs.com/apprentice89/p/3234677.html" target="_blank" rel="noopener">点击此处</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> I/O复用 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>glibc内存分配与回收</title>
      <link href="/2017/11/22/ptmalloc/"/>
      <url>/2017/11/22/ptmalloc/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><ul><li><p>部分基础请先看<a href="http://roux.top/2017/11/21/glibc%E5%9F%BA%E7%A1%80%E5%88%86%E6%9E%90/">此文</a></p></li><li><p>先解释一下本文中会提到的三个重要概念：<code>arena</code>，<code>bin</code>，<code>chunk</code>。三者在逻辑上的蕴含关系一般如下图所示（图中的chunk严格来说应该是Free Chunk）。</p><p>  <img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/ptmalloc/arena%E3%80%81bin%E3%80%81chunk.png" alt="分类"></p>  <a id="more"></a><ul><li><p><code>arena</code>：通过 <code>sbrk</code> 或 <code>mmap</code> 系统调用为线程分配的堆区，按线程的类型可以分为2类：</p><ul><li><p>main arena：主线程建立的arena；</p></li><li><p>thread arena：子线程建立的arena；</p></li></ul></li><li><p><code>chunk</code>：逻辑上划分的一小块内存，根据作用不同分为4类：</p><ul><li><p>Allocated chunk：即分配给用户且未释放的内存块；</p></li><li><p>Free chunk：即用户已经释放的内存块；</p></li><li><p>Top chunk</p></li><li><p>Last Remainder chunk</p></li></ul></li><li><p><code>bin</code>：一个用以保存 Free chunk 链表的表头信息的指针数组，按所悬挂链表的类型可以分为4类:</p><ul><li><p>Fast bin</p></li><li><p>Unsorted bin</p></li><li><p>Small bin</p></li><li><p>Large bin</p></li></ul></li></ul></li><li><p>实际内存中，<code>main arena</code> 和 <code>thread arena</code> 的图示如下（单堆段）:</p><p>  <img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/ptmalloc/thread_areana.png" alt></p><ul><li>其中 <code>malloc_state</code> 的数据结构描述在源代码中的位置请点这里，可以发现该数据结构中保存着 <code>fastbinsY、top、last_remainder、bins</code> 这四个分别表示 <code>Fast bin、Top chunk、Last Remainder chunk、bins（Unsorted bin、 Small bin、Large bin）</code> 的数据。</li></ul></li></ul><h4 id="Arena级分析"><a href="#Arena级分析" class="headerlink" title="Arena级分析"></a>Arena级分析</h4><ul><li><p>部分内容请参考<a href="http://roux.top/2017/11/21/arena/">此文</a></p></li><li><p>main arena中的内存申请</p><ul><li><p>main arena中的内存申请的流程如下图所示：</p><p>  <img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/ptmalloc/main%E5%87%BD%E6%95%B0arena%E7%9A%84%E7%94%B3%E8%AF%B7.png" alt></p><ul><li><p>第一次申请</p><ul><li><p>根据申请内存空间大小是否达到 <code>mmap</code> 这一系统调用的分配阈值，决定是使用 <code>sbrk</code> 系统调用 还是 <code>mmap</code> 系统调用申请堆区。一般分配的空间比申请的要大（详见此处），这样可以减少后续申请中向操作系统申请内存的次数。</p></li><li><p>举例而言，用户申请1000字节的内存，实际会通过sbrk系统调用产生 132KB 的连续堆内存区域。</p></li><li><p>然后将用户申请大小的内存返回。（本例中将返回1000字节的内存。）</p></li></ul></li><li><p>后续申请</p><ul><li><p>根据 <code>arena</code> 中剩余空间的大小决定是继续分配还是扩容，其中包含扩容部分的为 <code>top chunk</code>。</p></li><li><p>然后将用户申请大小的内存返回。</p></li></ul></li></ul></li><li><p>注意：</p><ul><li><code>top chunk</code> 不属于任何bin！只有 <code>free chunk</code> 依附于bin！</li><li>分配阈值具有默认值，但会动态调整；</li><li>扩容具体过程见库函数 <code>sYSMALLOc</code> 。</li></ul></li></ul></li><li><p>thread arena中的申请</p><ul><li><p>thread arena中的内存申请的流程如下图所示：</p><p>  <img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/ptmalloc/thread%E4%B8%ADarena%E7%9A%84%E7%94%B3%E8%AF%B7.png" alt></p><ul><li>其流程类似于main arena的，区别在于thread arena的堆内存是使用mmap系统调用产生的，而非同主线程一样可能会使用sbrk系统调用。</li></ul></li><li><p>注意：Arena的数量与线程之间并不一定是一一映射的关系</p></li></ul></li></ul><ul><li><p>内存回收</p><p>  <img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/ptmalloc/%E5%86%85%E5%AD%98%E5%9B%9E%E6%94%B6.png" alt></p><ul><li>线程释放的内存不会直接返还给操作系统，而是返还给 <code>glibc malloc</code></li></ul></li></ul><h4 id="bin级分析"><a href="#bin级分析" class="headerlink" title="bin级分析"></a>bin级分析</h4><ul><li><p>内存分配</p><ul><li><p>内存分配的流程如下图所示：</p><p>  <img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/ptmalloc/%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D.png" alt></p><ul><li><p>我们知道，内存分配的最终目的在于分配出合适大小的内存块返回给用户。在实现中即为在 <code>bin</code> 或 <code>top chunk</code> 中找到（并分割出）所需内存块，其检索的优先级从高到低分别是：</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- fastbinY</span><br><span class="line"></span><br><span class="line">- small bins</span><br><span class="line"></span><br><span class="line">- unsorted bins</span><br><span class="line"></span><br><span class="line">- large bins</span><br><span class="line"></span><br><span class="line">- top bins</span><br></pre></td></tr></table></figure></li></ul></li><li><p>注意：</p><ul><li><p><code>Fast bin、Unsorted bin、Small bin</code> 和 <code>Large bin</code> 中保存的都是用户曾经释放的内存块（可能经过合并）</p></li><li><p><code>top chunk</code> 包含 <code>Arena</code> 扩容的部分，不属于任何 <code>bin</code></p></li></ul></li></ul></li><li><p>内存回收</p><ul><li><p>内存回收的流程如下图所示：</p><p>  <img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/ptmalloc/bin%E7%BA%A7%E5%86%85%E5%AD%98%E5%9B%9E%E6%94%B6.png" alt></p><ul><li><p>我们提到了 bin 可以分为4类：<code>Fast bin</code>、<code>Unsorted bin</code>、<code>Small bin</code> 和 <code>Large bin</code>。保存这些 bin 的数据结构为<code>fastbinsY</code> 以及 <code>bins</code>：</p><ul><li><p>fastbinsY：用以保存 <code>fast bins</code>。（可索引大小16~64B的内存块）</p></li><li><p>bins：用以保存 <code>unsorted</code>、<code>small以及 large bins</code> ，共计可容纳126个：</p><ul><li><p>Bin 1 – <code>unsorted bin</code></p></li><li><p>Bin 2 to Bin 63 – <code>small bin</code>(可索引大小小于512B的内存块)</p></li><li><p>Bin 64 to Bin 126 – <code>large bin</code>（可索引大小≥512B的内存块）</p></li></ul></li></ul></li><li><p>在内存被释放的时候，被释放内存块会根据其大小而被添加入对应的bin中：</p><ul><li><p>16~64B 的内存块会被添加入 <code>fastbinY</code> 中</p></li><li><p><code>samll</code> 及 <code>large</code> 的会添加在 <code>bins</code> 中的 <code>unsorted bins</code> 中</p></li></ul></li><li><p>注意：<code>small bins</code> 和 <code>large bins</code> 中索引的内存块是在内存分配的过程中被添加在相应的 <code>bin</code> 中的</p></li></ul></li></ul></li></ul><h4 id="chunk级分析"><a href="#chunk级分析" class="headerlink" title="chunk级分析"></a>chunk级分析</h4><ul><li><p>ptmalloc 在给用户分配的空间的前后加上了一些控制信息, 用这样的方法来记录分配的信息, 以便完成分配和释放工作. 一个使用中的chuck( 使用中, 就是指还没有被free掉 ) 在内存中的样子如图所示：</p><p>  <img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/ptmalloc/ptmalloc/using_chunk.png" alt="using"></p></li><li><p>在图中, chunk 指针指向一个 chunk 的开始, 一个chunk 中包含了用户请求的内存区域和相关的控制信息. <strong>图中的 mem 指针才是真正返回给用户的内存指针</strong>。 chunk 的第二个域的最低一位为 p, 它表示前一个块是否在使用中, p 为 0则表示前一个 chunk 为空闲, 这时 chunk 的第一个域 <code>prev_size</code> 才有效, <code>prev_size</code> 表示前一个 chunk 的 <code>size</code>, 程序可以使用这个值来找到前一个 chunk 的开始. 当 p 为 1 时, 表示前一个 chunk 正在使用中, <code>prev_size</code> 无效, 程序也就不可以得到前一个 chunk 的大小. 而不能对前一个 chunk 进行任何操作. ptmalloc 分配的第一个块总是将 p 设为 1 , 以防止程序引用到不存在的区域。空闲 chunk 在内存中的结构如图所示：</p><p>  <img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/ptmalloc/ptmalloc/free_chunk.png" alt="free"></p><ul><li>当 chunk 空闲时, 原本是用户数据区的地方存储了两个指针, 指针 fd 指向后一个空闲的 chunk, 而 bk 指向前一个空闲的 chunk, ptmalloc 通过这两个指针将大小相近的 chunk 连成一个双向链表. 而不同的 chunk 链表又是通过 <code>bins</code> 或者 <code>fastbins</code> 来组织的</li></ul></li><li><p>为了使得 chunk 所占用的空间最小, ptmalloc 使用了空间复用, 一个 chunk 或者正在被使用, 或者已经被 free 掉, 所以 chunk 中的一些域可以在使用状态和空闲状态表示不同的意义, 来达到空间复用的效果。空闲时, 一个 chunk 中至少要4个 <code>size_t</code> 大小的空间, 用来存储 <code>prev_size, size , fd 和 bk</code>。 也就是 16 bytes. chuck 的大小要 align 到8 bytes. 当一个 chunk 处于使用状态时, 它的下一个 chunk 的 <code>prev_size</code> 域肯定是无效的。 所以实际上, 这个空间也可以被当前 chunk 使用. 这听起来有点不可思议, 但确实是合理空间复用的例子. 故而实际上, 一个使用中的 chunk 的大小的计算公式应该是: <code>in_use_size = ( 用户请求大小 + 8 - 4 ) align to 8 bytes</code> <strong>这里加8是因为需要存储 <code>prev_size</code> 和 <code>size</code></strong>, 但又因为<strong>向下一个 chunk 借 了4个bytes , 所以要减去4<em> </em></strong>. 最后, 因为空闲的 chunk 和使用中的 chunk 使用的是同一块空间。 所以肯定要<strong>取其中最大者作为实际的分配空间</strong>。 即最终的分配空间 <code>chunk_size = max(in_use_size, 16)</code>。 这就是当用户请求内存分配时, ptmalloc 实际需要分配的内存大小, 在后面的介绍中. 如果不是特别指明的地方, 指的都是这个经过转换的实际需要分配的内存大小, 而不是用户请求的内存分配大小.</p></li><li><p>空闲的chunk</p><ul><li><p>Bins</p><ul><li><p>用户 free 掉的内存并不是都会马上归还给系统, 相反, ptmalloc 会统一管理 heap 中的空闲的 chunk ， 当用户进行下一次分配请求时, ptmalloc 会首先试图在 heap 中空闲的 chunk 中挑选一块给用户， 这样就避免了频繁的系统调用， 降低了内存分配的开销。 ptmalloc 将 heap 中相似大小的 chunk 用双向链表链接起来， 这样的一个链表被称为一个bin，ptmalloc 使用一个数组来存储这些 bin 如下图：</p><p>  <img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/ptmalloc/ptmalloc/links_bin.png" alt="bin"></p></li><li><p>数组中的前64个 bin 称为 <code>exact bins</code>, <strong><code>exact bins</code> 中的 chunk 具有相同的大小</strong>。 两个相邻的 bin 中的 chunk 大小相差8 bytes.  <code>exact bins</code> 中的 chunk 按照最近使用顺序进行排列, 最后释放的 chunk 被链接到链表的头部, 而 allocation 是从尾部开始, 这样, 每一个 chunk 都有相同的机会被 ptmalloc 选中。 后面的 bin 被称作 <code>ordered bins</code>。 <code>ordered bins</code> 中的每一个 bin 分别包含了一个给定范围内的 chunk, 其中的 chunk 按大小序排列。 相同大小的 chunk 同样按照最近使用顺序排列. ptmalloc 使用 <code>smallest-first, best-fit</code> 的原则在空闲 <code>ordered bins</code> 中查找合适的 chunk.</p></li><li>当空闲的 chunk 被链接到bin中的时候, ptmalloc 会把表示该 chunk 是否处于使用中的标志 p 设为 0 (注意, 这个标志实际上处在下一个 chunk 中), 同时 ptmalloc 还会检查它前后的 chunk 是否也是空闲的, 如果是的话, ptmalloc 会首先把它们合并为一个大的 chunk, 然后将合并后的 chunk 放到 bin 中。 要注意的是, 并不是所有的 chunk 被释放后就立即被放到bin中。 ptmalloc 为了提高分配的速度, 会把一些小的的 chunk 先放到一个叫做 fastbin的容器内。</li></ul></li><li><p>Fastbins</p><ul><li>一般的情况是, 程序在运行时会经常需要分配和释放一些较小的内存空间. 当 allocator(分配器) 合并了相邻的几个小的 chunk 之后, 也许马上就会有另一个小块内存的请求, 这样 allocator 又需要从大的空闲内存中分出一块出来, 这样无疑是比较低效的, 故而, ptmalloc 中在分配过程中引入了 <code>fastbins</code>, 不大于 <code>max_fast (72 bytes)</code> 的 chunk 被 free 后, 首先会被放到 <code>fastbins</code> 中, <code>fastbins</code> 中的 chunk 并不改变它的使用标志 p。 这样也就无法将它们合并, 当需要给用户分配的 chunk 小于或等于 <code>max_fast</code> 时, ptmalloc 首先会在 <code>fastbins</code> 中查找相应的空闲块, 然后才会去查找 <code>bins</code> 中的空间 chunk. 在某个特定的时候, ptmalloc 会遍历 <code>fastbins</code> 中的 chunk, 将相邻的空闲 chunk 进行合并, 并将合并后的 chunk 放到 <code>bins</code> 中去。</li></ul></li><li><p>Unsorted Bins</p><ul><li>如果被用户释放的 chunk 大于 <code>max_fast</code>, 则按上面的叙述它应该会被放到 <code>bins</code> 中. 但实际上, ptmalloc 还引入了一个称为 <code>unsorted bins</code> 的队列. 这些大于 <code>max_fast</code> 的chunk 首先会被放到 <code>unsorted bins</code> 队列中, 在进行 malloc 操作的时候, 如果在 <code>fastbins</code> 中没有找到合适的 chunk, 则 ptmalloc 会先在 <code>unsorted bins</code> 中查找合适的空闲 chunk, 然后才查找 <code>bins</code>。 如果 <code>unsorted bins</code> 不能满足分配要求. malloc 便会将 <code>unsorted bins</code> 中的 chunk 放到 <code>bins</code> 中, 然后再在 <code>bins</code> 中继续进行查找和分配过程。 从这个过程可以看出来, <code>unsorted bins</code> 可以看做是 <code>bins</code> 的一个缓冲区, 增加它只是为了加快分配的速度, 忽略它对我们理解 ptmalloc 没有太大的影响。</li></ul></li><li><p>例外的 chunk</p><ul><li><p>并不是所有的 chunk 都按照上面的方式来组织, 实际上, 有两种例外情况.</p></li><li><p>top chunk</p><ul><li>在前面一直提到, ptmalloc 会预先分配一块较大的空闲内存(也就是所为的 heap), 而通过管理这块内存来响应用户的需求, 因为内存是按地址从低向高进行分配的, 在空闲内存的最高处, 必然存在着一块空闲 chunk, 叫做 <code>top chunk</code>。 当 <code>bins</code> 和 <code>fastbins</code> 都不能满足分配需要的时候, ptmalloc 会设法在 <code>top chunk</code> 中分出一块内存给用户, 如果 <code>top chunk</code> 本身不够大, 则 ptmalloc 会适当的增加它的大小(也就增加了 heap 的大小)。 以满足分配的需要, 实际上, <code>top chunk</code> 在分配时总是在 <code>fastbins 和 bins</code> 之后被考虑, 所以, 不论 <code>top chunk</code> 有多大, 它都不会被放到 <code>fastbins</code> 或者是 <code>bins</code> 中.</li></ul></li><li><p>mmaped chunk</p><ul><li>当需要分配的 chunk 足够大, 而且 <code>fastbins</code> 和 <code>bins</code> 都不能满足要求, 甚至 <code>top chunk</code> 本身也不能满足分配需求时, ptmalloc 会使用 mmap 来直接使用内存映射来将页映射到进程空间。 这样分配的 chunk 在被 free 时将直接解除映射, 于是就将内存归还给了系统, 再次对这样的内存区的引用将导致一个 <code>segmentation fault</code> 错误. 这样的 chunk 也不会包含在任何 <code>bin</code> 中。</li></ul></li></ul></li></ul></li><li><p>下图即内存分配的详细过程图：</p><p>  <img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/ptmalloc/chunk%E5%88%86%E6%9E%90.png" alt></p></li></ul><h4 id="sbark与mmap"><a href="#sbark与mmap" class="headerlink" title="sbark与mmap"></a>sbark与mmap</h4><ul><li><p>此处只是简单的介绍下，详细的可以参考本博客以前的文章(首页搜索mmap)</p></li><li><p>sbark</p><p>  <img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/ptmalloc/ptmalloc/sbark%E4%B8%8Emmap.png" alt></p><ul><li><code>.bss</code> 段之上的这块分配给用户程序的空间被称为 heap (堆). <code>start_brk</code> 指向 heap 的开始, 而 <code>brk</code> 指向 heap 的顶部. 可以使用系统调用 <code>brk 和 sbrk</code> 来增加标识 heap 顶部的 <code>brk</code> 值, 从而线性的增加分配给用户的 heap 空间. 在使用malloc之前, <code>brk</code> 的值等于 <code>start_brk</code>, 也就是说 heap 大小为0. ptmalloc 在开始时, 若请求的空间小于 <code>DEFAULT_MMAP_THRESHOLD</code> (128K bytes)时, ptmalloc 会调用 <code>sbrk</code> 增加一块大小为 ( 128 KB + chunk_size ) align 4K 的空间作为heap. 这就是前面所说的 ptmalloc 所维护的分配空间, 当用户请求内存分配时, 首先会在这个区域内找一块合适的 <code>chunk</code> 给用户. 当用户释放了 heap 中的 <code>chunk</code> 时, ptmalloc 又会使用 <code>fastbins</code> 和 <code>bins</code> 来组织空闲 <code>chunk</code>. 以备用户的下一次分配. 若需要分配的 <code>chunk</code> 大小小于 <code>DEFAULT_MMAP_THRESHOLD</code>, 而 heap 空间又不够, 则此时 ptmalloc 会通过 <code>sbrk</code> 调用来增加 heap 值, 也就是增加 <code>top chunk</code> 的大小, 每次 heap 增加的值都会 align 到4k bytes</li></ul></li><li><p>mmap</p><ul><li>当用户的请求超过 <code>DEFAULT_MMAP_THRESHOLD</code> , 并且使用 <code>sbrk</code> 分配失败的时候, <code>ptmalloc</code> 会尝试使用 <code>mmap</code> 直接映射一块内存到进程内存空间. 使用 <code>mmap</code> 直接映射的 <code>chunk</code> 在释放时直接解除映射, 而不再属于进程的内存空间. 任何对该内存的访问都会产生段错误. 而在 heap 中分配的空间则可能会留在进程内存空间内, 还可以再次引用(当然是很危险的)</li></ul></li><li><p>注意</p><ul><li><p>从操作系统的角度看，进程的内存分配由两个系统调用完成：brk和mmap。brk是将数据段(.data)的最高地址指针 <code>_edata</code> 往高地址推，mmap 是在进程的虚拟地址空间中找一块空闲的。其中，<strong>mmap 分配的内存由 munmap 释放，内存释放时将立即归还操作系统</strong>；<strong>而brk分配的内存需要等到高地址内存释放以后才能释放</strong>。也就是说，如果先后通过 brk 申请了 A 和 B 两块内存，在 B 释放之前，A 是不可能释放的，仍然被进程占用，通过 top 查看<strong>疑似内存泄露</strong>。默认情况下，<strong>大于等于128KB的内存分配会调用mmap/mummap，小于128KB的内存请求调用sbrk</strong>（可以通过设置M_MMAP_THRESHOLD来调整）</p></li><li><p>Glibc的新特性：<code>M_MMAP_THRESHOLD</code> 可以动态调整。<code>M_MMAP_THRESHOLD</code> 的值在 128KB 到 32MB(32位机) 或者 64MB(64位机) 之间动态调整，假如每次申请并释放一个大小为 2MB 的内存后，那么<code>M_MMAP_THRESHOLD</code> 的值会被调整为 2M 到2M + 4K之间的一个值。示例如下：</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span>* no_used = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">2</span> * <span class="number">1024</span> * <span class="number">1024</span>];</span><br><span class="line"><span class="built_in">memset</span>(no_used, <span class="number">0xfe</span>, <span class="number">2</span> * <span class="number">1024</span> * <span class="number">1024</span>);</span><br><span class="line"><span class="keyword">delete</span>[] no_used;</span><br><span class="line"><span class="comment">// M_MMAP_THRESHOLD的值调整为 2M 到 2M + 4K 之间的一个值，后续申请 &lt;= 2 * 1024 * 1024 的内存块都会走 sbrk 而不是 mmap</span></span><br><span class="line"><span class="comment">//而sbrk需要等到高地址内存释放以后低地址内存才能释放,会造成疑似内存泄漏的现象</span></span><br></pre></td></tr></table></figure></li><li><p>mmap调用是会导致进程产生缺页中断的，为了提高性能，可以设置如下：</p><ul><li>将动态内存改为静态，比如采用内存池技术或者启动的时候给每个线程分配一定大小，以后直接使用；</li><li><p>禁止mmap内存调用，禁止Glibc内存缩紧将内存归还系统，Glibc相当于实现了一个内存池功能。只需要在进程启动的时候加入两行代码：</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mallopt(M_MMAP_MAX, <span class="number">0</span>); <span class="comment">// 禁止malloc调用mmap分配内存</span></span><br><span class="line">mallopt(M_TRIM_THRESHOLD, <span class="number">0</span>); <span class="comment">// 禁止内存缩进，sbrk申请的内存释放后不会归还给操作系统</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h4 id="maolloc"><a href="#maolloc" class="headerlink" title="maolloc"></a>maolloc</h4><ul><li><p>ptmalloc 的响应用户内存分配要求的具体步骤为:</p><ul><li><p>1、获取分配区的锁，为了防止多个线程同时访问同一个分配区，在进行分配之前需要取得分配区域的锁。线程先查看线程私有实例中是否已经存在一个分配区，如果存在尝试对该分配区加锁，如果加锁成功，使用该分配区分配内存，否则，该线程搜索分配区循环链表试图获得一个空闲（没有加锁）的分配区。如果所有的分配区都已经加锁，那么 ptmalloc 会开辟一个新的分配区，把该分配区加入到全局分配区循环链表和线程的私有实例中并加锁，然后使用该分配区进行分配操作。开辟出来的新分配区一定为非主分配区，因为主分配区是从父进程那里继承来的。开辟非主分配区时会调用 mmap() 创建一个 <code>sub-heap</code>，并设置好 <code>top chunk</code>。</p></li><li><p>2、将用户的请求大小转换为实际需要分配的chunk空间大小。</p></li><li><p>3、判断所需分配 chunk 的大小是否满足 <code>chunk_size &lt;= max_fast (max_fast 默认为 64B)</code> ，如果是的话，则转下一步，否则跳到第5步。</p></li><li><p>4、首先尝试在 <code>fast bins</code> 中取一个所需大小的 chunk 分配给用户。如果可以找到，则分配结束。否则转到下一步。</p></li><li><p>5、判断所需大小是否处在 <code>small bins</code> 中，即判断 <code>chunk_size &lt; 512B</code> 是否成立。如果 chunk 大小处在 <code>small bins</code> 中，则转下一步，否则转到第6步。</p></li><li><p>6、根据所需分配的chunk的大小，找到具体所在的某个 <code>small bin</code>，从该 bin 的尾部摘取一个恰好满足大小的 chunk。若成功，则分配结束，否则，转到下一步。</p></li><li><p>7、到了这一步，说明需要分配的是一块大的内存，或者 <code>small bins</code> 中找不到合适的 chunk。于是，ptmalloc首先会遍历 <code>fast bins</code> 中的chunk，将相邻的 chunk 进行合并，并链接到 <code>unsorted bin</code> 中，然后遍历 <code>unsorted bin</code> 中的 chunk，如果 <code>unsorted bin</code> 只有一个 chunk，并且这个 chunk 在上次分配时被使用过，并且所需分配的 chunk 大小属于 <code>small bins</code>，并且 chunk 的大小大于等于需要分配的大小，这种情况下就直接将该 chunk 进行切割，分配结束，否则将根据 chunk 的空间大小将其放入 <code>small bins</code> 或是 <code>large bins</code> 中，遍历完成后，转入下一步。</p></li><li><p>8、到了这一步，说明需要分配的是一块大的内存，或者 <code>small bins</code> 和 <code>unsorted bin</code> 中都找不到合适的 chunk，并且 <code>fast bins</code> 和 <code>unsorted bin</code> 中所有的 chunk 都清除干净了。从 <code>large bins</code> 中按照 <code>smallest-first，best-fit</code> 原则，找一个合适的 chunk，从中划分一块所需大小的 chunk，并将剩下的部分链接回到 <code>bins</code> 中。若操作成功，则分配结束，否则转到下一步。</p></li><li><p>9、如果搜索 <code>fast bins</code> 和 <code>bins</code> 都没有找到合适的 chunk，那么就需要操作 <code>top chunk</code> 来进行分配了。判断 <code>top chunk</code> 大小是否满足所需 chunk 的大小，如果是，则从 <code>top chunk</code> 中分出一块来。否则转到下一步。</p></li><li><p>10、到了这一步，说明 <code>top chunk</code> 也不能满足分配要求，所以，于是就有了两个选择: 如果是主分配区，调用 sbrk()，增加 <code>top chunk</code> 大小；如果是非主分配区，调用 mmap() 来分配一个新的 <code>sub-heap</code>，增加 <code>top chunk</code> 大小；或者使用 mmap() 来直接分配。在这里，需要依靠 chunk 的大小来决定到底使用哪种方法。判断所需分配的 chunk 大小是否大于等于 mmap 分配阈值，如果是的话，则转下一步，调用 mmap() 分配，否则跳到第12步，增加 <code>top chunk</code> 的大小。</p></li><li><p>11、使用 mmap 系统调用为程序的内存空间映射一块 <code>chunk_size align 4kB</code> 大小的空间。 然后将内存指针返回给用户。</p></li><li><p>12、判断是否为第一次调用 malloc，若是主分配区，则需要进行一次初始化工作，分配一块大小为 <code>(chunk_size + 128KB) align 4KB</code> 大小的空间作为初始的 heap。若已经初始化过了，主分配区则调用 sbrk() 增加 heap 空间，分主分配区则在 <code>top chunk</code> 中切割出一个 chunk，使之满足分配需求，并将内存指针返回给用户。</p></li></ul></li></ul><h4 id="free"><a href="#free" class="headerlink" title="free"></a>free</h4><ul><li><p>free() 函数接受一个指向分配区域的指针作为参数, 释放该指针所指向的 chunk. 而具体的释放方法则看该 chunk 所处的位置和该 chunk 的大小. free()函数的工作步骤如下:</p><ul><li><p>1、free() 函数同样首先需要获取分配区的锁, 来保证线程安全.</p></li><li><p>2、判断传入的指针是否为0, 如果为0, 则什么都不做, 直接r eturn. 否则转下一步:</p></li><li><p>3、判断所需释放的 chunk 是否为 mmaped chunk, 如果是, 则直接释放 mmaped chunk, 解除内存空间映射. 该空间不再有效. 释放完成. 否则跳到下一步.</p></li><li><p>4、判断 chunk 的大小和所处的位置, 若 <code>chunk_size &lt;= max_fast</code> , 并且 chunk 并不位于 heap 的顶部, 也就是说并不与 <code>top chunk</code> 相邻, 则转到下一步, 否则跳到第6步. (因为与 top chunk 相邻的小 chunk 也和 <code>top chunk</code> 进行合并, 所以这里不仅需要判断大小, 还需要判断相邻情况.)</p></li><li><p>5、将 chunk 放到 <code>fastbins</code> 中, chunk 放入到 <code>fastbins</code> 中时, 并不设置该 chunk 使用位. 也不与相邻的 chunk 进行合并. 只是放进去, 如此而已. 做实验的结果还发现 ptmalloc 放入 <code>fastbins</code> 中的 chunk 中的用户数据去全置为 0. 但是在源代码中找不到相关的代码. 这一步做完之后释放便结束了, 程序从 free() 函数中返回..</p></li><li><p>6、判断前一个 chunk 是否处在使用中, 如果前一个块也是空闲块, 则合并. 并转下一步.</p></li><li><p>7、判断当前释放 chunk 的下一个块是否为 <code>top chunk</code>, 如果是, 则转第9步, 否则转下一步.</p></li><li><p>8、判断下一个 chunk 是否处在使用中, 如果下一个 chunk 也是空闲的. 则合并, 并将合并后的 chunk 放到 <code>bins</code> 中. 注意, 这里在合并的过程中, 要更新 chunk 的大小, 以反映合并后的 chunk 的大小. 并转到第10步.</p></li><li><p>9、如果执行到这一步, 说明释放了一个与 <code>top chunk</code> 相邻的chunk. 则无论它有多大, 都将它与 <code>top chunk</code> 合并, 并更新 <code>top chunk</code> 的大小等信息. 转下一步.</p></li><li><p>10、判断合并后的 chunk 的大小是否大于 <code>FASTBIN_CONSOLIDATION_THRESHOLD</code>, 如果是的话, 则会触发进行 <code>fastbins</code> 的合并操作, <code>fastbins</code> 中的 chunk 将被遍历, 并于相邻的空闲 chunk 进行合并, 合并后的 chunk 会被放到 <code>bins</code> 中. <code>fastbins</code> 将变为空, 操作完成之后转下一步.</p></li><li><p>11、判断 <code>top chunk</code> 的大小是否大于 <code>DEFAULT_TRIM_THERESHOLD</code>. 如果是的话, 则会试图归还 <code>top chunk</code> 中的一部分给操作系统. 但是最先分配的 128KB 的空间是不会归还. ptmalloc 会一直控制这部分内存. 用于响应用户的分配请求. 做完这一步之后, 释放结束, 从 free 函数退出.</p></li></ul></li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li><p>详细剖析请<a href="http://pwn4.fun/2016/04/11/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3glibc-malloc/" target="_blank" rel="noopener">点击此处</a></p></li><li><p>线程相关<a href="http://blog.jobbole.com/103993/" target="_blank" rel="noopener">点击此处</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> OS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内存分配 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>glibc内存分配基础</title>
      <link href="/2017/11/21/glibc%E5%9F%BA%E7%A1%80%E5%88%86%E6%9E%90/"/>
      <url>/2017/11/21/glibc%E5%9F%BA%E7%A1%80%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><ul><li>对于很多开发者来说，内存分配和回收似乎一直都是操作系统的事情。特别是现在大多高级语言都自带 GC, 让程序员这方面的意识会更加薄弱。可能有很大一部分人认为, 我要 100byte 的空间, 那么系统就只会给我 100byte。</li></ul><a id="more"></a><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><ul><li><p>下面先来看一段代码:</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">fn</span><span class="params">(<span class="keyword">void</span> *args)</span> </span>&#123;</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">100</span>); <span class="comment">// 申请 100 byte</span></span><br><span class="line">sleep(<span class="number">128</span>);  <span class="comment">// 休息 128s,为了方便查看内存进程使用</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">num = <span class="number">16</span>;</span><br><span class="line"><span class="keyword">pthread_t</span> pids[num];</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">pthread_create(&amp;pids[i], <span class="literal">NULL</span>, fn, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">pthread_join(pids[i], <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>代码很简单: 启动 16 个线程，每个线程申请 100 byte。理论上内存使用应该是 100 byte * 16 = 1600 byte, 加上一些元数据也就 K 级别的内存。而我们在 Centos(64bit) 跑一下，发现内存使用的情况如下:</p><p><img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/ptmalloc/%E5%9F%BA%E7%A1%80%E5%88%86%E6%9E%90/%E5%86%85%E5%AD%98%E4%BD%BF%E7%94%A8.jpg" alt="使用"></p><ul><li>我们发现占用了 1G 的虚拟内存，看一下虚拟内存的分布，发现里面多了一堆 64M 的内存分配，而且数量刚好等于线程数。</li></ul></li><li><p>那么问题就来了，为什么每个线程都分配了一个 64M 呢。</p></li></ul></li></ul><h4 id="Arena-分配区"><a href="#Arena-分配区" class="headerlink" title="Arena(分配区)"></a>Arena(分配区)</h4><ul><li><p>导致分配这么多内存的原因其实在之前的<a href="http://roux.top/2017/11/21/arena/">一篇文章</a>已经介绍。glibc 为了提高的多核场景的内存分配效率，当并发分配内存的时候，会产生多个内存分配区。每个分配区会每次向操作系统 “批发” 一片内存(64bit机器的大小是 64M), 然后再基于批发过来的内存上面分配内存，这个就是上面为什么会申请这么多 64M 内存块的原因。</p></li><li><p>这个问题并不是本文讨论的重点，只是为了引出操作系统分配内存方式在特定的场景会和我们想象的有很大的差别，进一步来细说 glibc 的内存分配方式。</p></li></ul><h4 id="sub-heap"><a href="#sub-heap" class="headerlink" title="sub-heap"></a>sub-heap</h4><ul><li><p>每个进程内部只有一个主分配区以及可能会有多个非主分配区(non-arena), 主分配区分配虚拟内存可以使用 <code>sbrk</code> 以及 <code>mmap</code>， 而非主分配区是同 <code>sub-heap(子堆)</code> 来管理内存。</p></li><li><p>非主分配区每次会向操作系统申请一块固定大小的内存(64bit机器默认是64M)，这个固定的堆大小就叫做 <code>sub-heap</code>。每次分配内存先从<code>sub-heap</code> 里面分配，如果不够再从操作系统申请一个新的 <code>sub-heap</code>, 这些 <code>sub-heap</code> 通过链表连接起来。</p><p>  <img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/ptmalloc/%E5%9F%BA%E7%A1%80%E5%88%86%E6%9E%90/sub_heap.jpg" alt="sub_heap"></p></li></ul><h4 id="小块内存"><a href="#小块内存" class="headerlink" title="小块内存"></a>小块内存</h4><ul><li><p>glibc 的内存分配并不是我们所想的那样，申请 100byte 就从向操作系统申请 100byte， 释放就马上归还给操作系统，而是做了一层 “缓存”, 避免频繁的触发系统调用而导致程序性能下降。</p></li><li><p>每个分配区都有一个 “缓存”，”缓存” 的几个基本组成部分是:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- fast bins</span><br><span class="line"></span><br><span class="line">- unsorted bins</span><br><span class="line"></span><br><span class="line">- small bins &amp; large bins</span><br><span class="line"></span><br><span class="line">- top chunk</span><br></pre></td></tr></table></figure><ul><li><p><code>fast bins</code> 是用来加速小块分配。当分配或者释放小块内存(阀值默认是 64byte)， 会优先从 <code>fast bins</code> 里面查找，如果没有再到其他的缓存区域查找。这个阀值可以通过 <code>M_MXFAST</code> 来设置，最大是 80byte.</p></li><li><p><code>unsorted bins</code> 用来存放，大于 <code>fast bins</code> 阀值的内存块合并后的块，并在特定的时机会把这些内存块整理放到 <code>small bins, large bins</code>..</p></li><li><p><code>small bins &amp; large bins</code> 和 <code>memcached</code> 的 <code>slabclass</code> 角色类似，<code>small bins</code> 的各个 bin 的内存块是等长的，但 <code>large bins</code> 同一个 <code>bin</code> 里面的内存块并不是等长的。</p><ul><li><p><code>small bins</code> 每个 bin 之间差是 8byte，最小的是 16byte, 接着是 24byte, 32byte… 最大是 512 byte</p></li><li><p><code>large bins</code> 差依次为 64B、512B、4096B、32768B、262144B</p></li></ul></li><li><p><code>top chunk</code> 我们内存分配是从 <code>sub-heap</code> 分配出来，<code>sub-heap</code> 剩余未分配的部分就叫 <code>top-chunk</code>。内存分配会从上面那些 bin 优先分配，如果无法满足需求再通过 <code>top-chunk</code> 分配。</p></li></ul></li><li><p>如果 <code>top-chunk</code> 空间不足，就会创建一个新的 <code>sub-heap</code>, 然后把新 <code>sub-heap</code> 的开始位置设置为 <code>top-chunk</code>.</p><p>  <img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/ptmalloc/%E5%9F%BA%E7%A1%80%E5%88%86%E6%9E%90/%E5%B0%8F%E5%9D%97%E5%86%85%E5%AD%98.jpg" alt="小块内存"></p></li></ul><h4 id="大块内存"><a href="#大块内存" class="headerlink" title="大块内存"></a>大块内存</h4><ul><li><p>上面说到内存分配是通过 <code>sub-heap</code> 来分配，而 <code>sub-heap</code> 是固定大小的空间，那万一我申请的内存比这个怎么办？</p></li><li><p>glibc 可以设置 <code>MMAP_THRESHOLD</code> ，当超过这个阀值内存分配不是走 <code>sub-heap</code> 来分配, 而是通过 mmap 来分配内存。释放内存的时候直接通过 unmmap 直接把内存归还给操作系统。</p></li><li><p>需要注意的点是， mmap 分配匿名内存页是会初始化这些内存页，这对性能会有一些损耗。不太适合不断的 mmap 和 unmmap。</p></li></ul><h4 id="出处"><a href="#出处" class="headerlink" title="出处"></a>出处</h4><ul><li><a href="http://www.hulkdev.com/posts/glibc-basic" target="_blank" rel="noopener">http://www.hulkdev.com/posts/glibc-basic</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> OS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内存分配 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>glibc内存分配之arena</title>
      <link href="/2017/11/21/arena/"/>
      <url>/2017/11/21/arena/</url>
      
        <content type="html"><![CDATA[<h4 id="分配区"><a href="#分配区" class="headerlink" title="分配区"></a>分配区</h4><ul><li><p>内存分配器启动默认初始化一个分配区，我们叫主分配区。一般内存分配会从主分配区进行分配，但对于多线程来说，每次分配都要等待其他线程分配完成，这个效率是非常低的。</p><ul><li><p>为了解决这个问题引入子分配区，子分配区和主分配区构成一个环形链表。</p><p>  <img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/ptmalloc/arena/arena-list.jpg" alt="arena"></p></li></ul></li></ul><a id="more"></a><ul><li><p>分配内存的时候，遍历链表，看哪个分配区没有加锁，说明这个分配区没有被占用，直接使用。如果所有的分配区全部被使用，就创建一个新的分配区。</p></li><li><p>代码实现在 <code>arena.c</code> 的 <code>arena_get</code> 函数:</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> arena_get(ptr, size) do &#123; \</span></span><br><span class="line">Void_t *vptr = <span class="literal">NULL</span>; \</span><br><span class="line">     <span class="comment">// 优先判断线程私有变量的分配区是否被占用</span></span><br><span class="line">   ptr = (mstate)tsd_getspecific(arena_key, vptr); \</span><br><span class="line">   <span class="keyword">if</span>(ptr &amp;&amp; !mutex_trylock(&amp;ptr-&gt;mutex)) &#123; \</span><br><span class="line">       THREAD_STAT(++(ptr-&gt;stat_lock_direct)); \</span><br><span class="line">   &#125; <span class="keyword">else</span> \</span><br><span class="line">       <span class="comment">// 线程私有变量的分配区被占用, 用 arena_get2 获取分配区</span></span><br><span class="line">       ptr = arena_get2(ptr, (size)); \</span><br><span class="line">   &#125; <span class="keyword">while</span>(<span class="number">0</span>)</span><br></pre></td></tr></table></figure></li><li><p>每个线程的私有变量会存放一个分配区指针，分配时先判断这个分配区是否已经被占用。</p><ul><li>如果未被占用，直接返回这个分配区</li><li><p>线程私有变量的分配区被占用，使用 <code>arena_get2</code> 来获取可用的分配区</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">arena_get2(mstate a_tsd, <span class="keyword">size_t</span> size)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历已有的分配区链表，尝试找到没有被占用的分配区</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(!mutex_trylock(&amp;a-&gt;mutex)) &#123;</span><br><span class="line">THREAD_STAT(++(a-&gt;stat_lock_loop));</span><br><span class="line">tsd_setspecific(arena_key, (Void_t *)a);</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line">a = a-&gt;next;</span><br><span class="line">&#125; <span class="keyword">while</span>(a != a_tsd);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果没有找到空闲的分配区，则新建一个新的分配区</span></span><br><span class="line">a = _int_new_arena(size);</span><br><span class="line"><span class="keyword">if</span>(!a)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新分配区指针放到线程私有变量</span></span><br><span class="line">tsd_setspecific(arena_key, (Void_t *)a);</span><br><span class="line"><span class="comment">// 新分配区加入分配区链表</span></span><br><span class="line">mutex_init(&amp;a-&gt;mutex);</span><br><span class="line">err = mutex_lock(&amp;a-&gt;mutex); <span class="comment">/* remember result */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Add the new arena to the global list.  */</span></span><br><span class="line">(<span class="keyword">void</span>)mutex_lock(&amp;list_lock);</span><br><span class="line">a-&gt;next = main_arena.next;</span><br><span class="line">       atomic_write_barrier ();</span><br><span class="line">main_arena.next = a;</span><br><span class="line">(<span class="keyword">void</span>)mutex_unlock(&amp;list_lock);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>arena_get2</code> 的实现很简单，先从分配区链表分配，如果失败，创建新的分配区。也就是说如果在不做限制的情况下， N 个线程就可能会有 N 个分配区。</p></li></ul></li></ul><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><ul><li><p>我们一般分配虚拟内存可以有两种方式，一种是直接调用 sbrk 系统调用来分配内存，另外一种方式是通过 mmap 来分配一块虚拟内存。 对于主分配区两种分配方式都可以使用，而对于子分配区，则是每次通过 mmap 来申请一大块内存，这个是这两种分配方式的主要区别。</p></li><li><p>在 32位的机器上，子分配区每次申请的 1M 大小的虚拟内存，64 位每次申请 64M。</p></li></ul><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ul><li><p>是否可以不管线程个数多少，都将线程与 arena 的个数做一一映射呢？答案是 NO！某些应用程序可能有很多线程（大于 CPU 个数），在这种情况下，如果我们给每个线程配一个 arena 简直是找麻烦，而且很没意义。所以呢，我们应用程序的 arena 数目受制于系统中 CPU 个数：</p><ul><li>32位：2 * CPU核数</li><li>64位：8 * CPU核数</li></ul></li></ul><h4 id="出处"><a href="#出处" class="headerlink" title="出处"></a>出处</h4><ul><li><a href="http://www.hulkdev.com/posts/glibc-arena" target="_blank" rel="noopener">http://www.hulkdev.com/posts/glibc-arena</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> OS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内存分配 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>epoll函数</title>
      <link href="/2017/11/20/epoll%E5%87%BD%E6%95%B0/"/>
      <url>/2017/11/20/epoll%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><ul><li><p>epoll是什么</p><ul><li><p>epoll 是Linux下多路复用IO接口 <a href="http://roux.top/2017/11/18/select%E5%87%BD%E6%95%B0/">select</a>/<a href="http://roux.top/2017/11/17/poll%E5%87%BD%E6%95%B0/">poll</a> 的增强版本，它能显著提高程序在大量并发连接中只有少量活跃的情况下的系统CPU利用率，因为它会复用文件描述符集用来传递结果而不用迫使开发者每次等待事件之前都必须重新准备要被侦听的文件描述符集合，另一点原因就是获取事件的时候，它无须遍历整个被侦听的描述符集，只要遍历那些被内核IO事件异步唤醒而加入Ready队列的描述符集合就行了。</p><a id="more"></a></li><li>epoll除了提供 select/poll 那种IO事件的电平触发 （Level Triggered）外，还提供了边沿触发（Edge Triggered），这就使得用户空间程序有可能缓存IO状态，减少 <code>epoll_wait/epoll_pwait</code> 的调用，提高应用程序效率。</li></ul></li></ul><h4 id="epoll函数"><a href="#epoll函数" class="headerlink" title="epoll函数"></a>epoll函数</h4><ul><li><p>说明：epoll对IO接口进行多路复用，提高CPU的利用率</p></li><li><p>头文件：<code>#include &lt;sys/epoll.h&gt;</code></p></li><li><p>函数1：<code>int epoll_create1(int flags);</code>(向内核注册并打开一个 epoll 描述符)</p><ul><li><p>这个函数是在linux 2.6.27中加入的，它和 epoll_create 差不多，不同的是 epoll_create1 函数的参数是 flag，当 flag 是 0 时，表示和 epoll_create 函数完全一样，不需要 size 的提示了。</p><ul><li><p>当 <code>flag = EPOLL_CLOEXEC</code>，创建的epfd会设置<code>FD_CLOEXEC</code>(一般使用这种)</p><ul><li>FD_CLOEXEC：它是 fd 的一个标识说明，用来设置文件 close-on-exec 状态的。当 close-on-exec 状态为 0 时，调用 exec 时，fd <strong>不会被关闭</strong>；状态非零时则<strong>会被关闭</strong>，这样做可以防止 fd 泄露给执行 exec 后的进程。</li></ul></li><li><p>当 <code>flag = EPOLL_NONBLOCK</code>，创建的 epfd 会设置为非阻塞</p></li></ul></li><li><p><code>int epoll_create(int size);</code></p><ul><li><p>创建一个 epoll 的句柄，size用来告诉内核这个监听的数目最大值。</p></li><li><p>当创建好 epoll 句柄后，它就是会占用一个 fd 值，所以在使用完 epoll 后，必须调用 close() 关闭，否则可能导致 fd 被耗尽。</p></li><li><p>注意：是数量的最大值，不是 fd 的最大值(通知内核需要监听 size 个fd)。</p></li><li><p>自从Linux2.6.8版本以后，size值其实是没什么用的，不过要大于0，因为内核可以动态的分配大小，所以不需要 size 这个提示了。</p></li></ul></li><li><p>为什么使用 <code>epoll_create1</code> 函数而不用以前的 <code>epoll_create</code> 函数：</p><ul><li><code>epoll_create</code> 的参数 size 是老版本的实现，<strong>使用的是 hash 表</strong>, size 应该是用来算 bucket 数目，后面因为<strong>使用红黑树</strong>，这个参数不再使用, 可以忽略。</li></ul></li><li><p>返回值：成功返回一个非负的文件描述符，出错返回-1，并设置errno：</p><ul><li>EINVAL : 无效的标志</li><li>EMFILE : 用户打开的文件超过了限制</li><li>ENFILE : 系统打开的文件超过了限制</li><li>ENOMEM : 没有足够的内存完成当前操作</li></ul></li></ul></li><li><p>函数2：<code>int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event);</code>(epoll 的事件注册函数)</p><ul><li><p>epfd参数：<code>epoll_create1</code> 函数返回的的 epoll 描述符</p></li><li><p>op参数：操作值(想要注册的动作)</p><ul><li>EPOLL_CTL_ADD： 注册目标fd到epfd中，同时关联内部event到fd上</li><li>EPOLL_CTL_MOD： 修改已经注册到fd的监听事件</li><li>EPOLL_CTL_DEL： 从epfd中删除/移除已注册的fd，event可以被忽略，也可以为NULL</li></ul></li><li><p>fd参数：需要监听的套接字描述符</p></li><li><p>event参数：设定监听事件的结构体</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">union</span> epoll_data &#123;</span><br><span class="line">    <span class="keyword">void</span>        *ptr;</span><br><span class="line">    <span class="keyword">int</span>          fd;</span><br><span class="line">    <span class="keyword">__uint32_t</span>   u32;</span><br><span class="line">    <span class="keyword">__uint64_t</span>   u64;</span><br><span class="line">&#125; <span class="keyword">epoll_data_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> &#123;</span></span><br><span class="line">    <span class="keyword">__uint32_t</span>   events; <span class="comment">/* Epoll events */</span></span><br><span class="line">    <span class="keyword">epoll_data_t</span> data;   <span class="comment">/* User data variable */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><p>data是一个联合体，能够存储fd或其它数据，我们需要根据自己的需求定制。events表示监控的事件的集合，是一个状态值，通过状态位来表示，可以设置如下事件：</p><ul><li>EPOLLIN ：表示对应的文件描述符可以读（包括对端SOCKET正常关闭）；</li><li>EPOLLOUT：表示对应的文件描述符可以写；</li><li>EPOLLPRI：表示对应的文件描述符有紧急的数据可读（这里应该表示有带外数据到来）；</li><li>EPOLLERR：表示对应的文件描述符发生错误；</li><li>EPOLLHUP：表示对应的文件描述符被挂断；(并不代表对端结束了连接,通常情况下 EPOLLHUP 表示的是本端挂断)</li><li>EPOLLET： 将EPOLL设为边缘触发(Edge Triggered)模式，这是相对于水平触发(Level Triggered)来说的。</li><li>EPOLLONESHOT：只监听一次事件，当监听完这次事件之后，就会把这个fd从epoll的队列中删除。如果还需要继续监听这个socket的话，需要再次把这个fd加入到EPOLL队列里</li></ul></li></ul></li><li><p>返回值：成功返回0，失败返回-1，并设置errno：</p><ul><li>EBADF : epfd 或者 fd 不是一个有效的文件描述符</li><li>EEXIST : op 为 EPOLL_CTL_ADD，但 fd 已经被监控</li><li>EINVAL : epfd 是无效的 epoll 文件描述符</li><li>ENOENT : op 为 EPOLL_CTL_MOD 或者 EPOLL_CTL_DEL，并且 fd 未被监控</li><li>ENOMEM : 没有足够的内存完成当前操作</li><li>ENOSPC : epoll 实例超过了 <code>/proc/sys/fs/epoll/max_user_watches</code> 中限制的监听数量</li></ul></li></ul></li><li><p>函数3：<code>int epoll_wait(int epfd, struct epoll_event *events, int maxevents, int timeout);</code> <code>int epoll_pwait(int epfd, struct epoll_event *events, int maxevents, int timeout,  const sigset_t *sigmask);</code></p><ul><li><p>epfd参数：epoll 的描述符( <code>epoll_create1</code> 函数的返回值)</p></li><li><p>events参数：events 指针携带有 <code>epoll_data_t</code> 数据</p></li><li><p>maxevents参数：告诉内核 events 有多大，该值必须大于0，但是这个 maxevents 的值不能大于创建 <code>epoll_create()</code> 时的 <code>size</code></p></li><li><p>timeout参数(毫秒)：表示超时时间。0 表示不等待立即返回，-1 代表永久阻塞，大于 0 表示等待的最大时间</p></li><li><p><code>epoll_pwait(since linux 2.6.19)</code>允许一个应用程序安全的等待，直到 fd 设备准备就绪，或者捕获到一个信号量。其中 <code></code>sigmask 表示要捕获的信号量。</p></li><li><p>返回值：成功返回准备好事件要求的描述符的个数，返回0代表在超时时间内没有准备好的描述符；失败返回 -1 并设置 errno:</p><ul><li>EBADF：epfd 不是一个有效的描述符</li><li>EFAULT：events 指向的内存区域没有写的权限</li><li>EINTR：在事件发生任何请求或超时过期之前，调用被信号处理程序中断</li><li>EINVAL：epfd 不是一个 epoll 描述符，或者 maxevents 参数小于或等于 0</li></ul></li></ul></li><li><p>示例：</p></li><li><p>这里使用伪代码，具体实现的代码请<a href="https://github.com/paulRoux/socket/tree/master/%E6%B5%8B%E8%AF%95/epoll" target="_blank" rel="noopener">移步</a></p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">epfd = epoll_create1(EPOLL_CLOEXEC);</span><br><span class="line">event.events = EPOLLET | EPOLLIN;</span><br><span class="line">event.data.fd = serverfd;</span><br><span class="line">epoll_ctl(epfd, EPOLL_CTL_ADD, serverfd, &amp;event);</span><br><span class="line"><span class="comment">// 主循环</span></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="comment">// 这里的timeout很重要，实际使用中灵活调整</span></span><br><span class="line">    count = epoll_wait(epfd, &amp;events, MAXEVENTS, timeout);</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; count; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(events[i].events &amp; EPOLLERR || events[i].events &amp; EPOLLHUP)</span><br><span class="line">            <span class="comment">// 处理错误</span></span><br><span class="line">        <span class="keyword">if</span>(events[i].data.fd == serverfd)</span><br><span class="line">            <span class="comment">// 为接入的连接注册事件</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(events[i].events &amp; EPOLLIN)</span><br><span class="line">            <span class="comment">// 处理可读的缓冲区</span></span><br><span class="line">            read(events[i].data.fd, buf, len);</span><br><span class="line">            event.events = EPOLLET | EPOLLOUT;</span><br><span class="line">            event.data.fd = events[i].data.fd;</span><br><span class="line">            epoll_ctl(epfd, EPOLL_CTL_MOD, events[i].data.fd, &amp;event);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="comment">// 处理可写的缓冲区</span></span><br><span class="line">            write(events[i].data.fd, buf, len);</span><br><span class="line">            <span class="comment">// 后续可以关闭fd或者MOD至EPOLLOUT</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><ul><li><p>为什么用epoll</p><ul><li><p>支持监听大数目的socket描述符</p><ul><li><p>一个进程内，select能打开的fd是有限制的，由宏<code>FD_SETSIZE</code> 设置，默认值是 1024.在某些时候，这个数值是远远不够用的。解决办法有两种，一是修改宏然后重新编译内核，但与此同时会引起网络效率的下降；二是使用多进程来解决，但是创建多个进程是有代价的，而且进程间数据同步没有多线程间方便。</p></li><li><p>epoll没有这个限制，它所支持的最大 fd 上限远远大于1024，在1GB内存的机器上是10万左右（具体数目可以cat/proc/sys/fs/file-max查看）</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//我的是centos6.9，内存2GB</span></span><br><span class="line">[roux@Vkey mnt]$ cat /proc/sys/fs/file-max </span><br><span class="line"><span class="number">187510</span></span><br><span class="line">[roux@Vkey mnt]$</span><br></pre></td></tr></table></figure></li></ul></li></ul><ol start="2"><li><p>效率的提高</p><ul><li><p>select 函数每次都当监听的套接组有事件产生时就会返回，但却不能将有事件产生的套接字筛选出来，而是改变其在套接组的标志量，所以每次监听到事件，都需要将套接组整个遍历一遍。时间复杂度是O(n)。当fd数目增加时，效率会线性下降。</p></li><li><p>epoll 函数每次会将监听套结字中产生事件的套接字加到一列表中，然后我们可以直接对此列表进行操作，而没有产生事件的套接字会被过滤掉，极大的提高了IO效率。这一点尤其在套接字监听数量巨大而活跃数量很少的时候很明显。</p></li></ul></li><li><p>内存处理</p><ul><li>不管是哪种I/O机制，都无法避免fd在操作过程中拷贝的问题，而 epoll 使用了 mmap (是指文件/对象的内存映射，被映射到多个内存页上)，所以同一块内存(共享内存)就可以避免这个问题(详细看前面的零拷贝技术及 mmap)。</li></ul></li></ol></li><li><p>epoll的工作方式</p><ul><li><p>epoll有两种触发模式，LT(Level-Triggered，水平触发)，ET(Edge–Triggered边缘触发)。其中LT编程模型和poll是一样的。</p></li><li><p>LT(level triggered) 是<strong>默认/缺省的工作方式</strong>，同时支持  <code>block</code> 和 <code>no_block socket</code>。这种工作方式下，内核会通知你一个 fd 是否就绪，然后才可以对这个就绪的 fd 进行I/O操作。就算你没有任何操作，系统还是会继续提示 fd 已经就绪，不过这种工作方式出错会比较小，传统的 select/poll 就是这种工作方式的代表。(水平触发，只要有数据可以读，不管怎样都会通知)</p></li><li><p>ET(edge-triggered) 是<strong>高速工作方式<em> </em></strong>，<strong>仅支持 <code>no_block socket</code>(非阻塞)</strong>，这种工作方式下，当 fd 从未就绪变为就绪时，内核会通知 fd 已经就绪，并且内核认为你知道该 fd 已经就绪，不会再次通知了，除非因为某些操作导致fd就绪状态发生变化。如果一直不对这个 fd 进行I/O操作，导致 fd 变为未就绪时，内核同样不会发送更多的通知，因为 only once。所以这种方式下，出错率比较高，需要增加一些检测程序。(边缘触发，只有状态发生变化时才会通知，可以理解为电平变化)</p></li><li><p>举例：</p><ul><li><p>LT 水平触发</p><p>  儿子：“妈妈，我收到了5000元压岁钱。”<br>  妈妈：“恩，省着点花！”<br>  儿子：“妈妈，我今天买了个ipad，花了3000元。”<br>  妈妈：“噢，这东西真贵。”<br>  儿子：“妈妈，我今天买好多吃的，还剩1000元。”<br>  妈妈：“用完了这些钱，我可不会再给你了。”<br>  儿子：“妈妈，那1000元我没花，零花钱够用了。”<br>  妈妈：“恩，这才是明智的做法！”<br>  儿子：“妈妈，那1000元我没花，我要攒起来。”<br>  妈妈：“恩，加油！”</p><ul><li>是不是没完没了？只要儿子手中还有钱，他就会一直汇报，这就是LT模式。有钱就是1，没钱就是0，那么只要儿子还有钱，这种事件就是1-&gt;1类型事件，自然是LT。</li></ul></li><li><p>ET 边缘触发</p><p>  儿子：“妈妈，我收到了5000元压岁钱。”<br>  妈妈：“恩，省着点花！”<br>  儿子：“……”<br>  妈妈：“你倒是说话啊？压岁钱呢？！”</p><ul><li>这个就是ET模式，简洁得有点过头，但很高效！虽然妈妈可能并不这么认为。。。儿子从没钱到有钱，是一个0-&gt;1的过程，因此为ET。儿子和妈妈说过自己拿到了压岁钱就完事了，至于怎么花钱，还剩多少钱，一概不说。</li></ul></li></ul></li><li><p>LT 模式和 ET 模式的区别是 ET 模式是高电平到低电平切换的时候或者低电平切换高电平才会触发。</p><ul><li><p>EPOLLIN事件:</p><ul><li>内核的输入缓冲区 为空 低电平</li><li>内核的输入缓冲区 不为空 高电平（一直触发EPOLLIN）</li></ul></li><li><p>EPOLLOUT事件:</p><ul><li>内核发送缓冲区不满 高电平(一直触发EPOLLOUT)</li><li>内核发送缓冲区满 低电平</li></ul></li></ul></li><li><p>关于 LT 及 ET 的详细知识请<a href="http://blog.csdn.net/shell_albert/article/details/8438357" target="_blank" rel="noopener">点击此处</a></p></li></ul></li><li><p>什么时候关注EPOLLOUT事件呢？(如果在得到一个套接字马上关注，就会出现busy loop的状态)</p><ul><li><p>LT 模式：在write的时候关注EPOLLOUT事件，如果数据没有写完，我们就需要把未发送完的数据添加到应用层缓冲区，然后关注这个连接套接字的EPOLLOUT事件，等到EPOLLOUT事件到来，取出应用层缓冲区的数据发送，如果应用层缓冲区数据发送完成，取消关注EPOLLOUT事件。</p><p>  <img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/epoll/epoll%E7%9A%84LT%E6%A8%A1%E5%BC%8F%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B.png" alt="LT"></p></li><li><p>ET 模式：ET表示边缘触发，是电平从低到高或者从高到低才会触发。我们一开始就可以关注EPOLLIN事件和EPOLLOUT事件，不会出现busy loop。所以当接收缓冲区处于高电平状态时，一定要一次性把数据全部读完。因为如果一次没有读完，接收缓冲区仍然处于高电平状态，下次不会在触发EPOLLIN事件。同理，发送缓冲区的处理类似。</p><p>  <img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/epoll/epoll%E7%9A%84ET%E6%A8%A1%E5%BC%8F%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B.png" alt></p></li></ul></li></ul><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ul><li><p>epoll 和 select/poll 本质上是一样的，性能上提升较大，都属于I/O多路复用模型（I/O Multiplexing Model），和阻塞，非阻塞两大I/O模型是并列的。只是对于事件处理函数角度而言，看起来是异步的（实际上是同步的回调而已）。和 epoll 组合使用大多数是非堵塞I/O方式，这时候就是同步非堵塞，也可以有堵塞I/O的情况。比如多线程server可以在 accept 上采用堵塞I/O，accept后的 socket 用 epoll 管理非堵塞的读写事件。</p></li><li><p>使用 epoll 一定要加 <code>定时器</code>，否则后患无穷</p></li><li><p>联合体 data 中的那个 ptr 是很有用的，只不过这就意味着你将该对象的生命周期交给了 epoll，不排除会有潜在bug的影响，需要辅以timeout</p></li><li><p>多线程环境下使用epoll，多考虑 <code>EPOLLONESHOT</code></p></li><li><p>EPOLLLT 也是一个不错的选择，除非你的框架能够确保每次事件触发后，都读/写至 EAGAIN</p></li><li><p>使用前请仔细阅读 <code>man 7 epoll</code></p></li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li><p>epoll 实现机制(简单介绍)</p><ul><li><p>epoll在被内核初始化时（操作系统启动），同时会开辟出epoll自己的内核高速cache区，用于安置每一个我们想监控的socket。<strong>这些socket会以红黑树的形式保存在内核cache里，以支持快速的查找、插入、删除。</strong></p></li><li><p>这个内核高速cache区，就是建立连续的物理内存页，然后在之上建立 slab 层。<strong>简单的说，就是物理上分配好你想要的size的内存对象，每次使用时都是使用空闲的已分配好的对象。</strong></p></li><li><p>epoll的高效就在于，当我们调用 <code>epoll_ ctl</code> 往里塞入百万个句柄时，<code>epoll_ wait</code> 仍然可以飞快的返回，并有效的将发生事件的句柄给我们用户。</p><ul><li>这是由于我们在调用 <code>epoll_ create</code> 时，内核除了帮我们在epoll文件系统里建了个file结点，在内核cache里建了个红黑树用于存储以后 <code>epoll_ ctl</code> 传来的socket外，<strong>还会再建立一个list链表，用于存储准备就绪的事件.</strong></li></ul></li><li><p>当 <code>epoll_ wait</code> 调用时，仅仅观察这个list链表里有没有数据即可。有数据就返回，没有数据就sleep，等到timeout时间到后即使链表没数据也返回。所以，<code>epoll_wait</code> 非常高效。 而且，通常情况下即使我们要监控百万计的句柄，大多一次也只返回很少量的准备就绪句柄而已，所以，<code>epoll_wait</code> 仅需要从内核态copy少量的句柄到用户态而已。</p></li><li><p><strong>那么，这个准备就绪list链表是怎么维护的呢？</strong></p><ul><li><p>当我们执行 <code>epoll_ctl</code> 时，除了把socket放到epoll文件系统里file对象对应的红黑树上之外，<strong>还会给内核中断处理程序注册一个回调函数</strong>，告诉内核，如果这个句柄的中断到了，就把它放到准备就绪list链表里。</p></li><li><p>所以，当一个socket上有数据到了，内核在把网卡上的数据copy到内核中后就来把socket插入到准备就绪链表里了。<strong>如此，一颗红黑树，一张准备就绪句柄链表，少量的内核cache，就帮我们解决了大并发下的socket处理问题。</strong></p></li></ul></li><li><p><strong>执行 <code>epoll_ create</code> 时，创建了红黑树和就绪链表，执行 <code>epoll_ ctl</code> 时，如果增加socket句柄，则检查在红黑树中是否存在，存在立即返回，不存在则添加到树干上，然后向内核注册回调函数，用于当中断事件来临时向准备就绪链表中插入数据。执行 <code>epoll_wait</code> 时立刻返回准备就绪链表里的数据即可。</strong></p></li></ul></li><li><p>三种IO复用函数的分析</p><p>  <img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/epoll/%E4%B8%89%E7%A7%8D%E5%87%BD%E6%95%B0%E7%9A%84%E5%AF%B9%E6%AF%94.png" alt="对比"></p><p>  <img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/epoll/%E4%B8%89%E7%A7%8D%E5%87%BD%E6%95%B0%E7%9A%84%E6%95%88%E7%8E%87.png" alt="效率"></p><p>  <img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/epoll/%E4%B8%89%E7%A7%8D%E5%87%BD%E6%95%B0%E7%9A%84%E8%BF%9E%E6%8E%A5%E6%95%B0.png" alt="链接"></p><p>  <img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/epoll/%E4%B8%89%E7%A7%8D%E5%87%BD%E6%95%B0%E7%9A%84%E6%B6%88%E6%81%AF%E4%BC%A0%E9%80%92.png" alt="传递"></p></li></ul><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><p>链接：</p><ul><li><a href="http://blog.csdn.net/lixungogogo/article/details/52226479" target="_blank" rel="noopener">http://blog.csdn.net/lixungogogo/article/details/52226479</a></li><li><a href="https://www.cppfans.org/1418.html" target="_blank" rel="noopener">https://www.cppfans.org/1418.html</a></li><li><a href="https://www.yuanmas.com/info/mZzgRrExOK.html" target="_blank" rel="noopener">https://www.yuanmas.com/info/mZzgRrExOK.html</a></li><li><a href="http://blog.lucode.net/linux/epoll-tutorial.html" target="_blank" rel="noopener">http://blog.lucode.net/linux/epoll-tutorial.html</a></li><li><a href="http://www.liudesheng.com/2016/12/13/%E5%A4%A7%E5%B9%B6%E5%8F%91%E6%9C%8D%E5%8A%A1%E5%99%A8/%E5%9B%9B%E3%80%81epoll%E5%87%BD%E6%95%B0/" target="_blank" rel="noopener">http://www.liudesheng.com/2016/12/13/%E5%A4%A7%E5%B9%B6%E5%8F%91%E6%9C%8D%E5%8A%A1%E5%99%A8/%E5%9B%9B%E3%80%81epoll%E5%87%BD%E6%95%B0/</a></li><li><a href="https://www.cppfans.org/1417.html" target="_blank" rel="noopener">https://www.cppfans.org/1417.html</a></li><li><a href="http://blog.csdn.net/xiajun07061225/article/details/9250579" target="_blank" rel="noopener">http://blog.csdn.net/xiajun07061225/article/details/9250579</a></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> I/O复用 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>nil/Nil/NULL/NUL/nullptr/NSNull</title>
      <link href="/2017/11/19/NULL/"/>
      <url>/2017/11/19/NULL/</url>
      
        <content type="html"><![CDATA[<h4 id="nil-Nil-NULL-NUL-nullptr-NSNull"><a href="#nil-Nil-NULL-NUL-nullptr-NSNull" class="headerlink" title="nil/Nil/NULL/NUL/nullptr/NSNull"></a>nil/Nil/NULL/NUL/nullptr/NSNull</h4><ul><li><p>如何表示“不存在”</p><ul><li><p>要理解不存在这个概念，首先需要理解存在。如何定义“存在”这个概念是一个哲学问题，海德格尔在《存在与时间》中提及了存在的不可定义性。原文如下：</p><ul><li>『存在』这个概念是不可定义的。这是从它的最高普遍性推论出来的。这话有道理——既然定义来自最近的种加属差。确实不能把『存在』理解为存在者，令存在者归属于存在并不能使『存在』得到规定。</li></ul></li><li><p>对于哲学来说，表示存在或者不存在这个概念是比较困难的问题。对于数学和计算机科学来说，表示不存在要简单的多，就是用存在的概念表示不存在概念。</p></li></ul></li></ul><a id="more"></a><ul><li><p>NULL</p><ul><li><p>NULL一般是这么定义的：</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NULL    0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NULL    ((void *)0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></li><li><p>可以看出在C和C++中 NULL 的定义不同。在C语言中，不需要考虑函数重载等问题，所以直接简单定义为一个 0 地址的 <code>void*</code> 就行了。由于C++引入了更严格的类型检查，所以把直接 <code>void*</code> 类型的值赋给一个有类型指针是不行的，编译器会报错(eg:malloc)。但同时C++要保持和C的兼容性，所以在C++里，NUL L直接定义为整型 0。</p></li></ul></li><li><p>nullptr</p><ul><li><p>将 NULL 直接定义成 0 一般是没问题的，但是假如遇到函数重载：</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">foo</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">void</span> *ptr)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">foo</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>如果这样调用 <code>foo(1,NULL)</code> 就会有歧义，因为 NULL 是指针类型，但是同时 NULL 也是整型。同样的，这样的问题在模版类型推导的时候也会出现：</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">int</span> <span class="title">foo</span>(<span class="title">T</span> <span class="title">a</span>);</span></span><br></pre></td></tr></table></figure></li><li><p>如果调用 <code>foo(NULL)</code> 是应该推导出 <code>int foo(int a)</code> 呢还是 <code>int foo(void *a)</code> 呢。为了解决这个问题。C++11引入了一个新的概念： nullptr。nullptr 的实现如下：</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">nullptr_t</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">operator</span> <span class="title">T</span>*() <span class="title">const</span></span></span><br><span class="line"><span class="class">&#123;</span> <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">C</span>, <span class="title">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">operator</span> <span class="title">T</span> <span class="title">C</span>:</span>:*() <span class="keyword">const</span></span><br><span class="line">&#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">void</span> <span class="keyword">operator</span>&amp;() <span class="keyword">const</span>;</span><br><span class="line">&#125; <span class="literal">nullptr</span> = &#123;&#125;;</span><br></pre></td></tr></table></figure></li><li><p>其实 nullptr 和 swift 中的 Optional 的实现非常像了。看了nullptr 的实现，可以自己写一个 Optional 的实现。</p></li></ul></li><li><p>nil</p><ul><li><p>nil 和 NULL 语义不同，但是在底层实现上是等价的。需要注意的是，ni l可以向对象发送消息，如果消息有返回值，会有以下几种情况：</p><ul><li>如果一个方法返回值是一个对象，那么发送给 nil 的消息将返回0(nil)。</li><li>如果方法返回值为指针类型，其指针大小为小于或者等于<code>sizeof(void*)，float，double，long double</code> 或者 <code>long long</code> 的整型标量，发送给nil的消息将返回0。</li><li>如果方法返回值为结构体，发送给nil的消息将返回0。结构体中各个字段的值将都是0。其他的结构体数据类型将不是用0填充的。</li><li>如果方法的返回值不是上述提到的几种情况，那么发送给 nil 的消息的返回值将是未定义的。</li></ul></li></ul></li><li><p>Nil</p><ul><li><p>Nil是OC类类型的书面空值，对应Class类型对象。底层实现和 nil 是一样的。Nil的定义如下：</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> Nil</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">if</span> __has_feature(cxx_nullptr)</span></span><br><span class="line"><span class="meta">#   <span class="meta-keyword">define</span> Nil nullptr</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#   <span class="meta-keyword">define</span> Nil __DARWIN_NULL</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> nil</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">if</span> __has_feature(cxx_nullptr)</span></span><br><span class="line"><span class="meta">#   <span class="meta-keyword">define</span> nil nullptr</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#   <span class="meta-keyword">define</span> nil __DARWIN_NULL</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>NSNull</p><ul><li>在OC的集合中中nil代表集合的结束，所以不能在集合里存储nil。所以就有了NSNull用一个类来表示空值。一般用来表示集合中的空对象。</li></ul></li><li><p>NUL</p><ul><li>用来表示字符串的结束。注意：标准C中无定义。</li></ul></li></ul><h4 id="出处"><a href="#出处" class="headerlink" title="出处"></a>出处</h4><ul><li>转载：<a href="http://www.liudesheng.com/2016/02/12/nil0Nil0NULL0null0nullptr0NSNull/" target="_blank" rel="noopener">http://www.liudesheng.com/2016/02/12/nil0Nil0NULL0null0nullptr0NSNull/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>select函数</title>
      <link href="/2017/11/18/select%E5%87%BD%E6%95%B0/"/>
      <url>/2017/11/18/select%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="select函数"><a href="#select函数" class="headerlink" title="select函数"></a>select函数</h4><ul><li><p>说明： select()用来等待文件描述词状态的改变</p></li><li><p>头文件： <code>#include &lt;sys/time.h&gt;</code>  <code>#include &lt;sys/types.h&gt;</code>   <code>#include &lt;unistd.h&gt;</code></p></li><li><p>原型： <code>int select(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout);</code></p>  <a id="more"></a><ul><li><p>nfds参数： 参数nfds 代表集合中所有文件描述符的范围，即所有文件描述符的最大值加1(一般系统最大的为1024，可以使用 ulimit 查看)</p></li><li><p>readfds参数： 指向fd_set结构的指针，这个集合中应该包括文件描述符，我们是要监视这些文件描述符的读变化的，即我们关心是否可以从这些文件中读取数据了，如果这个集合中有一个文件可读，select就会返回一个大于0的值，表示有文件可读，如果没有可读的文件，则根据timeout参数再判断是否超时，若超出timeout的时间，select返回0，若发生错误返回负值。可以传入NULL值，表示不关心任何文件的读变化。</p></li><li><p>writefds参数：指向 fd_set 结构的指针，这个集合中应该包括文件描述符，我们是要监视这些文件描述符的写变化的，即我们关心是否可以向这些文件中写入数据了，如果这个集合中有一个文件可写，select就会返回一个大于0的值，表示有文件可写，如果没有可写的文件，则根据timeout再判断是否超时，若超出 timeout 的时间，select返回0，若发生错误返回负值。可以传入NULL值，表示不关心任何文件的写变化。</p><ul><li><p>struct fd_set结构体：可以理解为一个集合，这个集合中存放的是文件描述符(file descriptor)，即文件句柄，这可以是我们所说的普通意义的文件，当然Unix下任何设备、管道、FIFO等都是文件形式，全部包括在内，所以，毫无疑问，一个socket就是一个文件，socket句柄就是一个文件描述符。fd_set集合可以通过一些宏由人为来操作:</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 清除描述词组set 中相关fd 的位 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FD_CLR</span><span class="params">(<span class="keyword">int</span> fd, fd_set *<span class="built_in">set</span>)</span></span>;</span><br><span class="line"><span class="comment">/* 测试描述词组set 中相关fd 的位是否为真 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">FD_ISSET</span><span class="params">(<span class="keyword">int</span> fd, fd_set *<span class="built_in">set</span>)</span></span>;</span><br><span class="line"><span class="comment">/* 设置描述词组set 中相关fd 的位 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FD_SET</span><span class="params">(<span class="keyword">int</span> fd, fd_set *<span class="built_in">set</span>)</span></span>;</span><br><span class="line"><span class="comment">/* 清除描述词组set 的全部位 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FD_ZERO</span><span class="params">(fd_set *<span class="built_in">set</span>)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>fd_set集合通常是一个整数数组，其中每个整数中的每一位对应一个描述符，如：</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">fd_set <span class="built_in">set</span>;  <span class="comment">//定义一个描述符集合</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化描述符集，如果不初始化，则作为自动变量分配的描述符集将发生不可预期的后果</span></span><br><span class="line">FD_ZERO(&amp;<span class="built_in">set</span>);  <span class="comment">//则set用位表示是0000,0000。</span></span><br><span class="line"></span><br><span class="line">FD_SET(fd, &amp;<span class="built_in">set</span>);  <span class="comment">//若fd＝5,则set变为0001,0000(第5位置为1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//若再加入fd＝2，fd=1,则set变为0001,0011</span></span><br><span class="line">FD_SET(<span class="number">2</span>, &amp;<span class="built_in">set</span>);</span><br><span class="line">FD_SET(<span class="number">1</span>, &amp;<span class="built_in">set</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//maxfd为指定的待测试最大描述符个数(增大效率，减轻额外负担)</span></span><br><span class="line"><span class="keyword">int</span> nready = select(maxfd+<span class="number">1</span>, &amp;<span class="built_in">set</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)  <span class="comment">//阻塞等待</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//若fd=1, fd=2上都发生可读事件，则select返回，此时set变为0000,0011。</span></span><br><span class="line">FD_ISSET(fd, &amp;<span class="built_in">set</span>)  <span class="comment">//对需要关心的描述符进行测试，是否有所关心的事情发生</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//没有事件发生的fd=5需要被清空。</span></span><br><span class="line">FD_CLR(fd, &amp;<span class="built_in">set</span>);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>errorfds参数：同上面两个参数的意图，用来监视文件错误异常。</p></li><li><p>timeout参数：select的超时时间，这个参数至关重要，它可以使select处于三种状态</p><ul><li><p>struct timeval结构体</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">timeval</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">long</span> tv_sec;   <span class="comment">/* 秒 */</span></span><br><span class="line">    <span class="keyword">long</span> tv_usec;  <span class="comment">/* 微秒 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>若将NULL以形参传入，即不传入时间结构，就是将select置于阻塞状态，一定等到监视文件描述符集合中某个文件描述符发生变化为止；</p></li><li>若将时间值设为0秒0毫秒，就变成一个纯粹的非阻塞函数，不管文件描述符是否有变化，都立刻返回继续执行，文件无变化返回0，有变化返回一个正值；</li><li>timeout的值大于0，这就是等待的超时时间，即select在timeout时间内阻塞，超时时间之内有事件到来就返回了，否则在超时后不管怎样一定返回，返回值同上述。</li></ul></li></ul></li><li><p>返回值：</p><ul><li>传递给 select 函数的参数会告诉内核：<ul><li>我们所关心的文件描述符</li><li>对每个描述符，我们所关心的状态。(我们是要想从一个文件描述符中读或者写，还是关注一个描述符中是否出现异常)</li><li>我们要等待多长时间。(我们可以等待无限长的时间，等待固定的一段时间，或者根本就不等待)</li></ul></li><li>从 select 函数返回后，内核告诉我们一下信息：<ul><li>对我们的要求已经做好准备的描述符的个数</li><li>对于三种条件哪些描述符已经做好准备.(读，写，异常)</li></ul></li></ul></li><li><p>错误代码：执行成功则返回文件描述词状态已改变的个数, 如果返回0 代表在描述词状态改变前已超过timeout 时间, 当有错误发生时则返回-1, 错误原因存于errno, 此时参数readfds, writefds, exceptfds 和timeout的值变成不可预测</p><ul><li>EBADF： 文件描述词为无效的或该文件已关闭</li><li>EINTR： 此调用被信号所中断</li><li>EINVAL： 参数nfds 为负值.</li><li>ENOMEM： 核心内存不足</li></ul></li><li><p>示例：</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//服务器</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/select.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _FD_NUM_  32</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _BACK_LOG_ 5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> arr_fd[_FD_NUM_];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">start_up</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sock = socket(AF_INET,SOCK_STREAM,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(sock == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">"sock"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">local</span>;</span></span><br><span class="line">    local.sin_family = AF_INET;</span><br><span class="line">    local.sin_port = htons(<span class="number">8888</span>);</span><br><span class="line">    inet_aton(<span class="string">"127.0.0.1"</span>,&amp;local.sin_addr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(bind(sock,(struct sockaddr*)&amp;local,<span class="keyword">sizeof</span>(local)) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">"bind"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(listen(sock,_BACK_LOG_) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">"listen"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sock;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sock = start_up();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"server socket is: %d\n"</span>,sock);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">client</span>;</span></span><br><span class="line">    <span class="keyword">socklen_t</span> client_len = <span class="keyword">sizeof</span>(client);</span><br><span class="line"></span><br><span class="line">    fd_set read_set;</span><br><span class="line">    <span class="keyword">int</span> max_fd = sock;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//array init</span></span><br><span class="line">    <span class="built_in">memset</span>(arr_fd,<span class="number">-1</span>,_FD_NUM_);</span><br><span class="line">    arr_fd[<span class="number">0</span>] = sock;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        FD_ZERO(&amp;read_set);<span class="comment">//clear</span></span><br><span class="line">        <span class="comment">//set read_set &amp;&amp; find max_fd</span></span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; _FD_NUM_;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr_fd[i] &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                FD_SET(arr_fd[i],&amp;read_set);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(arr_fd[i] &gt; max_fd)</span><br><span class="line">            &#123;</span><br><span class="line">                max_fd = arr_fd[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"max_fd: %d\n"</span>,max_fd);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//struct timeval timeout = &#123;5,0&#125;;</span></span><br><span class="line">        <span class="comment">//BLOCK wait</span></span><br><span class="line">        <span class="keyword">switch</span>(select(max_fd + <span class="number">1</span>,&amp;read_set,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:<span class="comment">//timeout</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"server timeout\n"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">-1</span>:<span class="comment">//error</span></span><br><span class="line">                perror(<span class="string">"select"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; _FD_NUM_;i++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"arr_fd : %d\n"</span>,arr_fd[i]);</span><br><span class="line">                        <span class="keyword">if</span>(arr_fd[i] &lt; <span class="number">0</span>)</span><br><span class="line">                          <span class="keyword">continue</span>;</span><br><span class="line">                        <span class="comment">//accept client's connect</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(arr_fd[i] == sock &amp;&amp; FD_ISSET(arr_fd[i],&amp;read_set))</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">int</span> new_sock = accept(arr_fd[i],(struct sockaddr*)&amp;client,&amp;client_len);</span><br><span class="line">                            <span class="comment">//connect failed</span></span><br><span class="line">                            <span class="keyword">if</span>(new_sock &lt; <span class="number">0</span>)</span><br><span class="line">                            &#123;</span><br><span class="line">                                perror(<span class="string">"accept"</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="built_in">printf</span>(<span class="string">"Get a connect...\n"</span>);</span><br><span class="line">                            <span class="comment">//insert new_fd</span></span><br><span class="line">                            <span class="keyword">for</span>(j = <span class="number">0</span>;j &lt; _FD_NUM_;j++)</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="keyword">if</span>(arr_fd[j] == <span class="number">-1</span>)</span><br><span class="line">                                &#123;</span><br><span class="line">                                  arr_fd[j] = new_sock;</span><br><span class="line">                                  <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="built_in">printf</span>(<span class="string">"Insert new_sock is : %d\n"</span>,new_sock);</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span>(j == _FD_NUM_)</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="built_in">printf</span>(<span class="string">"socket array is full\n"</span>);</span><br><span class="line">                                close(new_sock);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//other socket</span></span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">for</span>(i = <span class="number">1</span>;i &lt; _FD_NUM_;i++)</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="keyword">if</span>(arr_fd[i] &gt; <span class="number">0</span> &amp;&amp; FD_ISSET(arr_fd[i],&amp;read_set))</span><br><span class="line">                                &#123;</span><br><span class="line">                                    <span class="keyword">char</span> buf[<span class="number">1024</span>];</span><br><span class="line">                                    <span class="built_in">memset</span>(buf,<span class="string">'\0'</span>,<span class="keyword">sizeof</span>(buf));</span><br><span class="line">                                    <span class="keyword">ssize_t</span> size = read(arr_fd[i],buf,<span class="keyword">sizeof</span>(buf) - <span class="number">1</span>);</span><br><span class="line">                                    <span class="keyword">if</span>(size == <span class="number">0</span>)</span><br><span class="line">                                    &#123;</span><br><span class="line">                                        <span class="built_in">printf</span>(<span class="string">"clien release\n"</span>);</span><br><span class="line">                                        close(arr_fd[i]);</span><br><span class="line">                                        arr_fd[i] = <span class="number">-1</span>;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    <span class="keyword">else</span> <span class="keyword">if</span>(size &gt; <span class="number">0</span>)</span><br><span class="line">                                    &#123;</span><br><span class="line">                                        buf[size] = <span class="string">'\0'</span>;</span><br><span class="line">                                        <span class="built_in">printf</span>(<span class="string">"client: %s"</span>,buf);</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    close(sock);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//客户端</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/select.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> read_fd = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> write_fd = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> max_fd = <span class="number">0</span>;</span><br><span class="line">    fd_set read_set;</span><br><span class="line">    fd_set write_set;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"sizeof fd_set: %d\n"</span>,<span class="keyword">sizeof</span>(fd_set));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> sock = socket(AF_INET,SOCK_STREAM,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(sock == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">"socket"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"client's sock is : %d\n"</span>,sock);</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">remote</span>;</span></span><br><span class="line">    remote.sin_family = AF_INET;</span><br><span class="line">    remote.sin_port = htons(<span class="number">8888</span>);</span><br><span class="line">    remote.sin_addr.s_addr = inet_addr(<span class="string">"127.0.0.1"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(connect(sock,(struct sockaddr*)&amp;remote,<span class="keyword">sizeof</span>(remote)) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">"connect"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    max_fd = sock &gt; read_fd ? sock : read_fd;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        FD_ZERO(&amp;read_set);</span><br><span class="line">        FD_ZERO(&amp;write_set);</span><br><span class="line">        FD_SET(read_fd,&amp;read_set);</span><br><span class="line">        FD_SET(sock,&amp;write_set);</span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">timeout</span> = &#123;</span><span class="number">2</span>,<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">switch</span>(select(max_fd + <span class="number">1</span>,&amp;read_set,&amp;write_set,<span class="literal">NULL</span>,&amp;timeout))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:<span class="comment">//timeout</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"select timeout\n"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">-1</span>:<span class="comment">//error</span></span><br><span class="line">                perror(<span class="string">"select"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:<span class="comment">//correct</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//  int  FD_ISSET(int fd, fd_set *set);</span></span><br><span class="line">                    <span class="keyword">if</span>(FD_ISSET(read_fd,&amp;read_set))</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">char</span> buf[<span class="number">1024</span>];</span><br><span class="line">                        <span class="built_in">memset</span>(buf,<span class="string">'\0'</span>,<span class="keyword">sizeof</span>(buf));</span><br><span class="line">                        <span class="keyword">ssize_t</span> size = read(read_fd,buf,<span class="keyword">sizeof</span>(buf) - <span class="number">1</span>);</span><br><span class="line">                        <span class="keyword">if</span>(size &lt; <span class="number">0</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            perror(<span class="string">"read"</span>);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        buf[size] = <span class="string">'\0'</span>;</span><br><span class="line">                        <span class="keyword">if</span>(FD_ISSET(sock,&amp;write_set))</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">ssize_t</span> write_size = write(sock,buf,<span class="built_in">strlen</span>(buf));</span><br><span class="line">                            <span class="keyword">if</span>(write_size &lt; <span class="number">0</span>)</span><br><span class="line">                            &#123;</span><br><span class="line">                                perror(<span class="string">"write"</span>);</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    close(sock);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="解释及注意事项"><a href="#解释及注意事项" class="headerlink" title="解释及注意事项"></a>解释及注意事项</h4><ul><li><p>解释：</p><ul><li><p>可读事件：</p><ul><li>有数据可读</li><li>关闭连接的读的一半(接收了FIN的TCP连接，读操作不阻塞并返回0)</li><li>给监听套接口准备好新的连接</li><li>待处理错误(不阻塞并返回-1)</li></ul></li><li><p>可写事件：</p><ul><li>有可用与写的空间</li><li>关闭连接的写的一半</li><li>待处理错误(不阻塞并返回-1)</li></ul></li><li><p>异常：TCP带外数据</p></li></ul></li><li><p>注意：</p><ul><li><p>select的最大描述符数(FD_SETSIZE)：增大的方法是增大FD_SETSIZE，然后重新编译内核</p></li><li><p>混合使用stdio和select非常容易出错误，所以尽量避免与小心(缓冲区的问题：stdio有缓冲区，select使用时不知道)</p></li><li><p>因为每次select执行完了后都会对描述符集进行清空，所以需要每次调用前进行重新设置</p></li><li><p>连接数为0的情形下需要做特殊处理，因为如果读集合中没有任何套接字，select函数会立刻返回，这将导致工作者线程成为一个死循环，占用并浪费CPU。</p></li></ul></li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li><p>一张图来说明select函数的工作流程</p><p>  <img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/select%E5%87%BD%E6%95%B0%E6%B5%81%E7%A8%8B.png" alt="selcet"></p></li><li><p>select函数采用了轮询的机制来处理事件。关联到套接字列表的操作都需要使用循环，在轮询的时候需要遍历一次，再新的一轮开始时，将列表加入队列又需要遍历一次。也就是说，Select在工作一次时，需要至少遍历2次列表，导致效率低下。</p></li></ul><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><p><a href="http://www.cnblogs.com/jinmu190/archive/2010/11/21/1883184.html" target="_blank" rel="noopener">http://www.cnblogs.com/jinmu190/archive/2010/11/21/1883184.html</a></p></li><li><p><a href="http://blog.csdn.net/bzhxuexi/article/details/44833537" target="_blank" rel="noopener">http://blog.csdn.net/bzhxuexi/article/details/44833537</a></p></li><li><p><a href="http://blog.csdn.net/piaojun_pj/article/details/5991968" target="_blank" rel="noopener">http://blog.csdn.net/piaojun_pj/article/details/5991968</a></p></li><li><p><a href="http://c.biancheng.net/cpp/html/381.html" target="_blank" rel="noopener">http://c.biancheng.net/cpp/html/381.html</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> I/O复用 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>dirname函数与basename函数</title>
      <link href="/2017/11/18/basename%E5%87%BD%E6%95%B0%E4%B8%8Edirname%E5%87%BD%E6%95%B0/"/>
      <url>/2017/11/18/basename%E5%87%BD%E6%95%B0%E4%B8%8Edirname%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="dirname函数"><a href="#dirname函数" class="headerlink" title="dirname函数"></a>dirname函数</h4><ul><li><p>说明：截取给定路径的目录部分(以 ‘/‘ 为分隔符)</p></li><li><p>头文件：<code>#include &lt;libgen.h&gt;</code></p></li><li><p>原型：<code>char *dirname(char *path);</code></p><ul><li>path参数：指向一个文件的全路径的字符串</li><li><p>此函数可以修改路径的内容，所以传递参数时需要传递一个副本</p><a id="more"></a></li></ul></li><li><p>返回值：去掉文件名后的目录名(可以理解为返回值为路径的上一层目录地址名)</p><ul><li>如果路径只是一个文件名(路径名)，则返回值为当前目录。</li><li>如果路径为根目录，则返回值为根目录。</li><li>如果路径为空，则返回值为当前目录。</li></ul></li><li><p>示例：</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libgen.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">( <span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[] )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *str = <span class="string">"/mnt/linux/test.txt"</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">strncpy</span> (buf, str, <span class="built_in">strlen</span>(str));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//dirname 会修改buf中的值，所以需要一个缓冲区</span></span><br><span class="line">    <span class="comment">//直接调用dirname(str), 会使程序崩溃</span></span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">"dirstr is:%s\n"</span>, dirname(buf));</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">"dir buf is:%s\n"</span>, buf);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="basename函数"><a href="#basename函数" class="headerlink" title="basename函数"></a>basename函数</h4><ul><li><p>说明：得到特定的路径中的最后一个 ‘/‘ 后面的内容(以 ‘/‘ 为分隔符)</p></li><li><p>头文件：<code>#include &lt;libgen.h&gt;</code></p></li><li><p>原型：<code>char *basename(char *path);</code></p><ul><li>path参数：指向一个文件的全路径的字符串</li><li>此函数可以修改路径的内容，所以传递参数时需要传递一个副本</li></ul></li><li><p>返回值：基本的文件名(可以理解为返回值为路径的最后的文件名)</p><ul><li>如果路径只是一个文件名(路径名)，则返回值为路径的副本(即文件名)。</li><li>如果路径为根目录，则返回值为根目录。</li><li>如果路径为空，则返回值为当前目录。</li><li>如果路径为 <code>/mnt/linux/lib/</code> 后面没有文件名，则会报段错误</li></ul></li><li><p>示例：</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libgen.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">( <span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[] )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *str = <span class="string">"/mnt/linux/test.txt"</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">strncpy</span> (buf, str, <span class="built_in">strlen</span>(str));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//dirname 会修改buf中的值，所以需要一个缓冲区</span></span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">"test1 basename is:%s\n"</span>, basename(buf));</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">"name buf is:%s\n"</span>, buf);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><ul><li><p>利用 strrchr 获取文件扩展名称(后缀)</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">( <span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[] )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *str = <span class="string">"/mnt/linux/test.txt"</span>;</span><br><span class="line">    <span class="keyword">char</span> *suffix = <span class="built_in">strrchr</span> (str, <span class="string">'.'</span>);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">"suffix is:%s\n"</span>, suffix);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li><p>解释</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">path         dirname    basename</span><br><span class="line"><span class="string">"/usr/lib"</span>    <span class="string">"/usr"</span>    <span class="string">"lib"</span></span><br><span class="line"><span class="string">"/usr/"</span>       <span class="string">"/"</span>       <span class="string">"usr"</span></span><br><span class="line"><span class="string">"usr"</span>         <span class="string">"."</span>       <span class="string">"usr"</span></span><br><span class="line"><span class="string">"/"</span>           <span class="string">"/"</span>       <span class="string">"/"</span></span><br><span class="line"><span class="string">"."</span>           <span class="string">"."</span>       <span class="string">"."</span></span><br><span class="line"><span class="string">".."</span>          <span class="string">"."</span>       <span class="string">".."</span></span><br></pre></td></tr></table></figure></li><li><p>注意</p><ul><li>在某些平台上关于这两个函数的实现，在传递参数的时候传递的是只读字符串，所以无法修改，因此在传递的时候需要传递数组或者改用GNU的实现版本</li></ul></li><li><p>思考：<a href="http://www.cnblogs.com/clover-toeic/p/3741689.html" target="_blank" rel="noopener">http://www.cnblogs.com/clover-toeic/p/3741689.html</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>sysconf函数与getrlimit函数及setrlimit函数</title>
      <link href="/2017/11/17/sysconf%E5%87%BD%E6%95%B0/"/>
      <url>/2017/11/17/sysconf%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><ul><li>每种资源都有相关的软硬限制，软限制是内核强加给相应资源的限制值，硬限制是软限制的最大值。非授权调用进程只可以将其软限制指定为0到硬限制范围中的某个值，同时能不可逆转地降低其硬限制。授权进程可以任意改变其软硬限制。RLIM_INFINITY的值表示不对资源限制。</li></ul><a id="more"></a><h4 id="sysconf函数"><a href="#sysconf函数" class="headerlink" title="sysconf函数"></a>sysconf函数</h4><ul><li><p>说明：sysconf函数用于找到一个特定系统实际支持的限制值</p></li><li><p>头文件：<code>#include &lt;unistd.h&gt;</code></p></li><li><p>原型： <code>long sysconf(int name);</code></p><ul><li>name参数：代表限制名常量，是一些整数，分别代表一个限制名</li></ul></li></ul><table><thead><tr><th>限制名</th><th>name参数</th><th>linux测试值</th><th>说明</th></tr></thead><tbody><tr><td>ARG_MAX</td><td>_SC_ARG_MAX</td><td></td><td>exec函数的参数最大长度（字节数）</td></tr><tr><td>ATEXIT_MAX</td><td>_SC_ATEXIT_MAX</td><td></td><td>可用atexit函数登记的最大函数个数。</td></tr><tr><td>CHILD_MAX</td><td>_SC_CHILD_MAX</td><td>1024</td><td>每个实际用户ID的最大进程数。</td></tr><tr><td>HOST_NAME_MAX</td><td>_SC_HOST_NAME_MAX</td><td></td><td>主机名最大程度（字节数）</td></tr><tr><td>LINE_MAX</td><td>_SC_LINE_MAX</td><td></td><td>实用程序输入行的最大长度（字节数）</td></tr><tr><td>LOGIN_NAME_MAX</td><td>_SC_LOGIN_NAME_MAX</td><td></td><td>登录名的最大长度（字节数）</td></tr><tr><td>OPEN_MAX</td><td>_SC_OPEN_MAX</td><td>1024</td><td>每个进程的最大打开文件数</td></tr><tr><td>PAGESIZE</td><td>_SC_PAGESIZE</td><td></td><td>系统存储页的长度（字节数）</td></tr></tbody></table><ul><li><p>返回值：特定系统实际支持的限制值 <code>如果 name 不是一个合适的常量，则函数会返回-1，并将 errno 设置为EINVAL</code></p></li><li><p>示例：</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取电脑系统的部分参数</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Size of a page in bytes:%ld\n"</span>,sysconf(_SC_PAGESIZE));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Max length of a  hostname:%ld\n"</span>,sysconf(_SC_HOST_NAME_MAX));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">" The maximum number of files that a process can have open at any time.:%ld\n"</span>,sysconf(_SC_OPEN_MAX));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"  The  number  of  clock  ticks  per  second.:%ld\n"</span>,sysconf(_SC_CLK_TCK));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"The number of processors currently online .:%ld\n"</span>,sysconf(_SC_NPROCESSORS_ONLN));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"The number of processors configured..:%ld\n"</span>,sysconf(_SC_NPROCESSORS_CONF));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="getrlimit函数及setrlimit函数"><a href="#getrlimit函数及setrlimit函数" class="headerlink" title="getrlimit函数及setrlimit函数"></a>getrlimit函数及setrlimit函数</h4><ul><li><p>说明：获得、设置每个进程能够创建的各种系统资源的限制使用量</p></li><li><p>原型：<code>int getrlimit(int resource, struct rlimit *rlim);</code> <code>int setrlimit(int resource, const struct rlimit *rlim);</code></p><ul><li><p>rlim：描述资源软硬限制的结构体</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rlimit</span> &#123;</span></span><br><span class="line">  <span class="keyword">rlim_t</span> rlim_cur;   <span class="comment">/*软限制(内核所能支持的资源上限)*/</span></span><br><span class="line">  <span class="keyword">rlim_t</span> rlim_max;  <span class="comment">/*硬限制(在资源中只是作为soft limit的上限)*/</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>resource参数：</p></li></ul></li></ul><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>RLIMIT_AS</td><td>进程的最大虚内存空间，字节为单位。</td></tr><tr><td>RLIMIT_CORE</td><td>内核转存文件的最大长度。</td></tr><tr><td>RLIMIT_CPU</td><td>最大允许的CPU使用时间，秒为单位。当进程达到软限制，内核将给其发送SIGXCPU信号，这一信号的默认行为是终止进程的执行。然而，可以捕捉信号，处理句柄可将控制返回给主程序。如果进程继续耗费CPU时间，核心会以每秒一次的频率给其发送SIGXCPU信号，直到达到硬限制，那时将给进程发送 SIGKILL信号终止其执行。</td></tr><tr><td>RLIMIT_DATA</td><td>进程数据段的最大值。</td></tr><tr><td>RLIMIT_FSIZE</td><td>进程可建立的文件的最大长度。如果进程试图超出这一限制时，核心会给其发送SIGXFSZ信号，默认情况下将终止进程的执行。</td></tr><tr><td>RLIMIT_LOCKS</td><td>进程可建立的锁和租赁的最大值。</td></tr><tr><td>RLIMIT_MEMLOCK</td><td>进程可锁定在内存中的最大数据量，字节为单位。</td></tr><tr><td>RLIMIT_MSGQUEUE</td><td>进程可为POSIX消息队列分配的最大字节数。</td></tr><tr><td>RLIMIT_NICE</td><td>进程可通过setpriority() 或 nice()调用设置的最大完美值。</td></tr><tr><td>RLIMIT_NOFILE</td><td>指定比进程可打开的最大文件描述词大一的值，超出此值，将会产生EMFILE错误。</td></tr><tr><td>RLIMIT_NPROC</td><td>用户可拥有的最大进程数。</td></tr><tr><td>RLIMIT_RTPRIO</td><td>进程可通过sched_setscheduler 和 sched_setparam设置的最大实时优先级。</td></tr><tr><td>RLIMIT_SIGPENDING</td><td>用户可拥有的最大挂起信号数。</td></tr><tr><td>RLIMIT_STACK</td><td>最大的进程堆栈，以字节为单位。</td></tr></tbody></table><ul><li><p>返回值：成功执行时，返回0。失败返回-1，errno被设为以下的某个值</p><ul><li>EFAULT：rlim指针指向的空间不可访问</li><li>EINVAL：参数无效</li><li>EPERM：增加资源限制值时，权能不允许</li></ul></li><li><p>示例：</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//运行该程序可能需要高权限，并且更改后仅对当前进程及其子进程有效</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/resource.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> handle_error(msg) \</span></span><br><span class="line">                    <span class="keyword">do</span>&#123;perror(msg);<span class="built_in">exit</span>(EXIT_FAILURE);&#125;<span class="keyword">while</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rlimit</span> <span class="title">limit</span>;</span></span><br><span class="line">    <span class="keyword">if</span>(getrlimit(RLIMIT_NOFILE,&amp;limit) == <span class="number">-1</span>)</span><br><span class="line">        handle_error(<span class="string">"getrlimit"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"getrlimit = %d\n"</span>,(<span class="keyword">int</span>)limit.rlim_cur);</span><br><span class="line"></span><br><span class="line">    limit.rlim_cur = limit.rlim_cur * <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(setrlimit(RLIMIT_NOFILE,&amp;limit) == <span class="number">-1</span>)</span><br><span class="line">        handle_error(<span class="string">"getrlimit"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"setrlimit = %d\n"</span>,(<span class="keyword">int</span>)limit.rlim_cur);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li>详解参考：<a href="http://www.cnblogs.com/niocai/archive/2012/04/01/2428128.html" target="_blank" rel="noopener">http://www.cnblogs.com/niocai/archive/2012/04/01/2428128.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Others </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>poll函数</title>
      <link href="/2017/11/17/poll%E5%87%BD%E6%95%B0/"/>
      <url>/2017/11/17/poll%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="poll函数"><a href="#poll函数" class="headerlink" title="poll函数"></a>poll函数</h4><ul><li><p>说明：等待一个文件上的某些事件(与select功能类似)</p></li><li><p>头文件：<code>#include &lt;poll.h&gt;</code></p></li><li><p>原型：<code>int poll(struct pollfd *fds, nfds_t nfds, int timeout);</code></p>  <a id="more"></a><ul><li><p>fds指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span> &#123;</span></span><br><span class="line">           <span class="keyword">int</span>   fd;         <span class="comment">/* file descriptor */</span></span><br><span class="line">           <span class="keyword">short</span> events;     <span class="comment">/* requested events */</span></span><br><span class="line">           <span class="keyword">short</span> revents;    <span class="comment">/* returned events */</span></span><br><span class="line">       &#125;;</span><br></pre></td></tr></table></figure><ul><li><p>pollfd结构体成员的fd设置为需要关注的描述符，当fd被赋值为-1（负数）时，表示忽略 events，revents事件也将被设置成0。</p></li><li><p>poll与select不同（select函数在调用之后，会清空检测描述符的数组），每当调用这个函数之后，系统不会清空这个数组，而是将有状态变化的描述符结构的revents变量状态变化，操作起来比较方便。</p></li><li><p>events是需要设置进去对fd的关注事件（关注可读、可写、异常），属于掩码（可以或），比如设置成POLLIN | POLLOUT，关注可读可写。</p></li><li><p>revents是由内核通知的，函数返回的时候，会设置对应的fd实际发生的事件，比如fd有可读的事件，设置POLLIN(下面的表格鉴于渲染的时候会发生错误，故不用)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">常量  | 说明  | 是否可以作为输入 | 是否可以作为输出</span><br><span class="line">----- | ----- | ----------------- | ------------ |</span><br><span class="line">POLLIN | 普通或优先级带数据可读  | 是  |  是</span><br><span class="line">    </span><br><span class="line">POLLRDNORM | 普通数据可读（等价POLLIN与POLLRDBAND的逻辑或，与linux版本有关） |  是  |  是</span><br><span class="line">    </span><br><span class="line">POLLRDBAND | 优先级带数据可读（linux中一般不用） |  是  |  是</span><br><span class="line">    </span><br><span class="line">POLLPRI | 高优先级数据可读  |  是  |  是</span><br><span class="line">    </span><br><span class="line">POLLOUT | 普通数据可写  |  是  |  是</span><br><span class="line">    </span><br><span class="line">POLLWRNORM | 普通数据可写（等价POLLOUT，与linux版本有关）|  是  |  是</span><br><span class="line">    </span><br><span class="line">POLLWRBAND | 优先级数据可写 |  是  |  是</span><br><span class="line">    </span><br><span class="line">POLLRDHUP | Linux2<span class="number">.6</span><span class="number">.17</span>以上才支持，需要声明_GNU_SOURCE，tcp被被对方关闭连接，对方关闭了写操作  |  是  |  是</span><br><span class="line">    </span><br><span class="line">POLLERR | 发生错误  |  否  |  是</span><br><span class="line">    </span><br><span class="line">POLLHUP | 发生挂起  |  否  |  是</span><br><span class="line">    </span><br><span class="line">POLLNVAL | 描述符不是一个打开的文件  |  否  |  是</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><pre><code>    - 表格中的最后三个是不能作为events事件注册进去的，只能放到revents结果中- nfds参数：描述符个数，结构体pollfd数组元素的个数- timeout参数：指定等待的毫秒数，无论I/O是否准备好，poll都会返回。    - 参数设置为-1时，表示永远阻塞等待。    2. 0表示立即返回，不阻塞(立即返回并列出准备好I/O的文件描述符，并不等待其它的事件)。    3. 大于0时，表示等待指定数目的毫秒数。</code></pre><ul><li><p>返回值：</p><ul><li><p>大于0：表示结构体数组fds中有fd描述符的状态发生变化，或可以读取、或可以写入、或出错。并且返回的值表示这些状态有变化的socket描述符的总数量；此时可以对fds数组进行遍历，以寻找那些revents不空的描述符，然后判断这个里面有哪些事件以读取数据。</p></li><li><p>等于0：表示没有描述符有状态变化，并且调用超时。</p></li><li><p>小于0：此时表示有错误发生，此时全局变量errno保存错误码。</p></li></ul></li><li><p>错误代码：</p><ul><li><p>EBADF: 一个或多个结构体中指定的文件描述符无效。</p></li><li><p>EFAULT: fds指针指向的地址超出进程的地址空间。</p></li><li><p>EINTR: 请求的事件之前产生一个信号，调用可以重新发起。</p></li><li><p>EINVAL: nfds参数超出PLIMIT_NOFILE值。</p></li><li><p>ENOMEM: 可用内存不足，无法完成请求。</p></li></ul></li></ul><h4 id="内核追踪-比较效率"><a href="#内核追踪-比较效率" class="headerlink" title="内核追踪-比较效率"></a>内核追踪-比较效率</h4><ul><li><p>select 内核追踪</p><ul><li><p>内核代码是参考2.6.12版本的内核</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">asmlinkage <span class="keyword">long</span> <span class="title">sys_select</span><span class="params">(<span class="keyword">int</span> n, fd_set __user *inp, fd_set __user *outp, fd_set __user *<span class="built_in">exp</span>, struct timeval __user *tvp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    .....</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    n 是需要监听描述符集中，最大描述加1，然后，开始申请内存</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    ret = -ENOMEM;</span><br><span class="line">    size = FDS_BYTES(n);</span><br><span class="line">    bits = select_bits_alloc(size);</span><br><span class="line">    <span class="keyword">if</span> (!bits)</span><br><span class="line">       <span class="keyword">goto</span> out_nofds;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置指针，指向特定的内存，所以，才可以往fds 中个指针填充数据</span></span><br><span class="line">    fds.in      = (<span class="keyword">unsigned</span> <span class="keyword">long</span> *)  bits;</span><br><span class="line">    fds.out     = (<span class="keyword">unsigned</span> <span class="keyword">long</span> *) (bits +   size);</span><br><span class="line">    fds.ex      = (<span class="keyword">unsigned</span> <span class="keyword">long</span> *) (bits + <span class="number">2</span>*size);</span><br><span class="line">    fds.res_in  = (<span class="keyword">unsigned</span> <span class="keyword">long</span> *) (bits + <span class="number">3</span>*size);</span><br><span class="line">    fds.res_out = (<span class="keyword">unsigned</span> <span class="keyword">long</span> *) (bits + <span class="number">4</span>*size);</span><br><span class="line">    fds.res_ex  = (<span class="keyword">unsigned</span> <span class="keyword">long</span> *) (bits + <span class="number">5</span>*size);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用用户空间获取相应的参数值</span></span><br><span class="line">    <span class="keyword">if</span> ((ret = get_fd_set(n, inp, fds.in)) ||</span><br><span class="line">        (ret = get_fd_set(n, outp, fds.out)) ||</span><br><span class="line">        (ret = get_fd_set(n, <span class="built_in">exp</span>, fds.ex)))</span><br><span class="line">       <span class="keyword">goto</span> out;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//清空需要返回给用户态的参数</span></span><br><span class="line">    zero_fd_set(n, fds.res_in);</span><br><span class="line">    zero_fd_set(n, fds.res_out);</span><br><span class="line">    zero_fd_set(n, fds.res_ex);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里就是重点调用do_select() 函数来轮询，该函数轮询结束之后，返回，</span></span><br><span class="line">    <span class="comment">//然后，就可以把fds 中相应的属性返回给应用程序。</span></span><br><span class="line">    <span class="comment">//do_select() 也是通过schedule_time() 调度返回的，那么休眠被唤醒之后，可能是被一些信号触发唤醒，</span></span><br><span class="line">    <span class="comment">//那么，下面就调用signal_pending(); 来检测信号是否异常。</span></span><br><span class="line">    ret = do_select(n, &amp;fds, &amp;timeout);</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*最终调用 do_select(); 函数，该函数的主要框架如下：*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">do_select</span><span class="params">(<span class="keyword">int</span> n, fd_set_bits *fds, <span class="keyword">long</span> *timeout)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    .....</span><br><span class="line"></span><br><span class="line">    <span class="comment">//此时，进入一个死循环，退出循环的条件有:</span></span><br><span class="line">    <span class="comment">//1 -- retval != 0，就是说，监听的文件描述符有信号可以处理。</span></span><br><span class="line">    <span class="comment">//2 -- timeout == 0, 超时了。</span></span><br><span class="line">    <span class="comment">//3 -- signal_pending(); 检测到当前的进程接受到信号处理。</span></span><br><span class="line">    <span class="comment">//4 -- wait-&gt;error 记录的错误事件不为，表示有错误处理。</span></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line"></span><br><span class="line">       ......</span><br><span class="line"></span><br><span class="line">       <span class="comment">//设置当前的进程的可中断的休眠状态</span></span><br><span class="line">       set_current_state(TASK_INTERRUPTIBLE);</span><br><span class="line">       ......</span><br><span class="line">       <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; ++rinp, ++routp, ++rexp) &#123;</span><br><span class="line"></span><br><span class="line">           ......</span><br><span class="line"></span><br><span class="line">           <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; __NFDBITS; ++j, ++i, bit &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">                  .....</span><br><span class="line"></span><br><span class="line">                  <span class="comment">//调用fd 文件描述符对应的驱动程序的poll 函数指针指向的函数。</span></span><br><span class="line">                  <span class="comment">//如果fd 是一个网络套接，而且使用TCP 协议，那么，该函数指针就指向tcp_poll(); 函数。</span></span><br><span class="line">                  mask = (*f_op-&gt;poll)(file, retval ? <span class="literal">NULL</span> : wait);</span><br><span class="line"></span><br><span class="line">                  ......</span><br><span class="line"></span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">           &#125;<span class="comment">//end of 第3 层for 循环</span></span><br><span class="line"></span><br><span class="line">           ......</span><br><span class="line"></span><br><span class="line">       &#125;<span class="comment">//end of 第2 层for 循环</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//上面的for() 循环调用了cond_resched() 来调度CPU，那么，可能在睡眠的时候被产生信号触发返回，</span></span><br><span class="line">       <span class="comment">//所以，这里还需要调用signal_pending() 检测是否是被信号触发返回。所以，在select()函数中是可以被信号中断返回，              //在pselect()函数中就可以屏蔽相应的信号。</span></span><br><span class="line">       <span class="comment">//如果retval &gt;=1 表示有信号处理，所以，推出循环。</span></span><br><span class="line">       <span class="keyword">if</span> (retval || !__timeout || signal_pending(current))</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">       <span class="keyword">if</span>(table.error) &#123;</span><br><span class="line">           retval = table.error;</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//具有定时唤醒进程的调度CPU</span></span><br><span class="line">       <span class="comment">//而且，返回的时间是离__timeout 还剩下多少时间，如果已经超过__timeout，就返回0</span></span><br><span class="line">       __timeout = schedule_timeout(__timeout);</span><br><span class="line">    &#125;<span class="comment">//end of for(;;);</span></span><br><span class="line"></span><br><span class="line">    .....</span><br><span class="line"></span><br><span class="line">    *timeout = __timeout;    <span class="comment">//更新参数timeout 为新的时间</span></span><br><span class="line">    <span class="keyword">return</span> retval;    <span class="comment">//返回有多少个信号需要处理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以看到，主要是通过“三重循环”来查询套接口是否有信息可以处理。</li></ul></li></ul></li><li><p>poll内核追踪</p><ul><li><p>内核代码是参考2.6.12版本的内核</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">asmlinkage <span class="keyword">long</span> <span class="title">sys_poll</span><span class="params">(struct pollfd __user * ufds, <span class="keyword">unsigned</span> <span class="keyword">int</span> nfds, <span class="keyword">long</span> timeout)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    <span class="comment">//申请内存空间，存放用户层传递过来的参数</span></span><br><span class="line">    <span class="keyword">while</span>(i!=<span class="number">0</span>) &#123;</span><br><span class="line">       <span class="class"><span class="keyword">struct</span> <span class="title">poll_list</span> *<span class="title">pp</span>;</span></span><br><span class="line">       pp = kmalloc(<span class="keyword">sizeof</span>(struct poll_list)+</span><br><span class="line">              <span class="keyword">sizeof</span>(struct pollfd)*</span><br><span class="line">              (i&gt;POLLFD_PER_PAGE?POLLFD_PER_PAGE:i),</span><br><span class="line">                  GFP_KERNEL);</span><br><span class="line">       <span class="keyword">if</span>(pp==<span class="literal">NULL</span>)</span><br><span class="line">           <span class="keyword">goto</span> out_fds;</span><br><span class="line">       pp-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">       pp-&gt;len = (i&gt;POLLFD_PER_PAGE?POLLFD_PER_PAGE:i);</span><br><span class="line">       <span class="keyword">if</span> (head == <span class="literal">NULL</span>)</span><br><span class="line">           head = pp;</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">           walk-&gt;next = pp;</span><br><span class="line"></span><br><span class="line">       walk = pp;</span><br><span class="line">       <span class="keyword">if</span> (copy_from_user(pp-&gt;entries, ufds + nfds-i,</span><br><span class="line">              <span class="keyword">sizeof</span>(struct pollfd)*pp-&gt;len)) &#123;</span><br><span class="line">           err = -EFAULT;</span><br><span class="line">           <span class="keyword">goto</span> out_fds;</span><br><span class="line">       &#125;</span><br><span class="line">       i -= pp-&gt;len;</span><br><span class="line">    &#125;<span class="comment">//end of while</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//进入轮询的主要操作</span></span><br><span class="line">    fdcount = do_poll(nfds, head, &amp;table, timeout);</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">    主要是进入 do_poll()函数，该函数的主要框架如下：</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">do_poll</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> nfds,  struct poll_list *<span class="built_in">list</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">   struct poll_wqueues *wait, <span class="keyword">long</span> timeout)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    .....</span><br><span class="line"></span><br><span class="line">    <span class="comment">//进入一个死循环，退出的条件有:</span></span><br><span class="line">    <span class="comment">//1 -- count != 0，就是说，监听的文件描述符有信号可以处理。</span></span><br><span class="line">    <span class="comment">//2 -- timeout == 0, 超时了。</span></span><br><span class="line">    <span class="comment">//3 -- signal_pending(); 检测到当前的进程接受到信号处理。</span></span><br><span class="line">    <span class="comment">//4 -- wait-&gt;error 记录的错误事件不为，表示有错误处理。</span></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">       ...</span><br><span class="line">       set_current_state(TASK_INTERRUPTIBLE);</span><br><span class="line">       <span class="keyword">while</span>(walk != <span class="literal">NULL</span>) &#123;</span><br><span class="line">           do_pollfd( walk-&gt;len, walk-&gt;entries, &amp;pt, &amp;count);</span><br><span class="line">           walk = walk-&gt;next;</span><br><span class="line">       &#125;</span><br><span class="line">       .....</span><br><span class="line">       <span class="keyword">if</span> (count || !timeout || signal_pending(current))</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">       count = wait-&gt;error;</span><br><span class="line">       <span class="keyword">if</span> (count)</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">       timeout = schedule_timeout(timeout);</span><br><span class="line">    &#125;</span><br><span class="line">    __set_current_state(TASK_RUNNING);</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">        上面的函数处理双重循环，然后，进入到 do_pollfd(); 函数中，该函数的主要框架如下：</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">do_pollfd</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> num, struct pollfd * fdpage,</span></span></span><br><span class="line"><span class="function"><span class="params">poll_table ** pwait, <span class="keyword">int</span> *count)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ......</span><br><span class="line"></span><br><span class="line">        <span class="comment">//循环扫描文件描述符数组中的文件描述符</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">           .....</span><br><span class="line">               <span class="keyword">if</span> (file != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                  <span class="comment">//执行文件操作集中的poll 指针所指向的函数。</span></span><br><span class="line">                  <span class="comment">//例如，自己在开发驱动程序的时候，此时的poll 指针，就执行我们定义注册</span></span><br><span class="line">                  <span class="comment">//到file_operations 结构中的函数。</span></span><br><span class="line">                  <span class="comment">//调用fd 文件描述符对应的驱动程序的poll 函数指针指向的函数。</span></span><br><span class="line">                  <span class="comment">//如果fd 是一个网络套接，而且使用TCP 协议，那么，该函数指针就指向tcp_poll(); 函数。</span></span><br><span class="line">                  <span class="keyword">if</span> (file-&gt;f_op &amp;&amp; file-&gt;f_op-&gt;poll)</span><br><span class="line">                      mask = file-&gt;f_op-&gt;poll(file, *pwait);</span><br><span class="line">               ......</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>对于 sys_poll()函数也是需要 3 个循环来处理与sys_select()函数的处理模式差不多。</p></li></ul><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><ul><li><p>poll的机制与select类似，与select在本质上没有多大差别，管理多个描述符也是进行轮询，根据描述符的状态进行处理，但是poll没有最大文件描述符数量的限制。</p></li><li><p>poll和select同样存在一个缺点就是，包含大量文件描述符的数组被整体复制于用户态和内核的地址空间之间，而不论这些文件描述符是否就绪，它的开销随着文件描述符数量的增加而线性增大。</p></li><li><p>pollfd中的events字段和revents分别用于标示关注的事件和发生的事件，故pollfd数组只需要被初始化一次</p></li><li><p>poll还有一个特点是“水平触发”，如果报告了fd后，没有被处理，那么下次poll时会再次报告该fd。</p></li><li><p>select() 函数的最后一个参数是指针类型，其值会被修改，所以，当再次调用select() 函数的时候，需要重新设置该参数。而poll() 函数的最后一个参数是值类型，不会被修改。</p></li></ul><h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h4><ul><li><p>优点：</p><ul><li>poll() 不要求开发者计算最大文件描述符加一的大小。</li><li>poll() 在应付大数目的文件描述符的时候速度更快，相比于select。</li><li>它没有最大连接数的限制，原因是它是基于链表来存储的。</li></ul></li><li><p>缺点：</p><ul><li>大量的fd的数组被整体复制于用户态和内核地址空间之间，而不管这样的复制是不是有意义。</li><li>与select一样，poll返回后，需要轮询pollfd来获取就绪的描述符</li></ul></li></ul><h4 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*服务器*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;poll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 1024  <span class="comment">//缓冲区最大值</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PORT 55555  <span class="comment">//端口号</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LISTENQ 20  <span class="comment">//监听的最大值</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFTIM -1  <span class="comment">//timeout时间</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> listenfd;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serverAddr</span>, <span class="title">clientAddr</span>;</span></span><br><span class="line">    bzero(&amp;serverAddr, <span class="keyword">sizeof</span>(serverAddr));</span><br><span class="line"></span><br><span class="line">    serverAddr.sin_family = AF_INET;</span><br><span class="line">    serverAddr.sin_port = htons(PORT);</span><br><span class="line">    serverAddr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>((listenfd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>)) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        perror(<span class="string">"socket"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//地址复用</span></span><br><span class="line">    <span class="keyword">int</span> reuse = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(setsockopt(listenfd, SOL_SOCKET, SO_REUSEADDR, &amp;reuse, <span class="keyword">sizeof</span>(reuse)) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        perror(<span class="string">"setsockopt"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(bind(listenfd, (struct sockaddr*)&amp;serverAddr, <span class="keyword">sizeof</span>(serverAddr)) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        perror(<span class="string">"bind"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(listen(listenfd, LISTENQ) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        perror(<span class="string">"listen"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取每个进程最大打开的文件数</span></span><br><span class="line">    <span class="keyword">long</span> OPEN_MAX = sysconf(_SC_OPEN_MAX);</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span> <span class="title">client</span>[<span class="title">OPEN_MAX</span>];</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册监听事件</span></span><br><span class="line">    client[<span class="number">0</span>].fd = listenfd;</span><br><span class="line">    client[<span class="number">0</span>].events = POLLIN;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(; i &lt; OPEN_MAX; i++)&#123;</span><br><span class="line">        client[i].fd = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> sockfd, connfd;</span><br><span class="line">    <span class="keyword">int</span> nready;</span><br><span class="line">    <span class="keyword">int</span> maxi = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[MAXSIZE];</span><br><span class="line">    bzero(buf, MAXSIZE);</span><br><span class="line">    <span class="keyword">socklen_t</span> clilen;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>((nready = poll(client, maxi+<span class="number">1</span>, INFTIM)) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            perror(<span class="string">"poll"</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(client[<span class="number">0</span>].revents &amp; POLLIN)&#123;</span><br><span class="line">            clilen = <span class="keyword">sizeof</span>(clientAddr);</span><br><span class="line">            <span class="keyword">if</span>((connfd = accept(listenfd, (struct sockaddr*)&amp;clientAddr, &amp;clilen)) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                perror(<span class="string">"accept"</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; OPEN_MAX; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(client[i].fd &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                    client[i].fd = connfd;</span><br><span class="line">                    client[i].events = POLLIN;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(i == OPEN_MAX)&#123;</span><br><span class="line">                perror(<span class="string">"too many clients"</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(i &gt; maxi)&#123;</span><br><span class="line">                maxi = i;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(--nready &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= maxi; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>((sockfd = client[i].fd) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            bzero(buf, MAXSIZE);</span><br><span class="line">            <span class="keyword">if</span>(client[i].revents &amp; (POLLIN | POLLERR))&#123;</span><br><span class="line">                <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span>((n = recv(sockfd, buf, MAXSIZE, <span class="number">0</span>)) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(errno == ECONNRESET)&#123;</span><br><span class="line">                        close(sockfd);</span><br><span class="line">                        client[i].fd = <span class="number">-1</span>;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        perror(<span class="string">"recv"</span>);</span><br><span class="line">                        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">0</span>)&#123;</span><br><span class="line">                    close(sockfd);</span><br><span class="line">                    client[i].fd = <span class="number">-1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"client : %s"</span>, buf);</span><br><span class="line">                    <span class="keyword">if</span>(send(sockfd, buf, <span class="built_in">strlen</span>(buf), <span class="number">0</span>) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                        perror(<span class="string">"send"</span>);</span><br><span class="line">                        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"\nserver : %s"</span>, buf);</span><br><span class="line">                    <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(--nready &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*客户端*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;poll.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 1024</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PORT 55555</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sockfd;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">clientAddr</span>;</span></span><br><span class="line"></span><br><span class="line">    clientAddr.sin_family = AF_INET;</span><br><span class="line">    clientAddr.sin_port = htons(PORT);</span><br><span class="line">    clientAddr.sin_addr.s_addr = inet_addr(<span class="string">"127.0.0.1"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>((sockfd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>)) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        perror(<span class="string">"socket"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(connect(sockfd, (struct sockaddr*)&amp;clientAddr, <span class="keyword">sizeof</span>(clientAddr)) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        perror(<span class="string">"connect"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> buf[MAXSIZE];</span><br><span class="line">    bzero(buf, MAXSIZE);</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span> <span class="title">server</span>[2];</span></span><br><span class="line"></span><br><span class="line">    server[<span class="number">0</span>].fd = sockfd;</span><br><span class="line">    server[<span class="number">0</span>].events = POLLIN;</span><br><span class="line">    server[<span class="number">1</span>].fd = fileno(<span class="built_in">stdin</span>);</span><br><span class="line">    server[<span class="number">1</span>].events = POLLIN;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> nready;</span><br><span class="line">    <span class="keyword">int</span> maxfd = sockfd &gt; fileno(<span class="built_in">stdin</span>)?sockfd:fileno(<span class="built_in">stdin</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>((nready = poll(server, maxfd+<span class="number">1</span>, <span class="number">-1</span>)) &lt; <span class="number">0</span> )&#123;</span><br><span class="line">            perror(<span class="string">"poll"</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(nready == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(server[<span class="number">1</span>].revents &amp; POLLIN)&#123;</span><br><span class="line">            <span class="keyword">if</span>(fgets(buf, MAXSIZE, <span class="built_in">stdin</span>) != <span class="literal">NULL</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(send(sockfd, buf, <span class="built_in">strlen</span>(buf), <span class="number">0</span>) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                    perror(<span class="string">"send"</span>);</span><br><span class="line">                    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                bzero(buf, MAXSIZE);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(server[<span class="number">0</span>].revents &amp; POLLIN)&#123;</span><br><span class="line">            <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>((n = recv(sockfd, buf, MAXSIZE, <span class="number">0</span>)) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                perror(<span class="string">"recv"</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">0</span>)&#123;</span><br><span class="line">                close(sockfd);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"\nserver : %s"</span>, buf);</span><br><span class="line">                <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    close(sockfd);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="http://www.cnblogs.com/orlion/p/6142838.html" target="_blank" rel="noopener">http://www.cnblogs.com/orlion/p/6142838.html</a></li><li><a href="http://www.cnblogs.com/Anker/archive/2013/08/15/3261006.html" target="_blank" rel="noopener">http://www.cnblogs.com/Anker/archive/2013/08/15/3261006.html</a></li><li><a href="http://blog.csdn.net/lixungogogo/article/details/52226434" target="_blank" rel="noopener">http://blog.csdn.net/lixungogogo/article/details/52226434</a></li><li><a href="http://blog.csdn.net/zhouzhenhe2008/article/details/75807720" target="_blank" rel="noopener">http://blog.csdn.net/zhouzhenhe2008/article/details/75807720</a></li><li><a href="http://blog.csdn.net/feng19870412/article/details/9001857" target="_blank" rel="noopener">http://blog.csdn.net/feng19870412/article/details/9001857</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> I/O复用 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>I/O复用及同步、异步、阻塞、非阻塞</title>
      <link href="/2017/11/16/IO%E5%A4%8D%E7%94%A8%E5%8F%8A%E5%90%8C(%E5%BC%82)%E6%AD%A5%E5%92%8C(%E9%9D%9E)%E9%98%BB%E5%A1%9E/"/>
      <url>/2017/11/16/IO%E5%A4%8D%E7%94%A8%E5%8F%8A%E5%90%8C(%E5%BC%82)%E6%AD%A5%E5%92%8C(%E9%9D%9E)%E9%98%BB%E5%A1%9E/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><ul><li><p>用户空间与内核空间</p><p>  现在操作系统都是采用虚拟存储器，那么对32位操作系统而言，它的寻址空间（虚拟存储空间）为4G（2的32次方）。操作系统的核心是内核，独立于普通的应用程序，可以访问受保护的内存空间，也有访问底层硬件设备的所有权限。为了保证用户进程不能直接操作内核（kernel），保证内核的安全，操作系统将虚拟空间划分为两部分，一部分为内核空间，一部分为用户空间。针对linux操作系统而言，将最高的1G字节（从虚拟地址0xC0000000到0xFFFFFFFF），供内核使用，称为内核空间，而将较低的3G字节（从虚拟地址0x00000000到0xBFFFFFFF），供各个进程使用，称为用户空间。</p>  <a id="more"></a></li><li><p>进程切换</p><ul><li>为了控制进程的执行，内核必须有能力挂起正在CPU上运行的进程，并恢复以前挂起的某个进程的执行。这种行为被称为进程切换。因此可以说，任何进程都是在操作系统内核的支持下运行的，是与内核紧密相关的。</li><li>从一个进程的运行转到另一个进程上运行，这个过程中经过下面这些变化：<ul><li>保存处理机上下文，包括程序计数器和其他寄存器。</li><li>更新PCB(进程控制块)信息。</li><li>把进程的PCB(进程控制块)移入相应的队列，如就绪、在某事件阻塞等队列。</li><li>选择另一个进程执行，并更新其PCB(进程控制块)。</li><li>更新内存管理的数据结构。</li><li>恢复处理机上下文。</li></ul></li><li>具体参考：<a href="http://guojing.me/linux-kernel-architecture/posts/process-switch/" target="_blank" rel="noopener">进程切换</a></li></ul></li></ul><h4 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h4><ul><li><p>同步和异步，这两个概念与消息的通知机制有关。也就是同步与异步主要是从消息通知机制角度来说的。</p><ul><li><p>所谓同步就是一个任务的完成需要依赖另外一个任务时，只有等待被依赖的任务完成后，依赖的任务才能算完成，这是一种可靠的任务序列。要么成功都成功，失败都失败，两个任务的状态可以保持一致。</p></li><li><p>所谓异步是不需要等待被依赖的任务完成，只是通知被依赖的任务要完成什么工作，依赖的任务也立即执行，只要自己完成了整个任务就算完成了。至于被依赖的任务最终是否真正完成，依赖它的任务无法确定，所以它是不可靠的任务序列。</p></li></ul></li><li><p>异步的概念和同步相对。当一个同步调用发出后，调用者要一直等待返回消息（结果）通知后，才能进行后续的执行；当一个异步过程调用发出后，调用者不能立刻得到返回消息（结果）。实际处理这个调用的部件在完成后，通过状态、通知和回调来通知调用者。<code>使用哪一种通知机制，依赖于执行部件的实现，除非执行部件提供多种选择，否则不受调用者控制</code></p><ul><li>如果执行部件用状态来通知，那么调用者就需要每隔一定时间检查一次，效率就很低（有些初学多线程编程的人，总喜欢用一个循环去检查某个变量的值，这其实是一种很严重的错误）；</li><li>如果是使用通知的方式，效率则很高，因为执行部件几乎不需要做额外的操作。至于回调函数，其实和通知没太多区别。</li></ul></li><li><p>比如我去银行办理业务，可能会有两种方式：</p><ul><li>选择排队等候</li><li><p>另种选择取一个小纸条上面有我的号码，等到排到我这一号时由柜台的人通知我轮到我去办理业务了</p></li><li><p>第一种：前者(排队等候)就是同步等待消息通知，也就是我要一直在等待银行办理业务情况；</p></li><li><p>第二种：后者(等待别人通知)就是异步等待消息通知。在异步消息处理中，等待消息通知者(在这个例子中就是等待办理业务的人)往往注册一个回调机制，在所等待的事件被触发时由触发机制(在这里是柜台的人)通过某种机制(在这里是写在小纸条上的号码，喊号)找到等待该事件的人。</p></li></ul></li></ul><h4 id="阻塞与非阻塞"><a href="#阻塞与非阻塞" class="headerlink" title="阻塞与非阻塞"></a>阻塞与非阻塞</h4><ul><li><p>阻塞和非阻塞这两个概念与程序（线程）等待消息通知(无所谓同步或者异步)时的状态有关。也就是说阻塞与非阻塞主要是程序（线程）等待消息通知时的状态角度来说的。</p><ul><li><p>阻塞调用是指调用结果返回之前，当前线程会被挂起，一直处于等待消息通知，不能够执行其他业务。函数只有在得到结果之后才会返回。</p></li><li><p>非阻塞和阻塞的概念相对应，指在不能立刻得到结果之前，该函数不会阻塞当前线程，而会立刻返回。虽然表面上看非阻塞的方式可以明显的提高CPU的利用率，但是也带了另外一种后果就是系统的线程切换增加。增加的CPU执行时间能不能补偿系统的切换成本需要好好评估。</p></li></ul></li><li><p>注意：</p><ul><li><p>对于同步调用来说，很多时候当前线程可能还是激活的，只是从逻辑上当前函数没有返回而已，此时，这个线程可能也会处理其他的消息。</p><ol><li><p>如果这个线程在等待当前函数返回时，仍在执行其他消息处理，那这种情况就叫做同步非阻塞</p></li><li><p>如果这个线程在等待当前函数返回时，没有执行其他消息处理，而是处于挂起等待状态，那这种情况就叫做同步阻塞</p><ul><li>所以同步的实现方式会有两种：同步阻塞、同步非阻塞；同理，异步也会有两种实现：异步阻塞、异步非阻塞</li></ul></li></ol></li><li><p>对于阻塞调用来说，则当前线程就会被挂起等待当前函数返回</p></li></ul></li><li><p>继续上面的那个银行办理业务的例子</p><ul><li><p>不论是排队还是使用号码等待通知，如果在这个等待的过程中，等待者除了等待消息通知之外不能做其它的事情，那么该机制就是阻塞的，表现在程序中,也就是该程序一直阻塞在该函数调用处不能继续往下执行。</p></li><li><p>相反，有的人喜欢在银行办理这些业务的时候一边打打电话发发短信一边等待，这样的状态就是非阻塞的，因为他(等待者)没有阻塞在这个消息通知上，而是一边做自己的事情一边等待。</p></li><li><p>但是需要注意了，同步非阻塞形式实际上是效率低下的，想象一下你一边打着电话一边还需要抬头看到底队伍排到你了没有。如果把打电话和观察排队的位置看成是程序的两个操作的话，这个程序需要在这两种不同的行为之间来回的切换，效率可想而知是低下的；而异步非阻塞形式却没有这样的问题，因为打电话是你(等待者)的事情，而通知你则是柜台(消息触发机制)的事情，程序没有在两种不同的操作中来回切换。</p></li></ul></li></ul><h4 id="同步、异步、阻塞、非阻塞"><a href="#同步、异步、阻塞、非阻塞" class="headerlink" title="同步、异步、阻塞、非阻塞"></a>同步、异步、阻塞、非阻塞</h4><ul><li><p>同步、异步、阻塞、非阻塞，是分3个层次的：CPU层次；线程层次；程序员感知层次。</p><ul><li><p>CPU层次</p><ul><li>在CPU层次，或者说操作系统进行IO和任务调度的层次，现代操作系统通常使用异步非阻塞方式进行IO（有少部分IO可能会使用同步非阻塞轮询），即发出IO请求之后，并不等待IO操作完成，而是继续执行下面的指令（非阻塞），IO操作和CPU指令互不干扰（异步），最后通过中断的方式来通知IO操作完成结果。</li></ul></li><li><p>线程层次</p><ul><li>在线程层次，或者说操作系统调度单元的层次，操作系统为了减轻程序员的思考负担，将底层的异步非阻塞的IO方式进行封装，把相关系统调用（如read，write等）以同步的方式展现出来。然而，同步阻塞的IO会使线程挂起，同步非阻塞的IO会消耗CPU资源在轮询上。为了解决这一问题，就有3种思路：<ol><li>多线程（同步阻塞）；</li><li>IO多路复用（select，poll，epoll）（同步非阻塞，严格地来讲，是把阻塞点改变了位置）；</li><li>直接暴露出异步的IO接口，如kernel-aio和IOCP（异步非阻塞）。</li></ol></li></ul></li><li><p>程序员感知层次</p><ul><li>在Linux中，上面提到的第2种思路用得比较广泛，也是比较理想的解决方案。然而，直接使用select之类的接口，依然比较复杂，所以各种库和框架百花齐放，都试图对IO多路复用进行封装。此时，库和框架提供的API又可以选择是以同步的方式还是异步的方式来展现。如python的asyncio库中，就通过协程，提供了同步阻塞式的API；如node.js中，就通过回调函数，提供了异步非阻塞式的API。总结因此，我们在讨论同步、异步、阻塞、非阻塞时，必须先明确是在哪个层次进行讨论。比如node.js，我们可以说她在程序员感知层次提供了异步非阻塞的API，也可以说在Linux下，她在线程层次以同步非阻塞的epoll来实现。</li></ul></li></ul></li><li><p>示例：老张爱喝茶，废话不说，煮开水。</p><ul><li><p>出场人物：老张，水壶两把（普通水壶，简称水壶；会响的水壶，简称响水壶）。</p></li><li><p>同步阻塞形式</p><ul><li>老张把水壶放到火上，立等水开。（同步阻塞）<ul><li>老张觉得自己有点傻</li></ul></li></ul></li><li><p>同步非阻塞形式</p><ul><li>老张把水壶放到火上，去客厅看电视，时不时去厨房看看水开没有。（同步非阻塞）<ul><li>老张还是觉得自己有点傻，于是变高端了，买了把会响笛的那种水壶。水开之后，能大声发出嘀~~~~的噪音。</li></ul></li></ul></li><li><p>异步阻塞形式</p><ul><li>老张把响水壶放到火上，立等水开。（异步阻塞）<ul><li>老张觉得这样傻等意义不大</li><li>异步操作是可以被阻塞住的，只不过它不是在处理消息时阻塞，而是在等待消息通知时被阻塞。</li></ul></li></ul></li><li>异步非阻塞形式<ul><li>老张把响水壶放到火上，去客厅看电视，水壶响之前不再去看它了，响了再去拿壶。（异步非阻塞）<ul><li>老张觉得自己聪明了。</li></ul></li></ul></li></ul></li><li><p>总结</p><ul><li><p>所谓同步异步，只是对于水壶而言。</p><ul><li>普通水壶，同步；响水壶，异步。</li><li>虽然都能干活，但响水壶可以在自己完工之后，提示老张水开了。这是普通水壶所不能及的。</li><li>同步只能让调用者去轮询自己（情况2中），造成老张效率的低下。</li></ul></li><li><p>所谓阻塞非阻塞，仅仅对于老张而言。</p><ul><li>立等的老张，阻塞；看电视的老张，非阻塞。</li><li>情况1和情况3中老张就是阻塞的，媳妇喊他都不知道。虽然3中响水壶是异步的，可对于立等的老张没有太大的意义。所以一般异步是配合非阻塞使用的，这样才能发挥异步的效用。</li></ul></li></ul></li><li><p>同步和异步仅仅是关注的消息如何通知的机制，而阻塞与非阻塞关注的是等待消息通知时的状态。也就是说，同步的情况下，是由处理消息者自己去等待消息是否被触发，而异步的情况下是由触发机制来通知处理消息者，所以在异步机制中，处理消息者和触发机制之间就需要一个连接的桥梁(上面例子桥梁就是能响的水壶的响声)</p></li></ul><h4 id="I-O复用技术"><a href="#I-O复用技术" class="headerlink" title="I/O复用技术"></a>I/O复用技术</h4><ul><li><p>I/O多路复用是指内核一旦发现进程指定的一个或者多个I/O条件准备就绪(通过轮询的机制)，它就通知该进程。I/O复用适用于以下场合：</p><ul><li>当客户处理多个描述符（一般是交互式输入或网络套接字），必须使用I/O复用</li><li>当一个客户处理多个套接字时，这种情况很少见，但也可能出现</li><li>当一个TCP服务器既要处理监听套接字，又要处理已连接套接字，一般就要使用I/O复用</li><li>如果一个服务器既要使用TCP，又要使用UDP，一般就要使用I/O复用</li><li>如果一个服务器要处理多个服务或者多个协议，一般就要使用I/O复用</li></ul></li><li><p>与多线程和多进程技术相比，I/O复用技术的最大优势就是系统开销小，系统不必创建进程/线程，也不必维护这些进程/进程，从而大大减小了系统的开销。</p></li></ul><h4 id="I-O模型"><a href="#I-O模型" class="headerlink" title="I/O模型"></a>I/O模型</h4><ul><li><p>Unix下常见的I/O模型有五种，分别是：阻塞式I/O，非阻塞式I/O，I/O复用，信号驱动式I/O和异步I/O。</p></li><li><p>Unix下对于一个输入操作，通常包含两个不同的阶段：</p><ul><li>等待数据准备好</li><li>从内核向进程复制数据</li></ul></li><li><p>例如：对于一次read函数操作来说，数据先会被拷贝到操作系统内核的缓冲区去，然后才会从操作系统内核的缓冲区拷贝到应用程序的地址空间。(比如对于一次socket流传输来说，首先等待网络上的数据到达，然后复制到内核的某个缓冲区，然后再把内核缓冲区的数据复制到进程缓冲区)</p></li></ul><h4 id="阻塞式I-O模型"><a href="#阻塞式I-O模型" class="headerlink" title="阻塞式I/O模型"></a>阻塞式I/O模型</h4><ul><li><p>趣解模型</p><p>  假定一个特定的场景，你的一个好朋友找你借钱，你身上没有充足的现金，于是，你要去银行取钱，银行人多，你只能在那里排队，在这段时间内，你不能离开队伍去干你自己的事情。时间都浪费在排队上面了。这就是典型的阻塞式I/O模型。</p></li><li><p>网络模型</p><p>  默认情况下，所有的套接字都时阻塞的，以数据报套接字为例<br>  <img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/%E9%98%BB%E5%A1%9EIO.png" alt="阻塞I/O"><br>  如上图，我们把recvfrom函数视为系统调用，进程调用recvform函数后就阻塞于此，等待数据报的到达，一直到内核把数据报准备好后，就将数据从内核复制到用户进程，随后用户进程再对这些数据进行处理。</p><p>  这种模型的好处就是，能够及时获得数据，没有延迟，但是就像上面趣解模型中讲到，对用户来说，这段时间一直要处于等到状态，不能去做其他的事情，在性能方面付出了代价。</p></li></ul><h4 id="非阻塞式I-O模型"><a href="#非阻塞式I-O模型" class="headerlink" title="非阻塞式I/O模型"></a>非阻塞式I/O模型</h4><ul><li><p>趣解模型</p><p>  还是去银行取钱，假设你无法忍受一直在那里排队，而是去旁边的商场逛逛，然后隔一段时间回来看看还有在排队没，有的话再继续去逛逛，直到有一次你回来看到没有人排队了为止。这就是非阻塞式I/O模型。</p></li><li><p>网络模型</p><p>  进程把一个套接字设置成非阻塞是在通知内核：当所请求的I/O操作非得把本进程投入睡眠才能完成时，不要把本进程投入睡眠，而是返回一个错误。<br>  <img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/%E9%9D%9E%E9%98%BB%E5%A1%9EIO.png" alt><br>  如上图所示，前三次询问都返回一个错误，即内核没有数据报准备好，到第四次调用recvform函数时，数据被准备好了，它被复制到应用进程缓存区，于是recvform成功返回，应用进程随后处理数据。</p><ul><li><p>优点在于：应用进程不必阻塞在recvfrom调用中，而是可以去处理其他事情</p></li><li><p>缺点在于：如趣解模型中所说，你来回跑银行带来了很大的延时，可能在你来回的路上叫到了你的号。在网络模型中即可以表现在任务完成的响应延迟增大了，隔一段时间轮询一次recvform，数据报可能在两次轮询之间的任意时间内准备好，这将会导致整体数据吞吐量的降低。</p></li></ul></li></ul><h4 id="I-O复用模型"><a href="#I-O复用模型" class="headerlink" title="I/O复用模型"></a>I/O复用模型</h4><ul><li><p>趣解模型</p><p>  现在，银行都会按一个显示屏，上面会显示轮到几号客户了。这个时候，你就不用每次都去跑进去看还有排队没，而是远远的看看显示屏上轮到你没有，如果显示了你的名字，你就去取钱就行了。这就是I/O复用模型</p></li><li><p>网络模型</p><p>  有了I/O复用技术，我们可以调用select或poll类型的函数，阻塞在这两个系统调用中的某一个之上，而不是阻塞在真正的I/O系统调用上。<br>  <img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/IO%E5%A4%8D%E7%94%A8.png" alt><br>  如上图所示，进程受阻于select调用，等待可能多个套接字中的任一个变为可读。当select返回套接字可读这一条件时，应用进程就调用recvfrom把所读的数据报复制到应用进程缓冲区。</p><p>  进程阻塞在select，如果进程还有其他的任务的话就能体现到I/O复用技术的好处，那个任务先返回可读条件，就去执行哪个任务。从单一的等待变成多个任务的同时等待。</p><p>  这种模型较之前的模型来说，可以不必多次轮询内核，而是等到内核的通知。</p></li></ul><h4 id="信号驱动式I-O模型"><a href="#信号驱动式I-O模型" class="headerlink" title="信号驱动式I/O模型"></a>信号驱动式I/O模型</h4><ul><li><p>趣解模型</p><p>  你还是不满意银行的服务，虽然不必排队，但你在商场逛的也不放心啊，你还是要盯着显示屏，深怕没有看到显示屏上面你的名字，于是，银行也退出了全新的服务，你去银行取钱的时候，银行目前人多不能及时处理你的业务，而是叫你留下手机号，等到空闲的时候就短信通知你可以去取钱了。这就是信号驱动式I/O模型。</p></li><li><p>网络模型</p><p>  我们可以用信号，让内核在描述符就绪时发送SIGIO信号告知我们。<br>  <img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/%E4%BF%A1%E5%8F%B7%E9%A9%B1%E5%8A%A8IO.png" alt><br>  如上图所示，进程建立SIGIO的信号处理程序（就要趣解模型中的留下手机号），并通过sigaction系统调用安装一个信号处理函数，该系统调用将立即返回，进程继续工作，知道数据报准备好后，内核产生一个SIGIO信号，告知应用进程以及准备好，于是就在信号处理程序中调用recvfrom读取数据报，并通知主循环数据已准备好待处理，也可以立即通知主循环让他读取数据报。</p><p>  这种模型的好处就是，在数据报没有准备好的期间，应用进程不必阻塞，继续执行主循环，只要等待来自信号处理函数的通知即可。</p></li></ul><h4 id="异步I-O模型"><a href="#异步I-O模型" class="headerlink" title="异步I/O模型"></a>异步I/O模型</h4><ul><li><p>趣解模型</p><p>  你细细的想了想自己取钱时为了什么，无非时借给你的朋友，银行都退出了网上银行服务，你只需要知道你的好朋友的银行卡号，然后在网银中申请转账，银行后台会给你处理，然后把钱打到你朋友的账户下面，等这些都处理好后，银行会给你发一条短信，告诉你转账成功，这个时候你就可以跟你的好朋友说，钱已经打给你了。这就是异步I/O模型，取钱借钱的繁琐事就交给银行后台给你处理吧。</p></li><li><p>网络模型</p><p>  POSIX规范中提供一些函数，这些函数的工作机制是：告知内核启动某个操作，并让内核在整个操作完成后通知我们。<br>  <img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/%E5%BC%82%E6%AD%A5IO.png" alt><br>  如上图所示，我们调用 aioread 函数(POSIX异步I/O函数以 aio 或 lio_ 开头)，给内核传递描述符，缓冲区指针，缓冲区大小和文件偏移，并告诉内核完成整个操作后通知我们。</p><p>  不同于信号驱动式I/O模型，信号是在数据已复制到进程缓冲区才产生的。</p></li></ul><h4 id="各种I-O模型的比较"><a href="#各种I-O模型的比较" class="headerlink" title="各种I/O模型的比较"></a>各种I/O模型的比较</h4><ul><li><p>以一张图来说明五种I/O操作的差异：<br>  <img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/IO%E6%A8%A1%E5%9E%8B%E6%AF%94%E8%BE%83.png" alt></p><ul><li><p>同步I/O操作：导致请求进程阻塞，直到I/O操作完成</p></li><li><p>异步I/O操作：不导致进程阻塞</p><p>前四种都属于同步I/O操作慢系统都会阻塞与recvfrom操作，而异步I/O不会。</p></li></ul></li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li>联系与解释：<ul><li><a href="http://yaocoder.blog.51cto.com/2668309/1308899" target="_blank" rel="noopener">http://yaocoder.blog.51cto.com/2668309/1308899</a></li><li><a href="http://www.jianshu.com/p/02f76566fd90" target="_blank" rel="noopener">http://www.jianshu.com/p/02f76566fd90</a></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> I/O复用 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>随笔2017.11.15</title>
      <link href="/2017/11/15/%E9%9A%8F%E7%AC%9417.11.15/"/>
      <url>/2017/11/15/%E9%9A%8F%E7%AC%9417.11.15/</url>
      
        <content type="html"><![CDATA[<h4 id="随笔"><a href="#随笔" class="headerlink" title="随笔"></a>随笔</h4><p>&emsp;&emsp;最近一段时间说起来也不知道忙了个什么(琐事太多了)，但是收获还挺大的。<br>&emsp;&emsp;前两天领悟到一个道理：和利益沾边的事情，总会有那么些人，让你明白你所认识的世界还是充满了勾心斗角(心累)。<br><a id="more"></a><br>&emsp;&emsp;今天想通了另一个道理：拿得起，放得下(一定要放得下)。<br>&emsp;&emsp;说起来，真心喜欢程序员这一类人。也没什么坏心思(就是有时候有自己的小聪明，但是这又算得了什么)，而且说话干事比较直接点(也好也不好，但是同类人之间真心交流很舒服，嘿嘿！)。<br>&emsp;&emsp;一直听别人说：程序员话少，钱多，死得早。自己也曾这样黑过自己，哈哈。但是，我想说的是换个角度考虑：程序员话少是因为学的东西多了，就知道自己所看到的天地是多么的广阔，所以说前会考虑(有时也是懒得说，说了对方也不明白(没人懂你)，也有时思考的多了，就知道自己的肤浅，从而不敢说了)；赚的钱多是因为从事互联网行业的基本上的工作时间都是996(在毕业才进公司的第一年知识不足，不加班怎么充实自己，怎样提升自己)，用身体和时间换来的金钱和一身病(这个也不一定，但是特别累是肯定的)。一直认为从事算法研究及AI人工智能领域的人，对数学的要求很高从而对大脑的思考要求也很高，最后秃头几率就会变大(是不是有误解。。。)，而一般的程序员，个人感觉还是等上年龄再讨论吧，哈哈。。。。。。<br>&emsp;&emsp;感觉我自己话还挺多的(是不是太菜了？？？)，心也挺大的(心情不好，睡一觉就ok了！)。其实，活着不难，但是好好活下去挺不容易的，所以活着就是最美好的事了，能好好的活下去岂不是更美好！<br>&emsp;&emsp;自己喜欢的事尽早去做，用心去做，所有的问题最终都能得到解决的(不论完美亦或不完美)，感受生活，从未体会到的美好(我是不是还活在梦里，哈哈)。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux中用gdb 查看代码堆栈的信息</title>
      <link href="/2017/11/08/gdb/"/>
      <url>/2017/11/08/gdb/</url>
      
        <content type="html"><![CDATA[<h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><ul><li><p>core dump 一般是在segmentation fault（段错误）的情况下产生的文件，需要通过ulimit来设置才会得到的。</p></li><li><p>调试的话输入： <code>gdb filename core</code></p><ul><li>filename 就是产生 core 文件的可执行文件，core 就是产生的 dump 文件</li></ul></li></ul><a id="more"></a><h4 id="查看栈信息"><a href="#查看栈信息" class="headerlink" title="查看栈信息"></a>查看栈信息</h4><ul><li><p>当程序被停住了，你需要做的第一件事就是查看程序是在哪里停住的。当你的程序调用了一个函数，函数的地址，函数参数，函数内的局部变量都会被压入“栈”（Stack）中。你可以用GDB命令来查看当前的栈中的信息。</p></li><li><p>下面是一些查看函数调用栈信息的GDB命令：</p><ul><li><p>打印当前的函数调用栈的所有信息。</p><ul><li><p>backtrace(简写：bt)</p></li><li><p>backtrace <-n>(简写：bt <-n>)</-n></-n></p><ul><li>n是一个正整数，表示只打印栈顶上n层的栈信息。</li><li>n是一个负整数，表示只打印栈底下n层的栈信息。</li></ul></li></ul></li><li><p>如果你要查看某一层的信息，你需要在切换当前的栈，一般来说，程序停止时，最顶层的栈就是当前栈，如果你要查看栈下面层的详细信息，首先要做的是切换当前栈。</p><ul><li>frame(简写：f)<ul><li>n是一个从0开始的整数，是栈中的层编号。比如：frame 0，表示栈顶，frame 1，表示栈的第二层。</li></ul></li><li>frame args<ul><li>frame命令让你可以从一个帧移动到另一个帧，并打印你所选择的帧。args可以是帧的地址或者编号。如果没有指定参数，frame会输出当前栈帧。</li></ul></li><li>select-frame<ul><li>使用select-frame命令你可以从一个帧移动到另一个帧但是不会输出任何信息，它是frame的无输出版本。</li></ul></li></ul></li><li><p>up (n)</p><ul><li>表示向栈的上面移动n层，可以不打n，表示向上移动一层。</li></ul></li><li><p>down (n)</p><ul><li>表示向栈的下面移动n层，可以不打n，表示向下移动一层。</li></ul></li><li><p>上面的命令，都会打印出移动到的栈层的信息。如果你不想让其打出信息。你可以使用这三个命令：</p><ul><li>select-frame 对应于 frame 命令。</li><li>up-silently 对应于 up 命令。</li><li>down-silently 对应于 down 命令。</li></ul></li></ul></li></ul><ul><li><p>查看当前栈层的信息，你可以用以下GDB命令：</p><ul><li><p>frame (简写：f)</p><ul><li>会打印出这些信息：栈的层编号，当前的函数名，函数参数值，函数所在文件及行号，函数执行到的语句。</li></ul></li><li><p>info frame (简写：info f)</p><ul><li>这个命令会打印出更为详细的当前栈层的信息，只不过，大多数都是运行时的地址。比如：函数地址，调用函数的地址，被调用函数的地址，目前的函数是由什么样的程序语言写成的、函数参数地址及值、局部变量的地址等等。</li></ul></li><li><p>info args</p><ul><li>打印出当前函数的参数名及其值。</li></ul></li><li><p>info locals</p><ul><li>打印出当前函数中所有局部变量及其值。</li></ul></li><li><p>info catch</p><ul><li>打印出当前的函数中的异常处理信息。</li></ul></li></ul></li></ul><h4 id="查看源程序"><a href="#查看源程序" class="headerlink" title="查看源程序"></a>查看源程序</h4><ul><li><p>显示源代码</p><ul><li><p>GDB 可以打印出所调试程序的源代码，当然，在程序编译时一定要加上-g的参数，把源程序信息编译到执行文件中。不然就看不到源程序了。当程序停下来以后，GDB会报告程序停在了那个文件的第几行上。你可以用list命令来打印程序的源代码。</p></li><li><p>list</p><ul><li>显示当前行后面的源程序。</li></ul></li><li><p>list -</p><ul><li>显示当前行前面的源程序。</li></ul></li></ul></li><li><p>搜索源代码</p><ul><li><p>forward-search (简写：search)</p><ul><li>向前面搜索。</li></ul></li><li><p>reverse-search</p><ul><li>全部搜索。</li></ul></li></ul></li><li><p>指定源文件的路径</p><ul><li><p>某些时候，用-g编译过后的执行程序中只是包括了源文件的名字，没有路径名。GDB提供了可以让你指定源文件的路径的命令，以便GDB进行搜索。</p><ul><li><p>directory(简写：dir）</p><ul><li>加一个源文件路径到当前路径的前面。如果你要指定多个路径，UNIX下你可以使用“:”，Windows下你可以使用“;”。</li></ul></li><li><p>show directories</p><ul><li>显示定义了的源文件搜索路径。</li></ul></li></ul></li></ul></li><li><p>源代码的内存</p><ul><li><p>你可以使用info line命令来查看源代码在内存中的地址。</p><ul><li>info line后面可以跟“行号”，“函数名”，“文件名:行号”，“文件名:函数名”，这个命令会打印出所指定的源码在运行时的内存地址。</li></ul></li><li><p>还有一个命令（disassemble）你可以查看源程序的当前执行时的机器码，这个命令会把目前内存中的指令dump出来。</p></li></ul></li></ul><h4 id="查看运行时数据"><a href="#查看运行时数据" class="headerlink" title="查看运行时数据"></a>查看运行时数据</h4><ul><li><p>print (简写：p)</p><ul><li><code>print /</code> 是表达式，是你所调试的程序的语言的表达式（GDB可以调试多种编程语言），是输出的格式，比如，如果要把表达式按16进制的格式输出，那么就是/x(print/x)。</li></ul></li></ul><ul><li><p>表达式</p><ul><li><p>在表达式中，有几种GDB所支持的操作符，它们可以用在任何一种语言中。</p><ul><li><p>@</p><ul><li>是一个和数组有关的操作符，在后面会有更详细的说明。</li></ul></li><li><p>::</p><ul><li>指定一个在文件或是一个函数中的变量。</li></ul></li><li><p>{}</p><ul><li>表示一个指向内存地址的类型为type的一个对象。</li></ul></li></ul></li></ul></li></ul><ul><li><p>程序变量</p><ul><li><p>在GDB中，你可以随时查看以下三种变量的值：</p><ul><li>全局变量（所有文件可见的）</li><li>静态全局变量（当前文件可见的）</li><li>局部变量（当前Scope可见的）</li></ul></li><li><p>如果你的局部变量和全局变量发生冲突（也就是重名），一般情况下是局部变量会隐藏全局变量，也就是说，如果一个全局变量和一个函数中的局部变量同名时，如果当前停止点在函数中，用print显示出的变量的值会是函数中的局部变量的值。如果此时你想查看全局变量的值时，你可以使用“::”操作符：</p><ul><li>file::variable</li><li><p>function::variable</p><ul><li><p>可以通过这种形式指定你所想查看的变量，是哪个文件中的或是哪个函数中的。例如，查看文件f2.c中的全局变量x的值：<code>gdb) p &#39;f2.c&#39;::x</code></p></li><li><p>当然，“::”操作符会和C++中的发生冲突，GDB能自动识别“::”是否C++的操作符，所以你不必担心在调试C++程序时会出现异常。</p></li><li><p>另外，需要注意的是，如果你的程序编译时开启了优化选项，那么在用GDB调试被优化过的程序时，可能会发生某些变量不能访问，或是取值错误码的情况。这个是很正常的，因为优化程序会删改你的程序，整理你程序的语句顺序，剔除一些无意义的变量等，所以在GDB调试这种程序时，运行时的指令和你所编写指令就有不一样，也就会出现你所想象不到的结果。对付这种情况时，需要在编译程序时关闭编译优化。</p></li><li><p>一般来说，几乎所有的编译器都支持编译优化的开关，例如，GNU 的C/C++编译器GCC，你可以使用“-gstabs”选项来解决这个问题。</p></li></ul></li></ul></li></ul></li><li><p>数组</p><ul><li><p>有时候，你需要查看一段连续的内存空间的值。比如数组的一段，或是动态分配的数据的大小。你可以使用GDB的“@”操作符，“@”的左边是第一个内存的地址的值，“@”的右边则你你想查看内存的长度。例如，你的程序中有这样的语句：<code>int *array = (int *) malloc (len * sizeof (int));</code>于是，在GDB调试过程中，你可以以如下命令显示出这个动态数组的取值：</p><ul><li><p>p *array@len</p><ul><li><p>@ 的左边是数组的首地址的值，也就是变量array所指向的内容，右边则是数据的长度，其保存在变量len中，其输出结果，大约是下面这个样子的：</p></li><li><p><code>(gdb) p *array@len</code> <code>$1 = {2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32,34, 36, 38, 40}</code></p></li><li><p>如果是静态数组的话，可以直接用print数组名，就可以显示数组中所有数据的内容了。</p></li></ul></li></ul></li></ul></li></ul><ul><li><p>输出格式</p><ul><li><p>一般来说，GDB会根据变量的类型输出变量的值。但你也可以自定义GDB的输出的格式。例如，你想输出一个整数的十六进制，或是二进制来查看这个整型变量的中的位的情况。要做到这样，你可以使用GDB的数据显示格式：</p><ul><li>x 按十六进制格式显示变量。</li><li>d 按十进制格式显示变量。</li><li>u 按十六进制格式显示无符号整型。</li><li>o 按八进制格式显示变量。</li><li>t 按二进制格式显示变量。</li><li>a 按十六进制格式显示变量。</li><li>c 按字符格式显示变量。</li><li>f 按浮点数格式显示变量。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">(gdb) p i</span><br><span class="line">$21 = 101</span><br><span class="line"></span><br><span class="line">(gdb) p/a i</span><br><span class="line">$22 = 0x65</span><br><span class="line"></span><br><span class="line">(gdb) p/c i</span><br><span class="line">$23 = 101 &apos;e&apos;</span><br><span class="line"></span><br><span class="line">(gdb) p/f i</span><br><span class="line">$24 = 1.41531145e-43</span><br><span class="line"></span><br><span class="line">(gdb) p/x i</span><br><span class="line">$25 = 0x65</span><br><span class="line"></span><br><span class="line">(gdb) p/t i</span><br><span class="line">$26 = 1100101</span><br></pre></td></tr></table></figure></li></ul></li><li><p>自动显示</p><ul><li><p>你可以设置一些自动显示的变量，当程序停住时，或是在你单步跟踪时，这些变量会自动显示。相关的GDB命令是display。</p><ul><li>display</li><li><p>display/</p><ul><li>expr是一个表达式，fmt表示显示的格式，addr表示内存地址，当你用display设定好了一个或多个表达式后，只要你的程序被停下来，GDB会自动显示你所设置的这些表达式的值。</li></ul></li></ul></li><li><p>格式 i 和 s 同样被display支持，一个非常有用的命令是：<code>display/i $pc</code></p><ul><li>$pc是GDB的环境变量，表示着指令的地址，/i则表示输出格式为机器指令码，也就是汇编。于是当程序停下后，就会出现源代码和机器指令码相对应的情形，这是一个很有意思的功能。</li></ul></li><li><p>下面是一些和display相关的GDB命令：</p><ul><li>undisplay</li><li><p>delete display</p><ul><li>删除自动显示，dnums意为所设置好了的自动显式的编号。如果要同时删除几个，编号可以用空格分隔，如果要删除一个范围内的编号，可以用减号表示（如：2-5）</li></ul></li><li><p>disable display</p></li><li><p>enable display</p><ul><li>disable和enalbe不删除自动显示的设置，而只是让其失效和恢复。</li></ul></li><li><p>info display</p><ul><li>查看display设置的自动显示的信息。GDB会打出一张表格，向你报告当然调试中设置了多少个自动显示设置，其中包括，设置的编号，表达式，是否enable。</li></ul></li></ul></li></ul></li><li><p>设置显示选项</p><ul><li><p>set print address (on/off)</p><ul><li>打开地址输出，当程序显示函数信息时，GDB会显出函数的参数地址。系统默认为打开的。</li></ul></li><li><p>show print address</p><ul><li>查看当前地址显示选项是否打开。</li></ul></li><li><p>set print array (on/off)</p><ul><li>打开数组显示，打开后当数组显示时，每个元素占一行，如果不打开的话，每个元素则以逗号分隔。这个选项默认是关闭的。与之相关的两个命令如下，我就不再多说了。</li></ul></li><li><p>show print array</p><ul><li>查看当前数组显示选项是否打开。</li></ul></li><li><p>set print elements</p><ul><li>这个选项主要是设置数组的，如果你的数组太大了，那么就可以指定一个来指定数据显示的最大长度，当到达这个长度时，GDB就不再往下显示了。如果设置为0，则表示不限制。</li></ul></li><li><p>show print elements</p><ul><li>查看print elements的选项信息。</li></ul></li><li><p>set print null-stop</p><ul><li>如果打开了这个选项，那么当显示字符串时，遇到结束符则停止显示。这个选项默认为off。</li></ul></li><li><p>set print pretty (on/off)</p><ul><li>如果打开printf pretty这个选项，那么当GDB显示结构体时会比较漂亮。</li></ul></li><li><p>show print pretty</p><ul><li>查看GDB是如何显示结构体的。</li></ul></li><li><p>set print sevenbit-strings</p><ul><li>设置字符显示，是否按“\nnn”的格式显示，如果打开，则字符串或字符数据按\nnn显示，如“\065”。</li></ul></li><li><p>show print sevenbit-strings</p><ul><li>查看字符显示开关是否打开。</li></ul></li><li><p>set print union</p><ul><li><p>设置显示结构体时，是否显式其内的联合体数据。</p></li><li><p>当打开这个开关时，执行 p foo 命令后，会如下显示：<code>$1 = {it = Tree, form = {tree = Acorn, bug = Cocoon}}</code></p></li><li><p>当关闭这个开关时，执行 p foo 命令后，会如下显示：<code>$1 = {it = Tree, form = {...}}</code></p></li></ul></li><li><p>show print union</p><ul><li>查看联合体数据的显示方式</li></ul></li><li><p>set print object</p><ul><li>在C++中，如果一个对象指针指向其派生类，如果打开这个选项，GDB会自动按照虚方法调用的规则显示输出，如果关闭这个选项的话，GDB就不管虚函数表了。这个选项默认是off。</li></ul></li><li><p>show print object</p><ul><li>查看对象选项的设置。</li></ul></li><li><p>set print static-members</p><ul><li>这个选项表示，当显示一个C++对象中的内容是，是否显示其中的静态数据成员。默认是on。</li></ul></li><li><p>show print static-members</p><ul><li>查看静态数据成员选项设置。</li></ul></li><li><p>set print vtbl</p><ul><li>当此选项打开时，GDB将用比较规整的格式来显示虚函数表时。其默认是关闭的。</li></ul></li><li><p>show print vtbl</p><ul><li>查看虚函数显示格式的选项。</li></ul></li></ul></li><li><p>历史记录</p><ul><li>当你用GDB的print查看程序运行时的数据时，你每一个print都会被GDB记录下来。</li><li>GDB会以$1, $2, $3 …..这样的方式为你每一个print命令编上号。于是，你可以使用这个编号访问以前的表达式，如$1。这个功能所带来的好处是，如果你先前输入了一个比较长的表达式，如果你还想查看这个表达式的值，你可以使用历史记录来访问，省去了重复输入。</li></ul></li></ul><ul><li><p>GDB环境变量</p><ul><li><p>你可以在GDB的调试环境中定义自己的变量，用来保存一些调试程序中的运行数据。要定义一个GDB的变量很简单只需使用GDB的set命令。GDB的环境变量和UNIX一样，也是以$起头。如：<code>set $foo = *object_ptr</code></p></li><li><p>使用环境变量时，GDB会在你第一次使用时创建这个变量，而在以后的使用中，则直接对其賦值。环境变量没有类型，你可以给环境变量定义任一的类型。包括结构体和数组。</p></li><li><p>show convenience</p><ul><li>该命令查看当前所设置的所有的环境变量。</li></ul></li><li><p>这是一个比较强大的功能，环境变量和程序变量的交互使用，将使得程序调试更为灵活便捷。例如：<code>set $i = 0</code> <code>print bar[$i++]-&gt;contents</code></p><ul><li>于是，当你就不必，<code>print bar[0]-&gt;contents, printbar[1]-&gt;contents</code> 地输入命令了。输入这样的命令后，只用敲回车，重复执行上一条语句，环境变量会自动累加，从而完成逐个输出的功能。</li></ul></li></ul></li></ul><ul><li><p>查看寄存器</p><ul><li><p>要查看寄存器的值，很简单，可以使用如下命令：</p><ul><li><p>info registers</p><ul><li>查看寄存器(可指定)的情况。（除了浮点寄存器）</li></ul></li><li><p>info all-registers</p><ul><li>查看所有寄存器的情况。（包括浮点寄存器）</li></ul></li><li><p>寄存器中放置了程序运行时的数据，比如程序当前运行的指令地址（ip），程序的当前堆栈地址（sp）等等。你同样可以使用print命令来访问寄存器的情况，只需要在寄存器名字前加一个 $ 符号就可以了。如：<code>p $eip</code>。</p></li></ul></li></ul></li></ul><h4 id="改变程序的执行"><a href="#改变程序的执行" class="headerlink" title="改变程序的执行"></a>改变程序的执行</h4><ul><li>一旦使用GDB挂上被调试程序，当程序运行起来后，你可以根据自己的调试思路来动态地在GDB中更改当前被调试程序的运行线路或是其变量的值，这个强大的功能能够让你更好的调试你的程序，比如，你可以在程序的一次运行中走遍程序的所有分支。</li></ul><ul><li><p>修改变量值</p><ul><li><p>修改被调试程序运行时的变量值，在GDB中很容易实现，使用GDB的print命令即可完成。如：<code>(gdb) print x=4</code></p><ul><li>x=4这个表达式是C/C++的语法，意为把变量x的值修改为4。</li></ul></li><li><p>在某些时候，很有可能你的变量和GDB中的参数冲突，此时，你可以使用setvar命令来告诉GDB，width不是你GDB的参数，而是程序的变量名，如：<code>(gdb) set var width=47</code></p></li><li><p>另外，还可能有些情况，GDB并不报告这种错误，所以保险起见，在你改变程序变量取值时，最好都使用setvar格式的GDB命令。</p></li></ul></li><li><p>跳转执行</p><ul><li><p>一般来说，被调试程序会按照程序代码的运行顺序依次执行。GDB提供了乱序执行的功能，也就是说，GDB可以修改程序的执行顺序，可以让程序执行随意跳跃。这个功能可以由GDB的jump命令来完：</p><ul><li><p>jump</p><ul><li><p>指定下一条语句的运行点。可以是文件的行号，可以是file:line格式，可以是+num这种偏移量格式。表式着下一条运行语句从哪里开始。</p></li><li><p>注意，jump命令不会改变当前的程序栈中的内容，所以，当你从一个函数跳到另一个函数时，当函数运行完返回时进行弹栈操作时必然会发生错误，可能结果还是非常奇怪的，甚至于产生程序Core Dump。所以最好是同一个函数中进行跳转。</p></li><li><p>熟悉汇编的人都知道，程序运行时，有一个寄存器用于保存当前代码所在的内存地址。所以，jump命令也就是改变了这个寄存器中的值。于是，你可以使用<code>set $pc</code>来更改跳转执行的地址。如：<code>set $pc = 0x485</code></p></li></ul></li></ul></li></ul></li></ul><ul><li><p>产生信号量</p><ul><li><p>使用singal命令，可以产生一个信号量给被调试的程序。如：中断信号Ctrl+C。这非常方便于程序的调试，可以在程序运行的任意位置设置断点，并在该断点用GDB产生一个信号量，这种精确地在某处产生信号非常有利程序的调试。</p><ul><li>语法是：signal ，UNIX的系统信号量通常从1到15。所以取值也在这个范围。</li></ul></li><li><p>single命令和shell的kill命令不同，系统的kill命令发信号给被调试程序时，是由GDB截获的，而single命令所发出一信号则是直接发给被调试程序的。</p></li></ul></li><li><p>强制函数返回</p><ul><li><p>如果你的调试断点在某个函数中，并还有语句没有执行完。你可以使用return命令强制函数忽略还没有执行的语句并返回。</p><ul><li>return<ul><li>使用return命令取消当前函数的执行，并立即返回，如果指定了，那么该表达式的值会被认作函数的返回值。</li></ul></li></ul></li></ul></li></ul><ul><li><p>强制调用函数</p><ul><li><p>call</p><ul><li>表达式中可以一是函数，以此达到强制调用函数的目的。并显示函数的返回值，如果函数返回值是void，那么就不显示。</li></ul></li><li><p>另一个相似的命令也可以完成这一功能——print，print后面可以跟表达式，所以也可以用他来调用函数，print和call的不同是，如果函数返回void，call则不显示，print则显示函数返回值，并把该值存入历史数据中。</p></li></ul></li></ul><h4 id="在不同语言中使用GDB"><a href="#在不同语言中使用GDB" class="headerlink" title="在不同语言中使用GDB"></a>在不同语言中使用GDB</h4><ul><li><p>下面是几个相关于GDB语言环境的命令：</p><ul><li><p>show language</p><ul><li>查看当前的语言环境。如果GDB不能识为你所调试的编程语言，那么，C语言被认为是默认的环境。</li></ul></li><li><p>info frame</p><ul><li>查看当前函数的程序语言。</li></ul></li><li><p>info source</p><ul><li>查看当前文件的程序语言。</li></ul></li><li><p>如果GDB没有检测出当前的程序语言，那么你也可以手动设置当前的程序语言。使用set language命令即可做到。</p></li></ul></li><li><p>当set language命令后什么也不跟的话，你可以查看GDB所支持的语言种类：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(gdb) set language</span><br><span class="line">The currently understood settings are:</span><br><span class="line"></span><br><span class="line">local or auto Automatic setting based on source file</span><br><span class="line">c Use the C language</span><br><span class="line">c++ Use the C++ language</span><br><span class="line">asm Use the Asm language</span><br><span class="line">chill Use the Chill language</span><br><span class="line">fortran Use the Fortran language</span><br><span class="line">java Use the Java language</span><br><span class="line">modula-2 Use the Modula-2 language</span><br><span class="line">pascal Use the Pascal language</span><br><span class="line">scheme Use the Scheme language</span><br></pre></td></tr></table></figure></li><li><p>于是你可以在set language后跟上被列出来的程序语言名，来设置当前的语言环境</p></li></ul><h4 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h4><ul><li><p>参考：</p><ol><li><p><a href="http://www.cnblogs.com/chengliangsheng/p/3597010.html" target="_blank" rel="noopener">http://www.cnblogs.com/chengliangsheng/p/3597010.html</a></p></li><li><p><a href="http://www.voidcn.com/article/p-gddyzspu-wz.html" target="_blank" rel="noopener">http://www.voidcn.com/article/p-gddyzspu-wz.html</a></p></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GDB </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>centos7 mysql数据库安装和配置</title>
      <link href="/2017/11/05/centos7MySQL%E5%AE%89%E8%A3%85/"/>
      <url>/2017/11/05/centos7MySQL%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><ul><li><p>在 centos 7 安装 MySQL 时遇见了一些问题，后面按照这篇转载的文章安装成功，而且网上许多的文章都过时了，故在此记录，以备以后使用。</p></li><li><p>目前我用的是 centos6.9 就不演示了，下面是原文的环境及安装操作。</p></li></ul><a id="more"></a><h4 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h4><ul><li><p>yum update升级以后的系统版本为</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@yl-web yl]# cat /etc/redhat-release</span><br><span class="line">CentOS Linux release 7.1.1503 (Core)</span><br></pre></td></tr></table></figure></li></ul><h4 id="mysql安装"><a href="#mysql安装" class="headerlink" title="mysql安装"></a>mysql安装</h4><ul><li><p>一般网上给出的资料都是</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#yum install mysql</span><br><span class="line">#yum install mysql-server</span><br><span class="line">#yum install mysql-devel</span><br></pre></td></tr></table></figure></li><li><p>安装mysql和mysql-devel都成功，但是安装mysql-server失败，如下：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@yl-web yl]# yum install mysql-server</span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * base: mirrors.sina.cn</span><br><span class="line"> * extras: mirrors.sina.cn</span><br><span class="line"> * updates: mirrors.sina.cn</span><br><span class="line">No package mysql-server available.</span><br><span class="line">Error: Nothing to do</span><br></pre></td></tr></table></figure></li><li><p>查资料发现是CentOS 7 版本将MySQL数据库软件从默认的程序列表中移除，用mariadb代替了。</p></li><li><p>有两种解决办法：</p><ul><li><p>方法一：安装mariadb</p><ul><li><p>MariaDB数据库管理系统是MySQL的一个分支，主要由开源社区在维护，采用GPL授权许可。开发这个分支的原因之一是：甲骨文公司收购了MySQL后，有将MySQL闭源的潜在风险，因此社区采用分支的方式来避开这个风险。MariaDB的目的是完全兼容MySQL，包括API和命令行，使之能轻松成为MySQL的代替品。</p></li><li><p>安装mariadb，大小59 M。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@yl-web yl]# yum install mariadb-server mariadb</span><br></pre></td></tr></table></figure></li><li><p>mariadb数据库的相关命令是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mariadb  #启动MariaDB</span><br><span class="line"></span><br><span class="line">systemctl stop mariadb  #停止MariaDB</span><br><span class="line"></span><br><span class="line">systemctl restart mariadb  #重启MariaDB</span><br><span class="line"></span><br><span class="line">systemctl enable mariadb  #设置开机启动</span><br></pre></td></tr></table></figure></li><li><p>所以先启动数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@yl-web yl]# systemctl start mariadb</span><br></pre></td></tr></table></figure></li><li><p>然后就可以正常使用mysql了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@yl-web yl]# mysql -u root -p</span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MariaDB connection id is 3</span><br><span class="line">Server version: 5.5.41-MariaDB MariaDB Server</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2014, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line">Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| test               |</span><br><span class="line">+--------------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt;</span><br></pre></td></tr></table></figure></li><li><p>安装mariadb后显示的也是 MariaDB [(none)]&gt; ，可能看起来有点不习惯。下面是第二种方法。</p></li></ul></li><li><p>方法二：官网下载安装mysql-server</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</span><br><span class="line"># rpm -ivh mysql-community-release-el7-5.noarch.rpm</span><br><span class="line"># yum install mysql-community-server</span><br></pre></td></tr></table></figure><ul><li><p>安装成功后重启mysql服务。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># service mysqld restart</span><br></pre></td></tr></table></figure></li><li><p>初次安装mysql，root账户没有密码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[root@yl-web yl]# mysql -u root </span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 3</span><br><span class="line">Server version: 5.6.26 MySQL Community Server (GPL)</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2015, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| test               |</span><br><span class="line">+--------------------+</span><br><span class="line">4 rows in set (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure></li><li><p>设置密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; set password for &apos;root&apos;@&apos;localhost&apos; =password(&apos;password&apos;);</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><ul><li>不需要重启数据库即可生效。</li></ul></li><li><p>在mysql安装过程中如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Installed:</span><br><span class="line">  mysql-community-client.x86_64 0:5.6.26-2.el7                mysql-community-devel.x86_64 0:5.6.26-2.el7</span><br><span class="line">  mysql-community-libs.x86_64 0:5.6.26-2.el7                  mysql-community-server.x86_64 0:5.6.26-2.el7</span><br><span class="line"></span><br><span class="line">Dependency Installed:</span><br><span class="line">  mysql-community-common.x86_64 0:5.6.26-2.el7</span><br><span class="line"></span><br><span class="line">Replaced:</span><br><span class="line">  mariadb.x86_64 1:5.5.41-2.el7_0          mariadb-devel.x86_64 1:5.5.41-2.el7_0   mariadb-libs.x86_64 1:5.5.41-2.el7_0</span><br><span class="line">  mariadb-server.x86_64 1:5.5.41-2.el7_0</span><br></pre></td></tr></table></figure></li><li><p>所以安装完以后mariadb自动就被替换了，将不再生效。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@yl-web yl]# rpm -qa |grep mariadb</span><br><span class="line">[root@yl-web yl]#</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h4 id="配置mysql"><a href="#配置mysql" class="headerlink" title="配置mysql"></a>配置mysql</h4><ul><li><p>编码</p><ul><li><p>mysql配置文件为/etc/my.cnf</p></li><li><p>最后加上编码配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mysql]</span><br><span class="line">default-character-set =utf8</span><br></pre></td></tr></table></figure><ul><li>这里的字符编码必须和/usr/share/mysql/charsets/Index.xml中一致。</li></ul></li></ul></li></ul><ul><li><p>远程连接设置</p><ul><li><p>把在所有数据库的所有表的所有权限赋值给位于所有IP地址的root用户。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; grant all privileges on *.* to root@&apos;%&apos;identified by &apos;password&apos;;</span><br></pre></td></tr></table></figure></li><li><p>如果是新用户而不是root，则要先新建用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;create user &apos;username&apos;@&apos;%&apos; identified by &apos;password&apos;;</span><br></pre></td></tr></table></figure><p>此时就可以进行远程连接了。</p></li></ul></li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li>时刻关注新的技术与一些重要的工具的版本，及时更新一些文章的错误</li></ul><h4 id="出处"><a href="#出处" class="headerlink" title="出处"></a>出处</h4><ul><li>转载：<a href="http://www.cnblogs.com/starof/p/4680083.html" target="_blank" rel="noopener">http://www.cnblogs.com/starof/p/4680083.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>看书 &amp; 积累</title>
      <link href="/2017/11/05/%E7%9C%8B%E4%B9%A6&amp;%E7%A7%AF%E7%B4%AF/"/>
      <url>/2017/11/05/%E7%9C%8B%E4%B9%A6&amp;%E7%A7%AF%E7%B4%AF/</url>
      
        <content type="html"><![CDATA[<h4 id="随笔–看书-amp-积累"><a href="#随笔–看书-amp-积累" class="headerlink" title="随笔–看书 &amp; 积累"></a>随笔–看书 &amp; 积累</h4><ul><li>积累</li></ul><p>&emsp;&emsp;今天看了一篇关于创作的文章，稍有感触。<br>&emsp;&emsp;文章的作者说自己对自己的输出(包括写博客等)要求比较高(原创、高质量)，所以身边能谈得来的没有几个。看完后，想了想，感觉还是需要分层次与阶段来说的。</p><a id="more"></a><p>&emsp;&emsp;一开始，我就想到了我自己。最近的博文有原创的，也有转载的，第一时间就感觉自己的输出太水了。但是转念一想，自己还是一名学生，知识的积累都不够，何谈全部原创输出，更何况高质量。等到知识积累的足够，自然而然的就有了输出的来源，在质量上也就同样的有了保证。<br>&emsp;&emsp;所以说看清自己的位置，多思考，有了自己的判断，再来看待问题也就能够不那么容易动摇亦或冲动了。</p><ul><li>看书</li></ul><p>&emsp;&emsp;说到积累与思考，顺便分析下最近看书的一些问题。<br>&emsp;&emsp;首先自己对知识的积累大部分通过三个途径：一是看书、二是看视频及看博客、三是与同学和老师交流。这么长时间来，也有些感受了。<br>&emsp;&emsp;就看书简单来说，看书知识全面，而且在看书的过程中做好笔记加强记忆，而且能够让自己有空间独立思考(时刻问自己为什么)。<br>&emsp;&emsp;看视频及博客，学到的知识主要，但是总有种被人牵着鼻子走的感觉，少了自己独立思考的空间(是什么，为什么，这些都已经说清了)，最终发现都听懂了，但是真正自己来做，却是无从下手或者就不会做。<br>&emsp;&emsp;与同学和老师交流，获益多多。但是一般最多与同学交流(能真正说到一起的却寥寥无几)，老师也只是偶尔交流(老师也有事要忙的)。<br>&emsp;&emsp;所以，我在知识积累的路上，从看视频与博客到看书与博客，最终看书与看博客占70%，与同学交流20%，与老师交流10%。也许以后还会用更好的方式，但是目前还在探索。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>STDIN_FILENO 的作用及与 stdin 的区别</title>
      <link href="/2017/11/03/STDIN_FILENO/"/>
      <url>/2017/11/03/STDIN_FILENO/</url>
      
        <content type="html"><![CDATA[<h4 id="1-STDIN-FILENO-的作用及与-stdin-的区别"><a href="#1-STDIN-FILENO-的作用及与-stdin-的区别" class="headerlink" title="1. STDIN_FILENO 的作用及与 stdin 的区别"></a>1. STDIN_FILENO 的作用及与 stdin 的区别</h4><ul><li><p>STDIN_FILENO的作用</p><ul><li><p>STDIN_FILENO属于系统API接口库，其声明为 int 型，是一个打开文件句柄，对应的函数主要包括 <code>open/read/write/close</code> 等系统级调用。</p></li><li><p>操作系统一级提供的文件API都是以文件描述符来表示文件。STDIN_FILENO 就是标准输入设备（一般是键盘）的文件描述符。</p></li></ul></li><li><p>区别</p><ul><li><p>数据类型不一致：</p><ul><li><p>stdin 类型为 FILE*</p></li><li><p>STDIN_FILENO 类型为 int</p></li><li><p>使用 <code>stdin</code> 的函数主要有：fread、fwrite、fclose等，基本上都以f开头</p></li><li><p>使用 <code>STDIN_FILENO</code> 的函数有：read、write、close等</p></li></ul><a id="more"></a></li><li><p>stdin 等是 <code>FILE *</code> 类型，属于标准I/O，高级的输入输出函数。</p><ul><li><code>STDIN_FILENO</code> 等是文件描述符，是非负整数，一般定义为0, 1, 2，属于没有buffer的I/O，直接调用系统调用，在 <code>#include &lt;unistd.h&gt;</code>。</li></ul></li><li><p><code>STDIN_FILENO</code> 是标准输入的文件描述符，详见 <code>/usr/include/unistd.h</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Standard file descriptors. */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STDIN_FILENO 0  <span class="comment">/* Standard input. */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STDOUT_FILENO 1  <span class="comment">/* Standard output. */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STDERR_FILENO 2  <span class="comment">/* Standard error output. */</span></span></span><br></pre></td></tr></table></figure></li><li><p>层次不一样。</p><ul><li>STDIN 属于标准库处理的输入流，其声明为 FILE 型的，对应的函数前面都有f开头，如fopen/fread/fwrite/fclose 标准库调用等</li><li><p>STDIN_FILENO属于系统API接口库，其声明为 int 型，是一个打开文件句柄，对应的函数主要包括 open/read/write/close 等系统级调用。</p></li><li><p>标准库内封装了系统 API 调用，如 fread 内部实现调用 read。</p></li></ul></li><li><p>操作系统一级提供的文件API都是以文件描述符来表示文件。 STDIN_FILENO 就是标准输入设备（一般是键盘）的文件描述符。</p></li></ul></li></ul><h4 id="2-出处"><a href="#2-出处" class="headerlink" title="2. 出处"></a>2. 出处</h4><ul><li><p>在学习网络编程时，看到说明文档里的示例代码遇到，不明白，所以在此记录，留着复习查看</p></li><li><p>转载：<a href="http://blog.csdn.net/yeyuangen/article/details/6781999" target="_blank" rel="noopener">http://blog.csdn.net/yeyuangen/article/details/6781999</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Others </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>tee函数</title>
      <link href="/2017/11/03/tee%E5%87%BD%E6%95%B0/"/>
      <url>/2017/11/03/tee%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="tee"><a href="#tee" class="headerlink" title="tee"></a>tee</h4><ul><li><p>说明：在两个管道文件描述符之间复制数据，同是零拷贝。但它不消耗数据，数据被操作之后，仍然可以用于后续操作。</p></li><li><p>头文件：<code>#define _GNU_SOURCE</code> <code>#include &lt;fcntl.h&gt;</code></p></li><li><p>原型：<code>long tee(int fd_in, int fd_out, size_t len, unsigned int flags);</code></p>  <a id="more"></a><ul><li>fdin参数：待读取数据的文件描述符。</li><li>fdout参数：待写入数据的文件描述符。</li><li>len参数：表示复制的数据的长度。</li><li>flags参数：同<a href="http://roux.top/2017/11/02/splice%E5%87%BD%E6%95%B0/">splice函数</a>。</li></ul></li><li><p>返回值：</p><ul><li>返回值&gt;0：表示复制的字节数。</li><li>返回0：表示没有复制任何数据。</li><li>返回-1：表示失败，并设置errno。</li></ul></li><li><p>错误代码：</p><ul><li>EINVAL：fd_in 或者 fd_out 不是管道描述符，或者 fd_in 和 fd_out 是同一个管道描述符。</li><li>ENOMEM：Out of memory。</li></ul></li><li><p>示例：</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*splice()和tee()实现将文件"./test1.txt"同时拷贝到文件"./test2.txt"和"./test3.txt"中*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fd1 = open(<span class="string">"./test1.txt"</span>, O_RDONLY);</span><br><span class="line">    <span class="keyword">int</span> fd2 = open(<span class="string">"./test2.txt"</span>, O_RDWR| O_CREAT | O_TRUNC, <span class="number">0666</span>);</span><br><span class="line">    <span class="keyword">int</span> fd3 = open(<span class="string">"./test3.txt"</span>, O_RDWR| O_CREAT | O_TRUNC, <span class="number">0666</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*用于向"./test2.txt"输入数据*/</span></span><br><span class="line">    <span class="keyword">int</span> pipefd2[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*用于向"./test3.txt"输入数据*/</span></span><br><span class="line">    <span class="keyword">int</span> pipefd3[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line">    ret = pipe(pipefd2);</span><br><span class="line">    <span class="keyword">if</span>(ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">"pipe"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ret = pipe(pipefd3);</span><br><span class="line">    <span class="keyword">if</span>(ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">"pipe"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="comment">/*将fd1文件的内容输入管道pipefd2中*/</span></span><br><span class="line">    len = splice(fd1, <span class="literal">NULL</span>, pipefd2[<span class="number">1</span>], <span class="literal">NULL</span>, <span class="number">1024</span>, SPLICE_F_MORE);</span><br><span class="line">    <span class="keyword">if</span>(len &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        perror(<span class="string">"splice"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*将管道pipefd2的内容复制到管道pipefd3中，不消耗管道pipefd2上的数据，管道pipefd2上的数据可以用于后续操作*/</span></span><br><span class="line">    tee(pipefd2[<span class="number">0</span>], pipefd3[<span class="number">1</span>], <span class="number">1024</span>, SPLICE_F_NONBLOCK);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*将管道pipefd2的内容写入fd2文件中*/</span></span><br><span class="line">    len = splice(pipefd2[<span class="number">0</span>], <span class="literal">NULL</span>, fd2, <span class="literal">NULL</span>, <span class="number">1024</span>, SPLICE_F_MORE);</span><br><span class="line">    <span class="keyword">if</span>(len &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">"splice"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*将管道pipefd3的内容写入fd3文件中*/</span></span><br><span class="line">    len = splice(pipefd3[<span class="number">0</span>], <span class="literal">NULL</span>, fd3, <span class="literal">NULL</span>, <span class="number">1024</span>, SPLICE_F_MORE);</span><br><span class="line">    <span class="keyword">if</span>(len &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">"splice"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    close(fd1);</span><br><span class="line">    close(fd2);</span><br><span class="line">    close(fd3);</span><br><span class="line">    close(pipefd2[<span class="number">0</span>]);</span><br><span class="line">    close(pipefd2[<span class="number">1</span>]);</span><br><span class="line">    close(pipefd3[<span class="number">0</span>]);</span><br><span class="line">    close(pipefd3[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//测试</span><br><span class="line">[roux@Vkey 桌面]$ ls</span><br><span class="line">tee.c  test1.txt</span><br><span class="line">[roux@Vkey 桌面]$ gcc tee.c</span><br><span class="line">[roux@Vkey 桌面]$ ./a.out</span><br><span class="line">[roux@Vkey 桌面]$ ls</span><br><span class="line">a.out  tee.c  test1.txt  test2.txt  test3.txt</span><br><span class="line">[roux@Vkey 桌面]$ cat test2.txt</span><br><span class="line">hello world!</span><br><span class="line">[roux@Vkey 桌面]$ cat test3.txt</span><br><span class="line">hello world!</span><br><span class="line">[roux@Vkey 桌面]$ cat test1.txt</span><br><span class="line">hello world!</span><br><span class="line">[roux@Vkey 桌面]$</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 零拷贝 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>splice函数</title>
      <link href="/2017/11/02/splice%E5%87%BD%E6%95%B0/"/>
      <url>/2017/11/02/splice%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h4><ul><li><p>说明：splice函数用于在两个文件描述符(官方文档解释为管道)之间的移动数据</p></li><li><p>头文件：<code>#define _GNU_SOURCE 1</code> <code>#include &lt;fcntl.h&gt;</code></p><ul><li><code>#define _GNU_SOURCE 1</code>：一定要放在 <code>#include &lt;fcntl.h&gt;</code> 的前面</li><li>因为 <code>#include &lt;fcntl.h&gt;</code> 头文件的加载需要用到，否则会报错，错误在隐式声明 <code>splice</code> 函数，而且对于 <code>splice</code> 函数的flags 参数不识别</li></ul></li><li><p>原型：<code>long splice(int fd_in, loff_t *off_in, int fd_out, loff_t *off_out, size_t len, unsigned int flags);</code></p>  <a id="more"></a><ul><li>fd_in： 是待输入描述符。<ul><li>如果它是一个管道文件描述符，则 <code>off_in</code> 必须设置为 NULL；</li><li>如果 <code>off_in</code> 不是一个管道文件描述符（比如socket），那么 off_in 表示从输入数据流的何处开始读取数据，此时若为 NULL，则从输入数据流的当前偏移位置读入。</li></ul></li><li><p>fd_out/off_out： 含义与 <code>fd_in/off_in</code> 相同，不过用于输出数据流。</p></li><li><p>len：指定移动数据的长度。</p></li><li><p>flags：则控制数据如何移动，它可以设置成下表中的某些值的按位或。</p><ul><li>SPLICE_F_MOVE：如果合适的话，按整页内存移动数据。这只是给内核的一个提示。不过，因为它的实现存在BUG，所以自内核2.6.21后，它实际上没有任何效果</li><li>SPLICE_F_NONBLOCK：非阻塞的 splice 操作，但实际效果还会受文件描述符本身的阻塞状态影响</li><li>SPLICE_F_MORE：告知操作系统内核下一个 splice 系统调用将会有更多的数据传来</li><li>SPLICE_F_GIFT：对 splice 没有效果</li></ul></li><li><p><strong>注意：</strong>使用splice函数时，fd_in和fd_out必须至少有一个是管道文件描述符。</p></li></ul></li><li><p>返回值：</p><ul><li>返回值&gt;0：表示移动的字节数。</li><li>返回0：表示没有数据可以移动。这通常发生在从管道中读数据（fd_in是管道文件描述符）而该管道没有被写入任何数据时。</li><li>返回-1；表示失败，并设置errno。</li></ul></li><li><p>错误代码：</p><ul><li>EBADF：所指文件描述符有错。</li><li>EINVAL：目标文件系统不支持 splice，或者目标文件以追加方式打开，或者两个文件描述符都不是管道描述符，或者某个 offset 参数被用于不支持随机访问的设备（比如字符设备）。</li><li>ENOMEM：内存不够。</li><li>ESPIPE：某个参数是管道描述符，但其偏移不是NULL。<code>(参数fd_in（或fd_out）是管道文件描述符，而off_in（或off_out）不为NULL)</code></li></ul></li><li><p>示例：</p></li><li><p>由于网上的大多数的代码运行起来都是错误的，对于很多人形成了误导，而且基本上网上的版本都一样，都没测试过。所以本示例会带测试结果，以供参考。</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用splice实现聊天功能</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _GNU_SOURCE 1  <span class="comment">//很重要，一定放在#include &lt;fcntl.h&gt;前面</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;poll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFFER_SIZE 64</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( argc &lt;= <span class="number">2</span> )&#123;</span><br><span class="line">        <span class="built_in">printf</span>( <span class="string">"usage: %s ip_address port_number！\n"</span>, basename(argv[<span class="number">0</span>]));</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* ip = argv[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> port = atoi(argv[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server_address</span>;</span></span><br><span class="line">    bzero(&amp;server_address, <span class="keyword">sizeof</span>( server_address ));</span><br><span class="line">    server_address.sin_family = AF_INET;</span><br><span class="line">    inet_pton(AF_INET, ip, &amp;server_address.sin_addr);</span><br><span class="line">    server_address.sin_port = htons( port );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> sockfd = socket(PF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    assert(sockfd &gt;= <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (connect(sockfd, (struct sockaddr*)&amp;server_address, <span class="keyword">sizeof</span>(server_address)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>( <span class="string">"connection failed\n"</span> );</span><br><span class="line">        close( sockfd );</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span> <span class="title">fds</span>[2];</span></span><br><span class="line">    fds[<span class="number">0</span>].fd = <span class="number">0</span>;</span><br><span class="line">    fds[<span class="number">0</span>].events = POLLIN;</span><br><span class="line">    fds[<span class="number">0</span>].revents = <span class="number">0</span>;</span><br><span class="line">    fds[<span class="number">1</span>].fd = sockfd;</span><br><span class="line">    fds[<span class="number">1</span>].events = POLLIN | POLLRDHUP;</span><br><span class="line">    fds[<span class="number">1</span>].revents = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> read_buf[BUFFER_SIZE];</span><br><span class="line">    <span class="keyword">int</span> pipefd[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">int</span> ret = pipe(pipefd);</span><br><span class="line">    assert(ret != <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        ret = poll(fds, <span class="number">2</span>, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span>(ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"poll failure\n"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(fds[<span class="number">1</span>].revents &amp; POLLRDHUP) &#123;</span><br><span class="line">            <span class="built_in">printf</span>( <span class="string">"server close the connection\n"</span> );</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(fds[<span class="number">1</span>].revents &amp; POLLIN) &#123;</span><br><span class="line">            <span class="built_in">memset</span>(read_buf, <span class="string">'\0'</span>, BUFFER_SIZE);</span><br><span class="line">            recv(fds[<span class="number">1</span>].fd, read_buf, BUFFER_SIZE<span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="built_in">printf</span>( <span class="string">"%s\n"</span>, read_buf );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(fds[<span class="number">0</span>].revents &amp; POLLIN) &#123;</span><br><span class="line">            <span class="comment">//将输入流的客户端数据定向到管道中</span></span><br><span class="line">            ret = splice(<span class="number">0</span>, <span class="literal">NULL</span>, pipefd[<span class="number">1</span>], <span class="literal">NULL</span>, <span class="number">55555</span>, SPLICE_F_MORE | SPLICE_F_MOVE);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//将管道的输出定向到sockfd连接文件符上</span></span><br><span class="line">            ret = splice(pipefd[<span class="number">0</span>], <span class="literal">NULL</span>, sockfd, <span class="literal">NULL</span>, <span class="number">55555</span>, SPLICE_F_MORE | SPLICE_F_MOVE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    close( sockfd );</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试(利用 <code>nc -l</code> 来监听一个端口)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">客户端测试</span><br><span class="line">[roux@Vkey test]$ nc -l 5555</span><br><span class="line">hello   //客户端发送消息</span><br><span class="line">i am server //接收服务器的消息</span><br><span class="line">^C  //结束</span><br><span class="line">[roux@Vkey test]$</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">服务器测试</span><br><span class="line">[roux@Vkey test]$ ./a.out 127.0.0.1 5555</span><br><span class="line">hello   //接收客户端的消息</span><br><span class="line"></span><br><span class="line">i am server //服务器发送消息</span><br><span class="line">server close the connection //检测到客户端链接关闭</span><br><span class="line">[roux@Vkey test]$</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="- 总结"></a>- 总结</h4><ul><li>网上的资料或者代码，一定要亲测通过，否则只是单纯的复制粘贴，这样还不如不写出来</li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 零拷贝 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>sendfile函数</title>
      <link href="/2017/10/31/sendfile%E5%87%BD%E6%95%B0/"/>
      <url>/2017/10/31/sendfile%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="sendfile"><a href="#sendfile" class="headerlink" title="sendfile"></a>sendfile</h4><ul><li><p>说明：sendfile函数在两个文件描述符之间直接传递数据（完全在内核中操作），从而避免了内核缓冲区和用户缓冲区之间的数据拷贝。<code>(一般用于当所传送的文件不需要被用户修改的情况)</code></p></li><li><p>头文件：<code>#include &lt;sys/sendfile.h&gt;</code></p></li><li><p>原型：<code>ssize_t sendfile(int out_fd,int in_fd, off_t * offset,size_t count);</code></p>  <a id="more"></a><ul><li><p>out_fd：待写入内容的文件描述符。<strong><code>(out_fd可以是任何文件(Linux2.6之后))</code></strong></p></li><li><p>in_fd：待读出内容的文件描述符。<strong><code>(in_fd必须是一个支持类似mmap函数的文件描述符，即它必须指向真实的文件(例如用open打开的文件)，不能是socket和管道)</code></strong></p></li><li><p>offset：指定从读入文件流的哪个位置开始读，如果为空，则使用读入文件流默认的起始位置。</p></li><li><p>count：指定在文件描述符in_fd和out_fd之间传输的字节数(一般用<a href="http://roux.top/2017/10/24/stat%E7%B3%BB%E5%88%97%E5%87%BD%E6%95%B0/">stat系列函数</a>来获得打开文件的大小)。</p></li></ul></li><li><p>错误代码：</p><ul><li>EAGAIN： 无阻塞I/O设置O_NONBLOCK时,写操作(write)阻塞了.</li><li>EBADF： 输出或者输入的文件描述符没有打开.</li><li>EFAULT： 错误的地址.</li><li>EINVAL： 描述符不可用或者锁定了,或者用mmap()函数操作的in_fd不可用.</li><li>EIO： 当读取(read)in_fd时发生未知错误.</li><li>ENOMEM： 读(read)in_fd时内存不足.</li></ul></li><li><p>返回值：成功，则返回传输的字节数，失败，则返回-1，并设置errno。</p></li><li><p>与read和write读写函数的区别</p><ul><li>系统调用 read() 产生一个上下文切换：从 user mode 切换到 kernel mode，然后 DMA 执行拷贝，把文件数据从硬盘读到一个 kernel buffer 里。</li><li>数据从 kernel buffer 拷贝到 user buffer，然后系统调用 read() 返回，这时又产生一个上下文切换：从kernel mode 切换到 user mode。</li><li>系统调用 write() 产生一个上下文切换：从 user mode 切换到 kernel mode，然后把步骤2读到 user buffer 的数据拷贝到 kernel buffer（数据第2次拷贝到 kernel buffer），不过这次是个不同的 kernel buffer，这个 buffer 和 socket 相关联。</li><li>系统调用 write() 返回，产生一个上下文切换：从 kernel mode 切换到 user mode（第4次切换了），然后 DMA 从 kernel buffer 拷贝数据到协议栈（第4次拷贝了）。</li><li>上面4个步骤有4次上下文切换，有4次拷贝，如果能减少切换次数和拷贝次数将会有效提升性能。</li></ul></li><li><p>sendfile的效率</p><ul><li>sendfile系统调用，文件数据被copy至内核缓冲区</li><li>再从内核缓冲区copy至内核中socket相关的缓冲区</li><li>最后再socket相关的缓冲区copy到协议引擎</li></ul></li><li><p>示例：</p></li><li><p>本示例是让服务器把一个文件发送个所连接的客户端(本示例用到了popen函数、select函数、access函数)(其中的部分函数我的博客网络编程分类里就有，select可自行查找)</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*服务端*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/sendfile.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PORT 6000   <span class="comment">//定义端口</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LISTENQ 20  <span class="comment">//定义最大连接数</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFFSIZE 4096   <span class="comment">//定义缓冲区大小</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FILE_NAME_MAX_SIZE 512  <span class="comment">//定义文件缓冲大小</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> fileName[FILE_NAME_MAX_SIZE];</span><br><span class="line">    bzero(fileName, FILE_NAME_MAX_SIZE);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Please input the file name you want to send: "</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, &amp;fileName);</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">if</span>(access(fileName, R_OK) == <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="comment">//判断文件的权限</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"this file can not read!\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> sockfd, connfd;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serverAddr</span>, <span class="title">clientAddr</span>;</span></span><br><span class="line">    bzero(&amp;serverAddr, <span class="keyword">sizeof</span>(serverAddr));</span><br><span class="line"></span><br><span class="line">    serverAddr.sin_family = AF_INET;</span><br><span class="line">    serverAddr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class="line">    serverAddr.sin_port = htons(PORT);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>((sockfd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>)) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        perror(<span class="string">"socket error"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> reuse = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &amp;reuse, <span class="keyword">sizeof</span>(reuse)) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">//地址复用</span></span><br><span class="line">        perror(<span class="string">"setsockopt error"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(bind(sockfd, (struct sockaddr*)&amp;serverAddr, <span class="keyword">sizeof</span>(serverAddr)) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        perror(<span class="string">"bind error"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(listen(sockfd, LISTENQ) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        perror(<span class="string">"listen error"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> client[FD_SETSIZE]; <span class="comment">//申请数组存放已连接的描述符</span></span><br><span class="line">    <span class="built_in">memset</span>(client, <span class="number">-1</span>, FD_SETSIZE);</span><br><span class="line">    fd_set sock_set;    <span class="comment">//定义连接(读)的事件集合</span></span><br><span class="line">    fd_set write_set;   <span class="comment">//写的事件集合</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> maxfd = sockfd; <span class="comment">//最大的描述符个数</span></span><br><span class="line">    <span class="keyword">int</span> maxi = <span class="number">-1</span>;  <span class="comment">//存放已连接的数组的下标的最大值</span></span><br><span class="line">    <span class="keyword">int</span> nready = <span class="number">0</span>; <span class="comment">//就绪事件的个数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        FD_ZERO(&amp;sock_set); <span class="comment">//清空连接(读)事件集合</span></span><br><span class="line">        FD_ZERO(&amp;write_set);</span><br><span class="line">        FD_SET(sockfd, &amp;sock_set);  <span class="comment">//设置连接(读)事件</span></span><br><span class="line">        FD_SET(sockfd, &amp;write_set);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>((nready = select(maxfd+<span class="number">1</span>, &amp;sock_set, &amp;write_set, <span class="literal">NULL</span>, <span class="literal">NULL</span>)) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            perror(<span class="string">"select error"</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(FD_ISSET(sockfd, &amp;sock_set))&#123;</span><br><span class="line">            <span class="comment">//判断事件是否是连接(读)事件</span></span><br><span class="line">            <span class="keyword">socklen_t</span> length = <span class="keyword">sizeof</span>(clientAddr);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>((connfd = accept(sockfd, (struct sockaddr*)&amp;clientAddr, &amp;length)) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//处理连接事件</span></span><br><span class="line">                perror(<span class="string">"accept error"</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; FD_SETSIZE; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(client[i] &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="comment">//将已连接的描述符放进数组</span></span><br><span class="line">                    client[i] = connfd;</span><br><span class="line">                    i++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i == FD_SETSIZE)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"too many clients!\n"</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            FD_SET(connfd, &amp;write_set); <span class="comment">//设置新的描述符</span></span><br><span class="line">            <span class="keyword">if</span>(connfd &gt; maxfd)&#123;</span><br><span class="line">                <span class="comment">//更新最大文件描述符</span></span><br><span class="line">                maxfd = connfd;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i &gt; maxi)&#123;</span><br><span class="line">                <span class="comment">//扩充数组的已连接描述符最大下标</span></span><br><span class="line">                maxi = i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(--nready &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//判断是否事件处理完</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; maxi; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(client[i] &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(FD_ISSET(client[i], &amp;write_set))&#123;</span><br><span class="line">                <span class="comment">//判断时间是否为写事件</span></span><br><span class="line">                <span class="keyword">char</span> buff[BUFFSIZE];</span><br><span class="line">                <span class="keyword">int</span> count;</span><br><span class="line">                bzero(buff, BUFFSIZE);</span><br><span class="line"></span><br><span class="line">                <span class="built_in">strncpy</span>(buff, fileName, <span class="built_in">strlen</span>(fileName) &gt; FILE_NAME_MAX_SIZE ? FILE_NAME_MAX_SIZE : <span class="built_in">strlen</span>(fileName));</span><br><span class="line"></span><br><span class="line">                <span class="comment">//发送文件名</span></span><br><span class="line">                <span class="keyword">if</span>((count = send(connfd, buff, BUFFSIZE, <span class="number">0</span>)) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                    perror(<span class="string">"send file information error"</span>);</span><br><span class="line">                    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> filefd = open(fileName, O_RDONLY);</span><br><span class="line">                <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">stat_buf</span>;</span>   <span class="comment">//定义stat结构获取文件大小</span></span><br><span class="line">                fstat(filefd, &amp;stat_buf);   <span class="comment">//绑定打开的文件</span></span><br><span class="line">                FILE *fd = fdopen(filefd, <span class="string">"rb"</span>);</span><br><span class="line">                <span class="keyword">if</span>(<span class="literal">NULL</span> == fd)&#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"File: %s not found!\n"</span>, fileName);</span><br><span class="line">                    <span class="keyword">int</span> judge = <span class="number">1</span>;  <span class="comment">//定义标识符判断文件是否存在</span></span><br><span class="line">                    <span class="keyword">if</span>(send(connfd, &amp;judge, <span class="keyword">sizeof</span>(judge), <span class="number">0</span>) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                        perror(<span class="string">"send judge error"</span>);</span><br><span class="line">                        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    close(connfd);</span><br><span class="line">                    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">int</span> judge = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">if</span>(send(connfd, &amp;judge, <span class="keyword">sizeof</span>(judge), <span class="number">0</span>) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                        perror(<span class="string">"send judge error"</span>);</span><br><span class="line">                        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"\nstart transfering md5!\n"</span>);</span><br><span class="line">                    <span class="comment">//发送文件的md5值进行判断</span></span><br><span class="line">                    <span class="keyword">char</span> cmd[BUFFSIZE] = <span class="string">"md5sum "</span>;</span><br><span class="line">                    <span class="built_in">strcat</span>(cmd, fileName);</span><br><span class="line"></span><br><span class="line">                    bzero(buff, BUFFSIZE);</span><br><span class="line">                    FILE *stream = popen(cmd, <span class="string">"r"</span>);</span><br><span class="line">                    <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">if</span>((tmp = fread(buff, <span class="keyword">sizeof</span>(<span class="keyword">char</span>), BUFFSIZE, stream)) &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">                        perror(<span class="string">"fread md5 error"</span>);</span><br><span class="line">                        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">if</span>((a = send(connfd, buff, tmp, <span class="number">0</span>)) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                        perror(<span class="string">"send md5 error"</span>);</span><br><span class="line">                        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    pclose(stream);</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"Transfer md5 finished!\n"</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//发送文件</span></span><br><span class="line">                    <span class="keyword">if</span>(sendfile(connfd, filefd, <span class="literal">NULL</span>, stat_buf.st_size) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                        perror(<span class="string">"sendfile error"</span>);</span><br><span class="line">                        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    fclose(fd);</span><br><span class="line">                    close(filefd);</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"Transfer file finished!\n"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                close(client[i]);</span><br><span class="line">                FD_CLR(client[i], &amp;write_set);  <span class="comment">//清空已处理的写事件</span></span><br><span class="line">                client[i] = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//判断是否还有未处理的写事件</span></span><br><span class="line">                <span class="keyword">if</span>(--nready &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*客户端*/</span></span><br><span class="line"><span class="comment">/*客户端的代码与服务器的代码相对应，只有接收文件功能，而且是单进程*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;strings.h&gt;</span></span></span><br><span class="line"><span class="comment">//#include &lt;sys/select.h&gt;</span></span><br><span class="line"><span class="comment">//#include &lt;wait.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PORT 6000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LISTENQ 20</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFFSIZE 4096</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FILE_NAME_MAX_SIZE 512</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> clientfd;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(argc != <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"usage: ./fileclient &lt;IP_Address&gt;\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">clientAddr</span>;</span></span><br><span class="line">    bzero(&amp;clientAddr, <span class="keyword">sizeof</span>(clientAddr));</span><br><span class="line"></span><br><span class="line">    clientAddr.sin_family = AF_INET;</span><br><span class="line">    clientAddr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class="line">    clientAddr.sin_port = htons(PORT);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>((clientfd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>)) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        perror(<span class="string">"socket error"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(connect(clientfd, (struct sockaddr*)&amp;clientAddr, <span class="keyword">sizeof</span>(clientAddr)) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        perror(<span class="string">"connect error"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> buff[BUFFSIZE];</span><br><span class="line">    <span class="keyword">char</span> fileName[FILE_NAME_MAX_SIZE];</span><br><span class="line">    bzero(fileName, FILE_NAME_MAX_SIZE);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line">    bzero(buff, BUFFSIZE);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>((count = recv(clientfd, buff, BUFFSIZE, <span class="number">0</span>)) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        perror(<span class="string">"recv fileName error"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">strncpy</span>(fileName, buff, <span class="built_in">strlen</span>(buff) &gt; FILE_NAME_MAX_SIZE ? FILE_NAME_MAX_SIZE : <span class="built_in">strlen</span>(buff));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> judge = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(recv(clientfd, &amp;judge, <span class="keyword">sizeof</span>(judge), <span class="number">0</span>) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        perror(<span class="string">"recv judge error"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(judge == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"the file was not found at server\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Preparing receive file: %s --from-- %s\n"</span>, fileName, argv[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    FILE *fd = fopen(fileName, <span class="string">"wb+"</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">NULL</span> == fd)&#123;</span><br><span class="line">        perror(<span class="string">"open error"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    bzero(buff, BUFFSIZE);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">" start receiving md5!\n"</span>);</span><br><span class="line">    <span class="keyword">char</span> buf[BUFFSIZE];</span><br><span class="line">    bzero(buf, BUFFSIZE);</span><br><span class="line">    <span class="keyword">if</span>(recv(clientfd, buf, BUFFSIZE, <span class="number">0</span>) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        perror(<span class="string">"recv md5 error"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"receive md5 finished!\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(length = recv(clientfd, buff, BUFFSIZE, <span class="number">0</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(length &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            perror(<span class="string">"recv"</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> writeLen = fwrite(buff, <span class="keyword">sizeof</span>(<span class="keyword">char</span>), length, fd);</span><br><span class="line">        <span class="keyword">if</span>(writeLen &lt; length)&#123;</span><br><span class="line">            perror(<span class="string">"write error"</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        bzero(buff, BUFFSIZE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Received file: %s --from-- %s!\n"</span>, fileName, argv[<span class="number">1</span>]);</span><br><span class="line">    fclose(fd);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> cmd[BUFFSIZE] = <span class="string">"md5sum "</span>;</span><br><span class="line">    <span class="built_in">strcat</span>(cmd, fileName);</span><br><span class="line">    <span class="keyword">char</span> mbuf[BUFFSIZE];</span><br><span class="line">    bzero(mbuf, BUFFSIZE);</span><br><span class="line">    FILE *stream = popen(cmd, <span class="string">"r"</span>);</span><br><span class="line">    <span class="keyword">int</span> tmp = fread(mbuf, <span class="keyword">sizeof</span>(<span class="keyword">char</span>), BUFFSIZE, stream);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">-1</span>, k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(buf != <span class="literal">NULL</span> &amp;&amp; mbuf != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(k = <span class="number">0</span>; k &lt; tmp; k++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(buf[k] != mbuf[k])&#123;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            flag = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"the md5 of this file is same to source\n"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(flag == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"the md5 of this file is different to source\n"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"error!\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    sleep(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    pclose(stream);</span><br><span class="line">    close(clientfd);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>细节优化</p></li><li><p>详情：<a href="http://www.linuxdiyf.com/viewarticle.php?id=69189" target="_blank" rel="noopener">http://www.linuxdiyf.com/viewarticle.php?id=69189</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 零拷贝 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>没有正确安装GNOME电源管理器解决办法</title>
      <link href="/2017/10/29/Linux%E7%A3%81%E7%9B%98%E5%86%99%E6%BB%A1/"/>
      <url>/2017/10/29/Linux%E7%A3%81%E7%9B%98%E5%86%99%E6%BB%A1/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><ul><li>昨天晚上在 centos 上需要解压一个文件(centos装在vmware上)，但是解压到一半就报错说是内存不足，我用 df 查看了下发现根目录已经被写满了，然后由于熄灯了就没有处理。</li><li>第二天早上打开 centos 出现错误 <strong>没有正确安装GNOME电源管理器</strong> ，导致登陆显示窗体界面，只是黑屏，然后在网上搜了下解决方法，发现大体上就是进入 mini 窗口(也就是黑框)，清除 <code>/tmp</code> 下的东西(也不全是这个目录，主要是留出空间来让系统启动)，然后进行了操作，最终解决！</li></ul><a id="more"></a><h4 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h4><ul><li>进行登录，然后提示你错误，然后按 <code>ctrl + alt + F1~F7</code> 因为每个人的窗口不一样，所以要 F1 到 F7</li><li>下面会进入到 mini 界面，会出现 <code>login</code> 让你登陆，你输入用户名(尽量root，后面操作方便)及密码，登录成功后使用 <code>df -h</code> 查看系统的使用情况，使用 <code>du -h filename/directoryname</code> 查看文件或目录的使用情况</li><li>然后根据个人情况进行一些清理工作</li><li>比如我的就是 tmp 目录占用很多(tmp目录是一个临时文件存放的目录)，然后进入 tmp 目录执行 <code>rm -rf *</code> (记得备份重要的文件)，然后重启就可以啦！</li><li>重启之后记得给磁盘扩容，及时清理一些垃圾文件</li></ul>]]></content>
      
      
      <categories>
          
          <category> OS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于最近学习的一点思考</title>
      <link href="/2017/10/28/%E9%9A%8F%E7%AC%94/"/>
      <url>/2017/10/28/%E9%9A%8F%E7%AC%94/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;晃眼到了大三，所认识的一些同学都已经找到了满意的工作，而我还满足在自己比别人起步早的那么一点扯淡的事情上(比我起步早的大有人在)。<br><a id="more"></a><br>&emsp;&emsp;意识到这一点的我，一开始并没有就去奋发图强，而是仅仅比以前的状态能努力一点罢了(一直处于对自己想干什么的似懂非懂的状态中)。后面，分到了导师，导师有一些项目想要人去帮忙，原本我以为我可以的，但是我错了。我知道这次没有认清自己，也过于自大了，开始了开学的第一次反思。<br>&emsp;&emsp;也就在那次反思以后，改变了一些作息习惯，驱散了部分迷茫，规划了自己近期的一些事情。学习的过程中，避免不了查资料，发现一些问题以前查过，但是没有做记录而且当时并没有深入了解，导致再次遇到脑子还是一片问号，第二次反思。<br>&emsp;&emsp;反思时，想起了以前在<a href="http://blog.csdn.net/xingerr" target="_blank" rel="noopener">CSDN</a>上写博客的事情(已经好久没更新了)，但是想到CSDN的局限性(我比较喜欢自由)，所以就想着自己搭建博客(当时只知道WordPress)，然后在网上找到了简易的<code>hexo + github</code>搭建教程，就搭了一个(也就是现在这个)。同一时间，看到了一篇文章讲解一些学习的方法(深度学习)，而且看了许多的面经(因为想着明年参加校园实习生招聘)，买了一些专业知识的相关书籍，准备补充自己的知识库。于是 <code>学习 + 思考 + 查资料 + 写博客</code> 的计划就这样。<br>&emsp;&emsp;如今，已经明确了方向，每天思考着，充实着自己。<br>&emsp;&emsp;一颗小草，扎根在肥沃的土壤里，努力地汲取着营养，让自己成长！</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>dup与dup2详解</title>
      <link href="/2017/10/28/dup%E4%B8%8Edup2%E8%AF%A6%E8%A7%A3/"/>
      <url>/2017/10/28/dup%E4%B8%8Edup2%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><ul><li><p>三个Linux默认的描述符</p><ul><li>0：标准输入</li><li>1：标准输出</li><li>2：标准错误</li></ul></li><li><p>dup和dup2的作用都是用来复制一个文件的描述符，它们经常用来重定向进程的stdin、stdout和stderr</p></li></ul><a id="more"></a><ul><li><p>在 Linux 下，通过 open 打开以文件后，会返回一个文件描述符，文件描述符会指向一个文件表，文件表中的节点指针会指向节点表。</p><ul><li><p>文件描述符表</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fileDescription</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> *pointer;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>除了整形，还有一个指针，指向文件表，内核为所有打开文件维持一张文件表，每个文件表项包含：</p><ul><li><p>文件状态标志（读、写、添写、同步和非阻塞等）</p></li><li><p>当前文件的偏移量</p></li><li><p>指向该文件v节点表项的指针</p></li></ul></li><li><p>v节点表中包含了文件所有者、文件长度、文件所在的设备、指向文件实际数据块在磁盘上所在位置的指针等</p></li><li><p>文件指针是关键，标志两个文件描述符是否一致，看文件指针是否一致即可，如果两个或者多个文件描述符指向同一个文件表，那么对他们的操作是对同一个文件进行操作</p></li></ul></li></ul><p><img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6%E8%A1%A8.png" alt></p><ul><li><a href="https://baike.baidu.com/item/%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E8%AF%8D" target="_blank" rel="noopener">文件描述词</a>(下文会用到，等同于文件描述符)</li></ul><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><ul><li><p>头文件：<code>#include &lt;unistd.h&gt;</code></p></li><li><p>原型：<code>int dup (int oldfd);</code> <code>int dup2(int odlfd, int newfd);</code></p><ul><li>oldfd：要被复制的文件描述词</li><li>newfd：在 dup2 函数中指定的新文件描述词</li></ul></li><li><p>说明：</p><ul><li><p>dup() 用来复制参数 oldfd 所指的文件描述词， 并将它返回。</p><ol><li>利用 dup 函数，我们可以复制一个文件描述词，传给该函数一个既有的描述词，它就会返回一个新的描述词，这个新的描述词是传给它的旧描述词的拷贝，这意味着这两个文件描述词共享同一个数据结构，即所有的锁定，读写指针，各项权限和标志位等等。</li><li>但复制成功时返回最小的尚未被使用的文件描述词(这点和open函数是一样的)，这个文件描述词指向 oldfd 所拥有的文件表项</li></ol></li><li><p>dup2() 用来复制参数 oldfd 所指的文件描述词, 并将它拷贝至参数newfd 后一块返回，并不关闭 oldfd。</p><ul><li>若参数newfd为一个已打开的文件描述词, 则 newfd 所指的文件会先被关闭。</li><li>dup2()所复制的文件描述词, 与原来的文件描述词共享各种文件状态</li></ul></li><li>注：dup2() 相当于先后执行了 <code>close()</code> 函数和 <code>fcntl(oldfd, F_DUPFD, newfd);</code>函数<ul><li>dup2 函数和先后调用 close 和 fcntl 函数是不一样的，具体在于 dup2 函数关闭文件描述词和进行文件描述词复制这两个操作是作为一个<strong>原子操作</strong>执行的，是不能被打断的。</li></ul></li></ul></li><li><p>返回值：当复制成功时, 则返回最小及尚未使用的文件描述词。 若有错误则返回-1， errno 会存放错误代码</p></li><li><p>错误代码：<code>EBADF</code> 表示参数 fd 非有效的文件描述词， 或该文件已关闭</p></li><li><p>区别：dup2 和 dup 的区别就是可以用 newfd 参数指定新描述符的数值，如果 newfd 已经打开，则先将其关闭，如果 newfd 等于 oldfd，则 dup2 返回newfd 而不关闭它</p></li><li><p>示例：</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fd, copyfd;</span><br><span class="line">    fd = open(<span class="string">"test.txt"</span>, O_RDWR | O_CREAT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//复制fd给copyfd</span></span><br><span class="line">    copyfd = dup(fd);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> buf1[] = <span class="string">"hello "</span>;</span><br><span class="line">    <span class="keyword">char</span> buf2[] = <span class="string">"world!"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//往fd文件写入内容</span></span><br><span class="line">    <span class="keyword">if</span> (write(fd, buf1, <span class="keyword">sizeof</span>(buf1)) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        perror(<span class="string">"write fd"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印出fd和copyfd的偏移量，经过上面的写操作，都变成7了(写入sizeof(buf1)和sizeof(buf2)的大小为7)</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, (<span class="keyword">int</span>)lseek(fd, <span class="number">0</span>, SEEK_CUR));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, (<span class="keyword">int</span>)lseek(copyfd, <span class="number">0</span>, SEEK_CUR));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//往copyfd写入内容</span></span><br><span class="line">    <span class="keyword">if</span> (write(copyfd, buf2, <span class="keyword">sizeof</span>(buf2)) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        perror(<span class="string">"write copyfd"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印出fd和copyfd的偏移量，经过上面的写操作，都变成14了(写入buf1和buf2两次，大小为14)</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, (<span class="keyword">int</span>)lseek(fd, <span class="number">0</span>, SEEK_CUR));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, (<span class="keyword">int</span>)lseek(copyfd, <span class="number">0</span>, SEEK_CUR));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pfds[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">if</span> ( pipe(pfds) == <span class="number">0</span> )&#123;</span><br><span class="line">        <span class="comment">//建立一个管道</span></span><br><span class="line">        <span class="keyword">if</span> ( fork() == <span class="number">0</span> )&#123;</span><br><span class="line">            <span class="comment">//子进程关闭stdout端</span></span><br><span class="line">            close(<span class="number">1</span>);</span><br><span class="line">            dup2( pfds[<span class="number">1</span>], <span class="number">1</span> ); <span class="comment">//将stdout重定向到管道输入端</span></span><br><span class="line">            close( pfds[<span class="number">0</span>] ); <span class="comment">//关闭管道输出端</span></span><br><span class="line">            execlp( <span class="string">"ls"</span>, <span class="string">"ls"</span>, <span class="string">"-1"</span>, <span class="literal">NULL</span> ); <span class="comment">//执行ls -l命令，输出到管道输入端</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//父进程关闭stdin端</span></span><br><span class="line">            close(<span class="number">0</span>);</span><br><span class="line">            dup2( pfds[<span class="number">0</span>], <span class="number">0</span> ); <span class="comment">//将stdin重定向到管道输出端</span></span><br><span class="line">            close( pfds[<span class="number">1</span>] ); <span class="comment">//关闭管道输入端</span></span><br><span class="line">            execlp( <span class="string">"wc"</span>, <span class="string">"wc"</span>, <span class="string">"-l"</span>, <span class="literal">NULL</span> ); <span class="comment">//将管道的结果当做输入执行wc -l命令</span></span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            perror(<span class="string">"fork"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li><p>一开始并没有想写这篇文章，因为简单(不就是两个函数么，而且功能还一样)，但是在我用的过程中，遇到许多的地方不是多么明白，就去查资料，但是多数都是讲解的不全面，对于一些细节还是没有讲到或者过于粗略，所以写下了这篇文章。</p></li><li><p>本文总结了多数的文章的内容，如有问题请通知我修改，谢谢！</p></li></ul><h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><ul><li><a href="https://baike.baidu.com/item/%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E8%AF%8D" target="_blank" rel="noopener">https://baike.baidu.com/item/%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E8%AF%8D</a></li><li><a href="http://c.biancheng.net/cpp/html/231.html" target="_blank" rel="noopener">http://c.biancheng.net/cpp/html/231.html</a></li><li><a href="http://c.biancheng.net/cpp/html/232.html" target="_blank" rel="noopener">http://c.biancheng.net/cpp/html/232.html</a></li><li><a href="http://www.jianshu.com/p/4a5f71b9bf1d" target="_blank" rel="noopener">http://www.jianshu.com/p/4a5f71b9bf1d</a></li><li><a href="http://10706198.blog.51cto.com/10696198/1775981" target="_blank" rel="noopener">http://10706198.blog.51cto.com/10696198/1775981</a></li><li><a href="http://www.bkjia.com/Linux/357797.html" target="_blank" rel="noopener">http://www.bkjia.com/Linux/357797.html</a></li><li><a href="http://www.cnblogs.com/frank-yxs/p/5925628.html" target="_blank" rel="noopener">http://www.cnblogs.com/frank-yxs/p/5925628.html</a></li><li><a href="http://www.01happy.com/c-dup-dup2/" target="_blank" rel="noopener">http://www.01happy.com/c-dup-dup2/</a></li><li><a href="http://blog.csdn.net/zhouhong1026/article/details/8151235" target="_blank" rel="noopener">http://blog.csdn.net/zhouhong1026/article/details/8151235</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Function </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>页缓存page cache和地址空间address_space</title>
      <link href="/2017/10/28/page%20cache%E5%92%8Caddress_space/"/>
      <url>/2017/10/28/page%20cache%E5%92%8Caddress_space/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><ul><li><p>在学习 mmap 的时候，看到物理地址和进程虚拟地址建立–的映射关系的时候，遇到页缓存 page cache 和地址空间 address_space，不清楚，故查阅资料，学习并做此总结</p></li><li><p>在 Linux 操作系统中，当应用程序需要读取文件中的数据时，操作系统先分配一些内存，将数据从存储设备读入到这些内存中，然后再将数据分发给应用程序；当需要往文件中写数据时，操作系统先分配内存接收用户数据，然后再将数据从内存写到磁盘上。文件 Cache 管理指的就是对这些由操作系统分配，并用来存储文件数据的内存的管理。 Cache 管理的优劣通过两个指标衡量：一是 Cache 命中率，Cache 命中时数据可以直接从内存中获取，不再需要访问低速外设，因而可以显著提高性能；二是有效 Cache 的比率，有效 Cache 是指真正会被访问到的 Cache 项，如果有效 Cache 的比率偏低，则相当部分磁盘带宽会被浪费到读取无用 Cache 上，而且无用 Cache 会间接导致系统内存紧张，最后可能会严重影响性能</p>  <a id="more"></a></li><li><p>在Linux 2.4内核中块缓存 buffer cache 和页缓存 page cache 是并存的，表现的现象是同一份文件的数据，可能即出现在 buffer cache中，又出现在页缓存中，这样就造成了物理内存的浪费。</p><ul><li>Linux 2.6内核对两个 cache 进行了合并，统一使用页缓存在做缓存，只有极少数的情况下才使用到 buffer cache</li><li>每一个 Page Cache 包含若干 Buffer Cache</li></ul></li><li><p>内存管理系统和 VFS(virtual file system) 只与 Page Cache 交互，内存管理系统负责维护每项 Page Cache 的分配和回收，同时在使用 memory map 方式访问时负责建立映射；VFS 负责 Page Cache 与用户空间的数据交换。而具体文件系统则一般只与 Buffer Cache 交互，它们负责在外围存储设备和 Buffer Cache 之间交换数据</p></li></ul><h4 id="buffer-cache和page-cache的区别"><a href="#buffer-cache和page-cache的区别" class="headerlink" title="buffer cache和page cache的区别"></a>buffer cache和page cache的区别</h4><ul><li><p>我们要理解的是不管是buffer cache还是page cache都是为了处理块设备和内存交互时高速访问的问题</p></li><li><p>buffer cache是面向底层块设备的，所以它的粒度是文件系统的块，块设备和系统采用块进行交互。块再转换成磁盘的基本物理结构扇区。扇区的大小是512KB，而文件系统的块一般是2KB, 4KB, 8KB。扇区和块之间是可以快速转换的</p><ul><li><p>随着内核的功能越来越完善，块粒度的缓存已经不能满足性能的需要。内核的内存管理组件采用了比文件系统的块更高级别的抽象，页page，页的大小一般从4KB到2MB,粒度更大，处理的性能更高。所以缓存组件为了和内存管理组件更好地交互，创建了页缓存page cache来代替原来的buffer cache</p></li><li><p>页缓存是面向文件，面向内存的。通过一系列的数据结构，比如inode, address_space, page，将一个文件映射到页的级别，通过page + offset就可以定位到一个文件的具体位置</p></li></ul></li><li><p>buffer cache实际操作时按块为基本单位，page cache操作时按页为基本单位，新建了一个BIO的抽象，可以同时处理多个非连续的页的IO操作，也就是所谓的scatter/gather IO</p></li><li><p>buffer cache目前主要用在需要按块传输的场景下，比如超级块的读写等。而 page cache 可以用在所有以文件为单元的场景下，比如网络文件系统等等，缓存组件抽象了地址空间 address_space 这个概念来作为文件系统和页缓存的中间适配器，屏蔽了底层设备的细节</p></li><li><p>buffer cache 可以和 page cache 集成在一起，属于一个 page 的块缓存使用 buffer_head 链表的方式组织，page_cache 维护了一个private 指针指向这个 buffer_head 链表，buffer_head 链表维护了一个指针指向这个页 page。这样只需要在页缓存中存储一份数据即可</p></li><li><p>文件系统的 inode 实际维护了这个文件所有的块 block 的块号，通过对文件偏移量 offset 取模可以很快定位到这个偏移量所在的文件系统的块号，磁盘的扇区号。同样，通过对文件偏移量 offset 进行取模可以计算出偏移量所在的页的偏移量，地址空间 address_space 通过指针可以方便的获取两端 inode 和 page 的信息，所以可以很方便地定位到一个文件的offset 在各个组件中的位置</p></li><li><p>文件字节偏移量 –&gt; 页偏移量 –&gt; 文件系统块号 block  –&gt;  磁盘扇区号</p></li></ul><h4 id="页缓存page-cache和地址空间address-space"><a href="#页缓存page-cache和地址空间address-space" class="headerlink" title="- 页缓存page cache和地址空间address_space"></a>- 页缓存page cache和地址空间address_space</h4><ul><li><p>page_cache</p><ul><li><p>page cache 是面向内存，面向文件的，这正好说明了页缓存的作用，它位于内存和文件之间，文件IO操作实际上只和页缓存交互，不直接和内存交互</p></li><li><p>Linux内核使用 page 数据结构来描述物理内存页帧，内核创建了mem_map 数组来表示所有的物理页帧，mem_map 的数组项就是 page</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">page</span>&#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span>           flags;</span><br><span class="line">    <span class="keyword">atomic_t</span>                _count;</span><br><span class="line">    <span class="keyword">atomic_t</span>                _mapcount;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span>           <span class="keyword">private</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">address_space</span>    *<span class="title">mapping</span>;</span></span><br><span class="line">    <span class="keyword">pgoff_t</span>                 index;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span>        <span class="title">lru</span>;</span></span><br><span class="line">    <span class="keyword">void</span>                    *<span class="keyword">virtual</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>参数：<ul><li>一些标志位flags来表示该页是否是脏页，是否正在被写回等等</li><li>_count, _mapcount表示这个页被多少个进程使用和映射</li><li>private指针指向了这个页对应的buffer cache的buffer_head链表，建立了页缓存和块缓存的联系</li></ul><ol start="4"><li>mapping指向了地址空间address_space，表示这个页是一个页缓存中页，和一个文件的地址空间对应</li><li>index是这个页在文件中的页偏移量，通过文件的字节偏移量可以计算出文件的页偏移量</li></ol></li></ul></li><li><p>页缓存实际上就是采用了一个基数树结构将一个文件的内容组织起来存放在物理内存page中。文件IO操作直接和页缓存交互。采用缓存原理来管理块设备的IO操作</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">radix_tree_root</span>&#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span>                <span class="keyword">int</span> height;</span><br><span class="line">    <span class="keyword">gfp_t</span>                   gfp_mask;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">radix_tree_root</span>  *<span class="title">rnode</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>文件的每个数据块最多只能对应一个 Page Cache 项，它通过两个数据结构来管理这些 Cache 项，一个是 radix tree(一种搜索树，来快速定位 Cache 项)，另一个是双向链表(active_list 和 inactive_list 两个双向链表，实现物理内存的回收)</p></li><li><p>一个文件inode对应一个地址空间address_space。而一个address_space对应一个页缓存基数树，这几个组件的关系如下:</p><p><img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/%E9%A1%B5%E7%BC%93%E5%AD%98.png" alt></p></li></ul></li><li><p>address_space</p></li><li><p>address_space 是Linux内核中的一个关键抽象，它是页缓存和外部设备中文件系统的桥梁，可以说关联了内存系统和文件系统，文件系统可以理解成数据源</p><ul><li>inode 指向这个地址空间的宿主，也就是数据源</li><li><p>page_tree 指向了这个地址空间对应的页缓存的基数树。这样就可以通过<code>inode --&gt; address_space --&gt;  page_tree</code>找打一个文件对应的页缓存页</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">address_space</span>&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">inode</span>            *<span class="title">host</span>;</span>            <span class="comment">//所有者：inode或块设备</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">radix_tree_root</span>  <span class="title">page_tree</span>;</span>        <span class="comment">//所有页的基数树</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span>            i_mmap_wrutable;  <span class="comment">//VM_SHAREAD映射的计数</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">prio_tree_root</span>   <span class="title">i_mmap</span>;</span>           <span class="comment">//私有和共享映射的树</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span>        <span class="title">i_mmap_nonlinear</span>;</span> <span class="comment">//VM_NONLINEAR映射的链表元素</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span>           nrpages;          <span class="comment">//页的总数</span></span><br><span class="line">    <span class="keyword">pgoff_t</span>                 writeback_index;  <span class="comment">//回写由此开始</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">address_space_operations</span>  *<span class="title">a_ops</span>;</span>  <span class="comment">//方法，即地址空间操作</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span>           flags;            <span class="comment">//错误标志位/gfp掩码</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">backing_dev_info</span> *<span class="title">backing_dev_info</span>;</span><span class="comment">//设备预读</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span>;</span>       private_list;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">address_space</span>    <span class="title">private_list</span>;</span></span><br><span class="line">&#125; __attribute__((aligned(<span class="keyword">sizeof</span>(<span class="keyword">long</span>))));</span><br></pre></td></tr></table></figure></li><li><p>读文件时，首先通过要读取的文件内容的偏移量offset计算出要读取的页，然后通过该文件的inode找到这个文件对应的地址空间address_space，然后在address_space中访问该文件的页缓存，如果页缓存命中，那么直接返回文件内容，如果页缓存缺失，那么产生一个页缺失异常，创业一个页缓存页，然后从磁盘中读取相应文件的页填充该缓存页，租后从页缺失异常中恢复，继续往下读</p></li><li>写文件时，首先通过所写内容在文件中的偏移量计算出相应的页，然后还是通过inode找到address_space,通过address_space找到页缓存中页，如果页缓存命中，直接把文件内容修改更新在页缓存的页中。写文件就结束了。这时候文件修改位于页缓存，并没有写回writeback到磁盘文件中去</li><li>一个页缓存中的页如果被修改，那么会被标记成脏页。脏页需要写回到磁盘中的文件块。有两种方式可以把脏页写回磁盘，也就是flush<ul><li>手动调用sync()或者fsync()系统调用把脏页写回</li><li>pdflush进程会定时把脏页写回到磁盘</li></ul></li><li>脏页不能被置换出内存，如果脏页正在被写回，那么会被设置写回标记，这时候该页就被上锁，其他写请求被阻塞直到锁释放</li><li><p>在某些情况下我们可能需要绕过页缓存机制，比如系统存在大日志的情况，比如数据库系统，日志不会被经常重复读取，如果都缓存在内存中会影响系统的性能。内核提供了直接IO的方式，O_DIRECT,可以绕过页缓存，直接把文件内容从堆中写到磁盘文件</p></li><li><p>普通文件IO需要复制两次，第一次复制是从磁盘到内存缓冲区，第二次是从内存缓冲区到进程的堆</p><ul><li>从磁盘中读取文件相应的页填充页缓存中的页，也就是第一次复制</li><li>从页缓存的页复制内容到文件进程的堆空间的内存中，也就是第二次复制</li><li>最后物理内存同一个文件的内容存在了两份拷贝，一份是页缓存，一份是用户进程的堆空间对应的物理内存空间</li></ul></li></ul></li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li>用户进程访问内存只能通过页表结构，内核可以通过虚拟地址直接访问物理内存。</li><li>用户进程不能访问内核的地址空间，这里的地址空间指的是虚拟地址空间，这是肯定的，因为用户进程的虚拟地址空间和内核的虚拟地址空间是不重合的，内核虚拟地址空间必须特权访问</li><li>page结构表示物理内存页帧，同一个物理内存地址可以同时被内核进程和用户进程访问，只要将用户进程的页表项也指向这个物理内存地址。也就是mmap的实现原理</li></ul><h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><ul><li><a href="http://blog.csdn.net/iter_zc/article/details/44195731" target="_blank" rel="noopener">http://blog.csdn.net/iter_zc/article/details/44195731</a></li><li><a href="https://www.ibm.com/developerworks/cn/linux/l-cache/index.html" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/linux/l-cache/index.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> OS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Memory </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mmap函数</title>
      <link href="/2017/10/27/mmap%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3/"/>
      <url>/2017/10/27/mmap%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><ul><li><p>共享内存可以说是最有用的进程间通信方式，也是最快的 IPC 形式, 因为进程可以直接读写内存，而不需要任何数据的拷贝。对于像管道和消息队列等通信方式，则需要在内核和用户空间进行四次的数据拷贝，而共享内存则只拷贝两次数据: 一次从输入文件到共享内存区，另一次从共享内存区到输出文件。</p></li><li><p>实际上，进程之间在共享内存时，并不总是读写少量数据后就解除映射，有新的通信时，再重新建立共享内存区域。而是保持共享区域，直到通信完毕为止，这样，数据内容一直保存在共享内存中，并没有写回文件。共享内存中的内容往往是在解除映射时才写回文件的。因此，采用共享内存的通信方式效率是非常高的。</p>  <a id="more"></a></li><li><p>内存映射，简而言之就是将内核空间的一段内存区域映射到用户空间。映射成功后，用户对这段内存区域的修改可以直接反映到内核空间，相反，内核空间对这段区域的修改也直接反映用户空间。那么对于内核空间与用户空间两者之间需要大量数据传输等操作的话效率是非常高的。当然，也可以将内核空间的一段内存区域同时映射到多个进程，这样还可以实现进程间的共享内存通信。</p></li><li><p>系统调用mmap()就是用来实现上面说的内存映射。最长见的操作就是文件（在Linux下设备也被看做文件）的操作，可以将某文件映射至内存(进程空间)，如此可以把对文件的操作转为对内存的操作，以此避免更多的lseek()与read()、write()操作，这点对于大文件或者频繁访问的文件而言尤其受益。</p></li></ul><h4 id="mmap概念"><a href="#mmap概念" class="headerlink" title="mmap概念"></a>mmap概念</h4><ul><li><p>mmap是一种内存映射文件的方法，即将一个文件或者其它对象映射到进程的地址空间，实现文件磁盘地址和进程虚拟地址空间中一段虚拟地址的一一对映关系。实现这样的映射关系后，进程就可以采用指针的方式读写操作这一段内存，而系统会自动回写脏页面到对应的文件磁盘上，即完成了对文件的操作而不必再调用read,write等系统调用函数。相反，内核空间对这段区域的修改也直接反映用户空间，从而可以实现不同进程间的文件共享。如下图所示：<br><img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/%E5%9C%B0%E5%9D%80%E6%98%A0%E5%B0%84.png" alt></p></li><li><p>由上图可以看出，进程的虚拟地址空间，由多个虚拟内存区域构成。虚拟内存区域是进程的虚拟地址空间中的一个同质区间，即具有同样特性的连续地址范围。上图中所示的text数据段（代码段）、初始数据段、BSS数据段、堆、栈和内存映射，都是一个独立的虚拟内存区域。而为内存映射服务的地址空间处在堆栈之间的空余部分。</p></li><li><p>mmap调用步骤：</p><ul><li>首先，应用程序调用mmap，陷入到内核中后调用do_mmap_pgoff。</li><li>该函数从应用程序的地址空间中分配一段区域作为映射的内存地址，并使用一个VMA（vm_area_struct）结构代表该区域，之后就返回到应用程序。</li><li>当应用程序访问mmap所返回的地址指针时，由于虚实映射尚未建立，会触发缺页中断。之后系统会调用缺页中断处理函数，在缺页中断处理函数中，内核通过相应区域的VMA结构判断出该区域属于文件映射，于是调用具体文件系统的接口读入相应的 <a href="http://roux.top/2017/10/28/page%20cache%E5%92%8Caddress_space/">Page Cache</a> 项，并填写相应的虚实映射表。</li><li>经过这些步骤之后，应用程序就可以正常访问相应的内存区域了。</li></ul></li><li><p><span id="task_struct">linux内核</span>使用vm_area_struct结构来表示一个独立的虚拟内存区域，由于每个不同质的虚拟内存区域功能和内部机制都不同，因此一个进程使用多个vm_area_struct结构来分别表示不同类型的虚拟内存区域。各个vm_area_struct结构使用链表或者树形结构链接，方便进程快速访问，如下图所示：<br><img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/vm_area_struct.png" alt></p></li><li><p>vm_area_struct结构中包含区域起始和终止地址以及其他相关信息，同时也包含一个vm_ops指针，其内部可引出所有针对这个区域可以使用的系统调用函数。这样，进程对某一虚拟内存区域的任何操作需要用要的信息，都可以从vm_area_struct中获得。mmap函数就是要创建一个新的vm_area_struct结构，并将其与文件的物理磁盘地址相连。</p></li><li><p><span id="jump">vm_area_struct结构如下：</span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/mm_types.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* This struct defines a memory VMM memory area. */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">vm_area_struct</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mm_struct</span> * <span class="title">vm_mm</span>;</span> <span class="comment">/* VM area parameters */</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> vm_start;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> vm_end;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* linked list of VM areas per task, sorted by address */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">vm_area_struct</span> *<span class="title">vm_next</span>;</span></span><br><span class="line"><span class="keyword">pgprot_t</span> vm_page_prot;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> vm_flags;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* AVL tree of VM areas per task, sorted by address */</span></span><br><span class="line"><span class="keyword">short</span> vm_avl_height;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">vm_area_struct</span> * <span class="title">vm_avl_left</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">vm_area_struct</span> * <span class="title">vm_avl_right</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* For areas with an address space and backing store,</span></span><br><span class="line"><span class="comment">vm_area_struct *vm_next_share;</span></span><br><span class="line"><span class="comment">struct vm_area_struct **vm_pprev_share;</span></span><br><span class="line"><span class="comment">struct vm_operations_struct * vm_ops;</span></span><br><span class="line"><span class="comment">unsigned long vm_pgoff; /* offset in PAGE_SIZE units, *not* PAGE_CACHE_SIZE */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file</span> * <span class="title">vm_file</span>;</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> vm_raend;</span><br><span class="line"><span class="keyword">void</span> * vm_private_data; <span class="comment">/* was vm_pte (shared mem) */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h4 id="mmap内存映射原理"><a href="#mmap内存映射原理" class="headerlink" title="mmap内存映射原理"></a>mmap内存映射原理</h4><ul><li><p>在用户虚拟地址空间中寻找空闲的满足要求的一段连续的虚拟地址空间,为映射做准备(由内核mmap系统调用完成)</p><ul><li><p>进程在用户空间调用库函数mmap，原型：<code>void *mmap(void *start, size_t length, int prot, int flags, int fd, off_t offset);</code></p></li><li><p>在当前进程的虚拟地址空间中，寻找一段空闲的满足要求的连续的虚拟地址</p></li><li><p>为此虚拟区分配一个vm_area_struct结构，接着对这个结构的各个域进行了初始化</p></li><li><p>将新建的虚拟区结构（vm_area_struct）插入进程的虚拟地址区域链表或树中</p></li><li><p>解释(假设每个进程拥有2G字节的用户虚存空间)：</p><ul><li>虚存空间最终得映射到某个物理存储空间（内存或磁盘空间），才真正可以使用，所以这2G的范围内不可以任意使用</li><li>因为用户进程经过编译、链接后形成的映象文件有一个代码段和数据段（包括data段和bss段），这些空间(包括堆栈的空间)是在建立一个进程的运行映像时就分配好的，所以内核需要一个能表示这个区域的东西</li><li><p>在内核中,这样每个区域用一个结构<a href="#jump">struct vm_area_struct</a> 来表示.它描述的是一段连续的、具有相同访问属性的虚存空间，该虚存空间的大小为物理内存页面的整数倍。可以使用 <code>cat /proc//maps</code>来查看一个进程的内存使用情况,pid是进程号.其中显示的每一行对应进程的一个<a href="#jump">vm_area_struct结构</a></p></li><li><p>通常，进程所使用到的虚存空间不连续，且各部分虚存空间的访问属性也可能不同。所以一个进程的虚存空间需要多个vm_area_struct结构来描述。在vm_area_struct结构的数目较少的时候，各个vm_area_struct按照升序排序，以单链表的形式组织数据（通过vm_next指针指向下一个vm_area_struct结构）。<a href="#task_struct">点击查看</a></p></li><li><p>但是当vm_area_struct结构的数据较多的时候，仍然采用链表组织的化，势必会影响到它的搜索速度。针对这个问题，vm_area_struct还添加了vm_avl_hight（树高）、vm_avl_left（左子节点）、vm_avl_right（右子节点）三个成员来实现AVL树，以提高vm_area_struct的搜索速度。</p></li></ul></li></ul></li><li><p>调用内核空间的系统调用函数mmap（不同于用户空间函数），实现文件物理地址和进程虚拟地址的一一映射关系(设备驱动完成)</p><ul><li><p>为映射分配了新的虚拟地址区域后，通过待映射的文件指针，在文件描述符表中找到对应的文件描述符，通过文件描述符，链接到内核“已打开文件集”中该文件的文件结构体（struct file），每个文件结构体维护着和这个已打开文件相关各项信息。</p></li><li><p>通过该文件的文件结构体，链接到<code>file_operations</code>模块，调用内核函数 mmap，其原型为：<code>int mmap(struct file *, struct vm_area_struct *)</code>，不同于用户空间库函数。</p></li><li><p>内核mmap函数通过虚拟文件系统inode模块定位到文件磁盘物理地址。</p></li><li><p>通过<code>remap_pfn_range</code>函数建立页表，即实现了文件地址和虚拟地址区域的映射关系。此时，这片虚拟地址并没有任何数据关联到主存中。(Linux有2个方法建立页表)</p><ul><li><p>使用 <code>remap_pfn_range</code> 一次建立所有页表</p><ul><li><p>原型：<code>int remap_pfn_range(struct vm_area_struct *vma, unsigned long virt_addr, unsigned long pfn, unsigned long size, pgprot_t prot);</code></p><ul><li><p><code>vma</code> 用户进程创建一个vma区域</p></li><li><p><code>virt_addr</code> 重新映射应当开始的用户虚拟地址. 这个函数建立页表为这个虚拟地址范围从 <code>virt_addr</code> 到 <code>virt_addr_size</code>.</p></li><li><p><code>pfn</code> 页帧号, 对应虚拟地址应当被映射的物理地址. 这个页帧号简单地是物理地址右移 <code>PAGE_SHIFT</code> 位. 对大部分使用, VMA 结构的 <code>vm_paoff</code> 成员正好包含你需要的值.</p></li><li><p><code>size</code> 正在被重新映射的区的大小, 以字节.</p></li><li><p><code>prot</code> 给新 VMA 要求的”protection”. 驱动可(并且应当)使用在 <code>vma-&gt;vm_page_prot</code> 中找到的值.</p></li></ul></li><li>返回值：成功返回 0, 失败返回一个负的错误值</li></ul></li><li><p>使用 <span id="nopage">nopage VMA</span>方法每次建立一个页表项</p><ul><li>原型：<code>struct page *(*nopage)(struct vm_area_struct *vma, unsigned long address, int *type);</code><ul><li>address 代表从用户空间传过来的用户空间虚拟地址.</li></ul></li><li>返回值：成功则返回一个有效映射页,失败返回NULL</li></ul></li><li><p>使用方面的限制</p><ul><li><code>remap_pfn_range</code>不能映射常规内存，只存取保留页和在物理内存顶之上的物理地址。因为保留页和在物理内存顶之上的物理地址内存管理系统的各个子模块管理不到。640 KB 和 1MB 是保留页可能映射，设备I/O内存也可以映射。</li><li>如果想把<code>kmalloc()</code>申请的内存映射到用户空间，则可以通过<code>mem_map_reserve()</code>把相应的内存设置为保留后就可以。</li></ul></li></ul></li></ul></li><li><p>进程发起对这片映射空间的访问(由缺页中断完成)，实现文件内容到物理内存（主存）的拷贝</p><ul><li><p>前两个阶段仅在于创建虚拟区间并完成地址映射，但是并没有将任何文件数据的拷贝至主存，真正的文件读取是当进程发起读或写操作时</p></li><li><p>进程的读或写操作访问虚拟地址空间这一段映射地址，通过查询页表，发现这一段地址并不在物理页面上。因为目前只建立了地址映射，真正的硬盘数据还没有拷贝到内存中，因此引发缺页异常。</p><ul><li><p><code>page cache</code>及<code>swap cache</code>中页面的区分：一个被访问文件的物理页面都驻留在<code>page cache</code>或<code>swap cache</code>中，一个页面的所有信息由struct page来描述。struct page中有一个域为指针mapping ，它指向一个struct address_space类型结构。page cache或swap cache中的所有页面就是根据address_space结构以及一个偏移量来区分的。</p></li><li><p>文件与 <code>address_space</code> 结构的对应：一个具体的文件在打开后，内核会在内存中为之建立一个<code>struct inode</code>结构，其中的  <code>i_mapping</code> 域指向一个 <code>address_space</code> 结构。这样，一个文件就对应一个<code>address_space</code> 结构，一个 <code>address_space</code> 与一个偏移量能够确定一个 <code>page cache</code> 或 <code>swap cache</code> 中的一个页面。因此，当要寻址某个数据时，很容易根据给定的文件及数据在文件内的偏移量而找到相应的页面。</p></li><li><p>进程调用 <code>mmap()</code> 时，只是在进程空间内新增了一块相应大小的缓冲区，并设置了相应的访问标识，但并没有建立进程空间到物理页面的映射。因此，第一次访问该空间时，会引发一个缺页异常。</p></li></ul></li><li><p>缺页异常进行一系列判断，确定无非法操作后，内核发起请求调页过程。</p></li><li><p>调页过程先在交换缓存空间（swap cache）中寻找需要访问的内存页，如果找到，则直接返回地址。如果没有找到，则判断该页是否在交换区 (swap area)，如果在，则执行一个换入操作。如果上述两种情况都不满足，处理程序将分配新的物理页面，并把它插入到page cache中。进程最终将更新进程页表。(使用 <a href="#nopage">nopage</a> 函数)</p></li><li><p>之后进程即可对这片主存进行读或者写的操作，如果写操作改变了其内容，一定时间后系统会自动回写脏页面到对应磁盘地址，也即完成了写入到文件的过程。</p><ul><li><strong>注：</strong> 对于映射普通文件情况（非共享映射），缺页异常处理程序首先会在 <code>page cache</code> 中根据 <code>address_space</code> 以及数据偏移量寻找相应的页面。如果没有找到，则说明文件数据还没有读入内存，处理程序会从磁盘读入相应的页面，并返回相应地址，同时，进程页表也会更新.</li></ul></li><li><p>注： 修改过的脏页面并不会立即更新回文件中，而是有一段时间的延迟，可以调用<code>msync()</code>来强制同步, 这样所写的内容就能立即保存到文件里了。</p></li></ul></li></ul><h4 id="mmap函数"><a href="#mmap函数" class="headerlink" title="mmap函数"></a>mmap函数</h4><ul><li><p>说明：mmap()用来将某个文件内容映射到内存中，对该内存区域的存取即是直接对该文件内容的读写</p></li><li><p>头文件：<code>#include &lt;unistd.h&gt;</code> <code>#include &lt;sys/mman.h&gt;</code></p></li><li><p>原型：<code>void *mmap(void *start, size_t length, int prot, int flags, int fd, off_t offsize);</code></p><ul><li>start：指向欲对应的内存起始地址，通常设为NULL，代表让系统自动选定地址，对应成功后该地址会返回</li><li>length：代表将文件中多大的部分对应到内存</li><li>prot：代表映射区域的保护方式<ul><li>PROT_EXEC  映射区域可被执行；</li><li>PROT_READ  映射区域可被读取；</li><li>PROT_WRITE  映射区域可被写入；</li><li>PROT_NONE  映射区域不能存取。</li></ul></li><li>flags：会影响映射区域的各种特性<ul><li>MAP_FIXED  如果参数 start 所指的地址无法成功建立映射时，则放弃映射，不对地址做修正。通常不鼓励用此旗标。</li><li>MAP_SHARED  对应射区域的写入数据会复制回文件内，而且允许其他映射该文件的进程共享。</li><li>MAP_PRIVATE  对应射区域的写入操作会产生一个映射文件的复制，即私人的”写入时复制” (copy on write)对此区域作的任何修改都不会写回原来的文件内容。</li><li>MAP_ANONYMOUS  建立匿名映射，此时会忽略参数fd，不涉及文件，而且映射区域无法和其他进程共享。</li><li>MAP_DENYWRITE  只允许对应射区域的写入操作，其他对文件直接写入的操作将会被拒绝。</li><li>MAP_LOCKED  将映射区域锁定住，这表示该区域不会被置换(swap)。</li><li><strong>注：在调用mmap()时必须要指定MAP_SHARED 或MAP_PRIVATE</strong></li></ul></li><li>fd：open()返回的文件描述词，代表欲映射到内存的文件</li><li>offset：文件映射的偏移量，通常设置为0，代表从文件最前方开始对应，offset必须是分页大小的整数倍</li></ul></li><li><p>返回值：若映射成功则返回映射区的内存起始地址，否则返回MAP_FAILED(-1)，错误原因存于errno 中</p></li><li><p>错误代码：</p><ul><li>EBADF  参数fd 不是有效的文件描述词。</li><li>EACCES  存取权限有误。如果是 MAP_PRIVATE 情况下文件必须可读，使用 MAP_SHARED 则要有 PROT_WRITE 以及该文件要能写入。</li><li>EINVAL  参数 start、length 或 offset 有一个不合法。</li><li>EAGAIN  文件被锁住，或是有太多内存被锁住。</li><li>ENOMEM  内存不足。</li></ul></li></ul><h4 id="系统调用mmap-用于共享内存的两种方式"><a href="#系统调用mmap-用于共享内存的两种方式" class="headerlink" title="系统调用mmap()用于共享内存的两种方式"></a>系统调用mmap()用于共享内存的两种方式</h4><ul><li><p>使用普通文件提供的内存映射</p><ul><li>适用于任何进程之间</li><li>需要打开或创建一个文件，然后再调用mmap()</li><li><p>示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*利用mmap()来读取/etc/passwd 文件内容*/</span></span><br><span class="line">    <span class="keyword">int</span> fd;</span><br><span class="line">    <span class="keyword">void</span> *start;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">sb</span>;</span></span><br><span class="line">    fd = open(<span class="string">"/etc/passwd"</span>, O_RDONLY); <span class="comment">/*打开/etc/passwd */</span></span><br><span class="line">    fstat(fd, &amp;sb); <span class="comment">/* 取得文件大小 */</span></span><br><span class="line">    start = mmap(<span class="literal">NULL</span>, sb.st_size, PROT_READ, MAP_PRIVATE, fd, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(start == MAP_FAILED) <span class="comment">/* 判断是否映射成功 */</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, start); </span><br><span class="line">    munmap(start, sb.st_size); <span class="comment">/* 解除映射 */</span></span><br><span class="line">    closed(fd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>通过mmap()实现共享内存的通信</p><ul><li>适用于具有亲缘关系的进程之间</li><li>由于父子进程特殊的亲缘关系，在父进程中先调用 mmap()，然后调用 fork()。那么在调用 fork() 之后，子进程继承父进程匿名映射后的地址空间，同样也继承 mmap() 返回的地址，这样，父子进程就可以通过映射区域进行通信了</li><li><p>一般来说，子进程单独维护从父进程继承下来的一些变量。而  mmap() 返回的地址，却由父子进程共同维护。 对于具有亲缘关系的进程实现共享内存最好的方式应该是采用匿名内存映射的方式。此时，不必指定具体的文件，只要设置相应的标志即可</p></li><li><p>进程 A 和 B 共享内存示例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*进程A*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;error.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUF_SIZE 100</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fd, nread, i;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">sb</span>;</span></span><br><span class="line">    <span class="keyword">char</span> *mapped, buf[BUF_SIZE];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; BUF_SIZE; i++)&#123;</span><br><span class="line">        buf[i] = <span class="string">'#'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 打开文件 */</span></span><br><span class="line">    <span class="keyword">if</span> ((fd = open(argv[<span class="number">1</span>], O_RDWR)) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        perror(<span class="string">"open"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 获取文件的属性 */</span></span><br><span class="line">    <span class="keyword">if</span> ((fstat(fd, &amp;sb)) == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">"fstat"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 将文件映射至进程的地址空间 */</span></span><br><span class="line">    <span class="keyword">if</span> ((mapped = (<span class="keyword">char</span> *)mmap(<span class="literal">NULL</span>, sb.st_size, PROT_READ |</span><br><span class="line">                    PROT_WRITE, MAP_SHARED, fd, <span class="number">0</span>)) == (<span class="keyword">void</span> *)<span class="number">-1</span>)&#123;</span><br><span class="line">        perror(<span class="string">"mmap"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 文件已在内存, 关闭文件也可以操纵内存 */</span></span><br><span class="line">    close(fd);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 每隔两秒查看存储映射区是否被修改 */</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, mapped);</span><br><span class="line">        sleep(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*进程B*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;error.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUF_SIZE 100</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fd, nread, i;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">sb</span>;</span></span><br><span class="line">    <span class="keyword">char</span> *mapped, buf[BUF_SIZE];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; BUF_SIZE; i++)&#123;</span><br><span class="line">        buf[i] = <span class="string">'#'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 打开文件 */</span></span><br><span class="line">    <span class="keyword">if</span> ((fd = open(argv[<span class="number">1</span>], O_RDWR)) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        perror(<span class="string">"open"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 获取文件的属性 */</span></span><br><span class="line">    <span class="keyword">if</span> ((fstat(fd, &amp;sb)) == <span class="number">-1</span>)&#123;</span><br><span class="line">        perror(<span class="string">"fstat"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 私有文件映射将无法修改文件 */</span></span><br><span class="line">    <span class="keyword">if</span> ((mapped = (<span class="keyword">char</span> *)mmap(<span class="literal">NULL</span>, sb.st_size, PROT_READ |</span><br><span class="line">                    PROT_WRITE, MAP_PRIVATE, fd, <span class="number">0</span>)) == (<span class="keyword">void</span> *)<span class="number">-1</span>)&#123;</span><br><span class="line">        perror(<span class="string">"mmap"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 映射完后, 关闭文件也可以操纵内存 */</span></span><br><span class="line">    close(fd);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 修改一个字符 */</span></span><br><span class="line">    mapped[<span class="number">20</span>] = <span class="string">'9'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>匿名映射实现父子进程通信示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUF_SIZE 100</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>    *p_map;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 匿名映射,创建一块内存供父子进程通信 */</span></span><br><span class="line">    p_map = (<span class="keyword">char</span> *)mmap(<span class="literal">NULL</span>, BUF_SIZE, PROT_READ | PROT_WRITE,</span><br><span class="line">            MAP_SHARED | MAP_ANONYMOUS, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(fork() == <span class="number">0</span>)&#123;</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"child got a message: %s\n"</span>, p_map);</span><br><span class="line">        <span class="built_in">sprintf</span>(p_map, <span class="string">"%s"</span>, <span class="string">"hi, dad, this is son"</span>);</span><br><span class="line">        munmap(p_map, BUF_SIZE); <span class="comment">//实际上，进程终止时，会自动解除映射。</span></span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sprintf</span>(p_map, <span class="string">"%s"</span>, <span class="string">"hi, this is father"</span>);</span><br><span class="line">    sleep(<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"parent got a message: %s\n"</span>, p_map);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h4><ul><li><p>munmap函数</p><ul><li>说明：munmap()用来取消参数start 所指的映射内存起始地址，参数length 则是欲取消的内存大小。当进程结束或利用exec 相关函数来执行其他程序时，映射内存会自动解除，但关闭对应的文件描述词时不会解除映射</li><li>头文件：<code>#include &lt;unistd.h&gt;</code> <code>#include &lt;sys/mman.h&gt;</code></li><li>原型：<code>int munmap(void *start, size_t length);</code></li><li>返回值：如果解除映射成功则返回0，否则返回－1，错误原因存于errno 中<ul><li>错误代码EINVAL参数 start 或length 不合法</li></ul></li></ul></li><li><p>msync函数</p><ul><li>说明：进程在映射空间的对共享内容的改变并不直接写回到磁盘文件中，往往在调用munmap()后才执行该操作。可以通过调用msync()函数来实现磁盘文件内容与共享内存一致，即同步操作。</li><li>头文件：<code>#include &lt;sys/mman.h&gt;</code></li><li>原型：<code>int msync(void *addr, size_t len, int flags);</code><ul><li>addr：文件映射到进程空间的地址</li><li>len：映射空间的大小</li><li>flags：刷新的参数设置<ul><li>MS_ASYNC（异步）： 调用会立即返回，不等到更新的完成；</li><li>MS_SYNC（同步）： 调用会等到更新完成之后返回；</li><li>MS_INVALIDATE（通知使用该共享区域的进程，数据已经改变）： 在共享内容更改之后，使得文件的其他映射失效，从而使得共享该文件的其他进程去重新获取最新值</li></ul></li></ul></li><li>返回值：成功则返回0；失败则返回-1</li></ul></li><li><p>示例：</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;error.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUF_SIZE 100</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fd, nread, i;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">sb</span>;</span></span><br><span class="line">    <span class="keyword">char</span> *mapped, buf[BUF_SIZE];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; BUF_SIZE; i++) &#123;</span><br><span class="line">        buf[i] = <span class="string">'#'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 打开文件 */</span></span><br><span class="line">    <span class="keyword">if</span> ((fd = open(argv[<span class="number">1</span>], O_RDWR)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">"open"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 获取文件的属性 */</span></span><br><span class="line">    <span class="keyword">if</span> ((fstat(fd, &amp;sb)) == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">"fstat"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 将文件映射至进程的地址空间 */</span></span><br><span class="line">    <span class="keyword">if</span> ((mapped = (<span class="keyword">char</span> *)mmap(<span class="literal">NULL</span>, sb.st_size, PROT_READ |</span><br><span class="line">                    PROT_WRITE, MAP_SHARED, fd, <span class="number">0</span>)) == (<span class="keyword">void</span> *)<span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">"mmap"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 映射完后, 关闭文件也可以操纵内存 */</span></span><br><span class="line">    close(fd);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, mapped);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 修改一个字符,同步到磁盘文件 */</span></span><br><span class="line">    mapped[<span class="number">20</span>] = <span class="string">'9'</span>;</span><br><span class="line">    <span class="keyword">if</span> ((msync((<span class="keyword">void</span> *)mapped, sb.st_size, MS_SYNC)) == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">"msync"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 释放存储映射区 */</span></span><br><span class="line">    <span class="keyword">if</span> ((munmap((<span class="keyword">void</span> *)mapped, sb.st_size)) == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">"munmap"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="mmap的优点"><a href="#mmap的优点" class="headerlink" title="mmap的优点"></a>mmap的优点</h4><ul><li><p>对文件的读取操作跨过了页缓存，减少了数据的拷贝次数，用内存读写取代I/O读写，提高了文件读取效率。</p></li><li><p>实现了用户空间和内核空间的高效交互方式。两空间的各自修改操作可以直接反映在映射的区域内，从而被对方空间及时捕捉。</p></li><li><p>提供进程间共享内存及相互通信的方式。不管是父子进程还是无亲缘关系的进程，都可以将自身用户空间映射到同一个文件或匿名映射到同一片区域。从而通过各自对映射区域的改动，达到进程间通信和进程间共享的目的。</p><ul><li>同时，如果进程A和进程B都映射了区域C，当A第一次读取C时通过缺页从磁盘复制文件页到内存中；但当B再读C的相同页面时，虽然也会产生缺页异常，但是不再需要从磁盘中复制文件过来，而可直接使用已经保存在内存中的文件数据。</li></ul></li><li><p>可用于实现高效的大规模数据传输。内存空间不足，是制约大数据操作的一个方面，解决方案往往是借助硬盘空间协助操作，补充内存的不足。但是进一步会造成大量的文件I/O操作，极大影响效率。这个问题可以通过mmap映射很好的解决。换句话说，但凡是需要用磁盘空间代替内存的时候，mmap都可以发挥其功效。</p></li></ul><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ul><li><p>使用mmap需要注意的一个关键点是，mmap映射区域大小必须是物理页大小(page_size)的整倍数（32位系统中通常是4k字节）。原因是，内存的最小粒度是页，而进程虚拟地址空间和内存的映射也是以页为单位。为了匹配内存的操作，mmap从磁盘到虚拟地址空间的映射也必须是页。</p></li><li><p>内核可以跟踪被内存映射的底层对象（文件）的大小，进程可以合法的访问在当前文件大小以内又在内存映射区以内的那些字节。也就是说，如果文件的大小一直在扩张，只要在映射区域范围内的数据，进程都可以合法得到，这和映射建立时文件的大小无关。</p></li><li><p>映射建立之后，即使文件关闭，映射依然存在。因为映射的是磁盘的地址，不是文件本身，和文件句柄无关。同时可用于进程间通信的有效地址空间不完全受限于被映射文件的大小，因为是按页映射。</p></li><li><p>文件大小, mmap的参数 len 都不能决定进程能访问的大小, 而是容纳文件被映射部分的最小页面数决定<br>进程能访问的大小<br><img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/mmap%E5%9C%B0%E5%9D%80%E6%98%A0%E5%B0%84.gif" alt></p><ul><li>对于用mmap()映射普通文件来说，进程会在自己的地址空间新增一块空间，空间大<br>小由mmap()的len参数指定</li><li>注意，进程并不一定能够对全部新增空间都能进行有效访问。进程能够访问的有效地址大小取决于文件被映射部分的大小。简单的说，能够容纳文件被映射部分大小的最少页面个数决定了进程从mmap()返回的地址开始，能够有效访问的地址空间大小。超过这个空间大小，内核会根据超过的严重程度返回发送不同的信号给进程</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fd,i;</span><br><span class="line">    <span class="keyword">int</span> pagesize,offset;</span><br><span class="line">    <span class="keyword">char</span> *p_map;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">sb</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 取得page size */</span></span><br><span class="line">    pagesize = sysconf(_SC_PAGESIZE);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"pagesize is %d\n"</span>,pagesize);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 打开文件 */</span></span><br><span class="line">    fd = open(argv[<span class="number">1</span>], O_RDWR, <span class="number">00777</span>);</span><br><span class="line">    fstat(fd, &amp;sb);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"file size is %zd\n"</span>, (<span class="keyword">size_t</span>)sb.st_size);</span><br><span class="line"></span><br><span class="line">    offset = <span class="number">0</span>;</span><br><span class="line">    p_map = (<span class="keyword">char</span> *)mmap(<span class="literal">NULL</span>, pagesize * <span class="number">2</span>, PROT_READ|PROT_WRITE,</span><br><span class="line">            MAP_SHARED, fd, offset);</span><br><span class="line">    close(fd);</span><br><span class="line"></span><br><span class="line">    p_map[sb.st_size] = <span class="string">'9'</span>;  <span class="comment">/* 导致总线错误 */</span></span><br><span class="line">    p_map[pagesize] = <span class="string">'9'</span>;    <span class="comment">/* 导致段错误 */</span></span><br><span class="line"></span><br><span class="line">    munmap(p_map, pagesize * <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li><p>最近在学系网络编程，关于 mmap 、零拷贝与共享内存的知识看了许多，然后自己在学习的过程中进行了总结(看了好多的博客，进行了部分测试(知识不够，不能全面测试))，虽然还有好多的不懂得，但是总结下来慢慢消化与学习</p></li><li><p>本文不是个人原创(现在也没那个水平。。。)，所以内容都是自己根据资料所总结，如果涉及到版权问题(或者文章中的错误)，还望通知，予以修正，谢谢！</p></li><li><p>更深入的剖析：<a href="http://dig404.com/2014/12/26/libpcap-mmap-3/" target="_blank" rel="noopener">http://dig404.com/2014/12/26/libpcap-mmap-3/</a></p></li></ul><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="http://c.biancheng.net/cpp/html/138.html" target="_blank" rel="noopener">http://c.biancheng.net/cpp/html/138.html</a></li><li><a href="http://chuansong.me/n/1768538651716" target="_blank" rel="noopener">http://chuansong.me/n/1768538651716</a></li><li><a href="http://blog.chinaunix.net/uid-26669729-id-3077015.html" target="_blank" rel="noopener">http://blog.chinaunix.net/uid-26669729-id-3077015.html</a></li><li><a href="http://www.10tiao.com/html/546/201704/2650629303/1.html" target="_blank" rel="noopener">http://www.10tiao.com/html/546/201704/2650629303/1.html</a></li><li><a href="http://www.cnblogs.com/huxiao-tee/p/4660352.html" target="_blank" rel="noopener">http://www.cnblogs.com/huxiao-tee/p/4660352.html</a></li><li><a href="https://nieyong.github.io/wiki_cpu/mmap%E8%AF%A6%E8%A7%A3.html" target="_blank" rel="noopener">https://nieyong.github.io/wiki_cpu/mmap%E8%AF%A6%E8%A7%A3.html</a></li><li><a href="http://blog.csdn.net/maverick1990/article/details/48050975" target="_blank" rel="noopener">http://blog.csdn.net/maverick1990/article/details/48050975</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> OS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内存分配 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>linux查看多线程运行状态</title>
      <link href="/2017/10/27/linux%E6%9F%A5%E7%9C%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%BF%90%E8%A1%8C%E7%8A%B6%E6%80%81/"/>
      <url>/2017/10/27/linux%E6%9F%A5%E7%9C%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%BF%90%E8%A1%8C%E7%8A%B6%E6%80%81/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><ul><li><p>最近学习网络编程，在进线程这部分遇到了一些问题：</p><ul><li>不知道堆栈的调用情况</li><li>不知道多线程的运行状态</li></ul></li><li><p>因此进行了知识的普及(这里参考了不少的网上博客的见解，进行了整合以及测试)，如下：</p></li></ul><a id="more"></a><h4 id="proc查看"><a href="#proc查看" class="headerlink" title="proc查看"></a>proc查看</h4><ul><li><p>查看status文件</p><ul><li><p>命令：<code>cat /proc/1/status</code></p></li><li><p>注：命令中的 1 是想要查看的进程的 pid</p></li></ul></li><li><p>查看sched文件</p><ul><li><p>命令：<code>cat /proc/1/sched</code></p></li><li><p>注：同上</p></li></ul></li><li><p>查看线程的具体情况</p><ul><li><p>命令：<code>ls /proc/1/task</code></p></li><li><p>注：task下是以线程id 值命名的目录，可以使用ls |wc 统计出的值和上面两种方式查出的结果一样。进入各线程id的目录，可以查看具体线程的资源信息</p></li></ul></li><li><p>注：上面查看文件的方法，主要是对单进程的线程统计。如像统计apache、nginx、zabbix这类程序会同时开启N个进程。如果要统计这类程序的线程数，就是所有进程下的线程数的之和</p></li></ul><h4 id="pstree"><a href="#pstree" class="headerlink" title="pstree"></a>pstree</h4><ul><li><p>说明：这个命令可以看到当前运行的线程树</p></li><li><p>命令：<code>pstree</code></p><ul><li>注：如果想查看某个进程的详细线程情况，可以使用<code>pstree -p &lt;pid&gt;</code>的方法：</li></ul></li></ul><h4 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h4><ul><li>说明：ps关于线程的参数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">H               Show threads as if they were processes</span><br><span class="line">-L              Show threads, possibly with LWP and NLWP columns</span><br><span class="line">-T              Show threads, possibly with SPID column</span><br><span class="line">m               Show threads after processes</span><br><span class="line">-m              Show threads after processes</span><br></pre></td></tr></table></figure><ul><li>关键参数<ul><li>-L 参数显示进程，并尽量显示其LWP( LWP为轻量级进程（即：线程），(light weight process, or thread) )(线程ID)和NLWP(线程的个数) <code>ps -eLf | grep &lt;name&gt;</code></li><li>-T 参数可以开启线程查看 <code>ps -T -p &lt;pid&gt;</code></li></ul></li></ul><h4 id="top"><a href="#top" class="headerlink" title="top"></a>top</h4><ul><li><p>说明：top命令可以实时显示各个线程情况</p></li><li><p>使用：</p><ul><li>在top命令后，按H键；或者top -H 表示根据线程信息来显示</li><li>在top中也可以查看进程（或线程）在哪个CPU上执行的，执行top后，按 f，然后按 j<code>（选中* J: P = Last used cpu (SMP)）</code>，然后按空格或回车退出设置，在 top 的显示中会多出 P 这一列是最近一次运行该线程（或进程）的CPU</li></ul></li></ul><h4 id="pstack"><a href="#pstack" class="headerlink" title="pstack"></a>pstack</h4><ul><li><p>说明：pstack 是一个栈跟踪命令，可以显示线程信息</p></li><li><p>使用：</p><ul><li>知道名字<ul><li>用<code>pgrep process_name</code>来得到进程的 pid</li><li>然后运行：<code>pstack pid</code></li><li>或者直接运行：<code>pstack $(pgrep process_name)</code></li></ul></li><li>知道 pid<ul><li>运行：<code>pstack pid</code></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> OS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>linux下/sbin/nologin和/bin/false的区别</title>
      <link href="/2017/10/26/nologin%E5%92%8Cfalse%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2017/10/26/nologin%E5%92%8Cfalse%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h4 id="linux下-sbin-nologin和-bin-false的区别"><a href="#linux下-sbin-nologin和-bin-false的区别" class="headerlink" title="linux下/sbin/nologin和/bin/false的区别"></a>linux下/sbin/nologin和/bin/false的区别</h4><ul><li><code>/bin/false</code>是最严格的禁止 login 选项，一切服务都不能用。而<code>/sbin/nologin</code>只是不允许 login 系统，但可以使用其他 ftp 等服务。如果想要用 false 在禁止 login 的同时允许 ftp，则必须在<code>/etc/shells</code>里增加一行<code>/bin/false</code>。</li></ul><a id="more"></a><ul><li><p>知道了Linux用户管理最重要的两个文件就是<code>/etc/passwd</code>和<code>/etc/shadow</code>这两个文件。其中<code>/etc/passwd</code>是用来存储登陆用户信息的，它的基本格式如下：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class="line">adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class="line">s</span><br></pre></td></tr></table></figure></li><li><p>由上面的格式可以看出，每一行代表一个用户的信息，一共包括7个字段的信息，每个字段的信息用冒号隔开。这7个字段分别代表：</p><ul><li>账号名称：即登陆时的用户名</li><li>密码：早期UNIX系统的密码是放在这个文件中的，但因为这个文件的特性是所有程序都能够读取，所以，这样很容易造成数据被窃取，因此后来就将这个字段的密码数据改放到<code>/etc/shadow</code>中了<strong>(这项被置为x表示)</strong></li><li>UID：用户ID，每个账号名称对应一个 UID，通常<code>UID=0</code>表示 root 管理员</li><li>GID：组ID，与<code>/etc/group</code>有关，<code>/etc/group</code>与<code>/etc/passwd</code>差不多，是用来规范用户组信息的</li><li>用户信息说明栏： 用来解释这个账号是干什么的</li><li>家目录：home目录，即用户登陆以后跳转到的目录，以root用户为例，/root是它的家目录，所以root用户登陆以后就跳转到<code>/root</code>目录这里</li><li>Shell：用户使用的 shell，通常使用<code>/bin/bash</code>这个 shell，这也就是为什么登陆 Linux 时默认的 shell 是 bash 的原因，就是在这里设置的，如果要想更改登陆后使用的 shell，可以在这里修改。另外一个很重要的东西是有一个 shell 可以用来替代让账号无法登陆的命令，那就是<code>/sbin/nologin</code>。</li></ul></li><li><p>当我看到这里的时候，我就去登陆我们实验室的服务器，打开/etc/passwd这个文件，里面果然有很多的类似上面格式的用户账号信息。</p><ul><li><p>由于我们实验室服务器开放了ftp服务，而我正好有一个ftp的账号，我看到我的账号信息是这样的<code>roux:x:530:525::/opt/ftp:/sbin/nologin</code> 通过上面的学习，我觉得它的意思大概是这样的，用户名是 roux，x 表示密码经过加密放到<code>/etc/shadow</code>文件中了，UID 是 530，GID 是 525，访问的目录是<code>/opt/ftp</code>，我看了一下，这个目录下的内容正好是我登陆 ftp 后所看到的，至于最后一个<code>/sbin/nologin</code>，应该是登录时候使用的 shell，但是它为什么是 nologin 呢，难道不让我登陆吗？</p></li><li><p>于是我用 root 权限登陆到里面，把后面的<code>/sbin/nologin</code>改成了<code>/bin/bash</code>，重新用ssh进行登陆，真的登陆进去了，而且登陆后的目录正好是<code>/opt/ftp</code>。但是我的权限依旧没有改变，很多文件还是打不开。</p></li><li><p>于是我明白了，这个 nologin 的作用就是限制某些用户通过 ssh 登陆到 shell 上。有时候为了进行系统维护工作，临时禁止其他用户登录，可以使用 nologin 文件，具体做法是在<code>/etc/</code>目录下创建一个名称为 nologin 的文件。例如：</p><p><code>#touch /etc/nologin</code></p></li><li><p>这样将禁止随后的用户登录到系统中。禁止用户登录时，<code>/etc/nologin</code> 文件中的内容将会显示给用户，会一闪而过。</p></li><li><p>当用户试图登陆时，将会给用户显示<code>&quot;disable login by admin temperarily!&quot;</code>，当系统维护结束以后，再删除<code>/etc/nologin</code>文件，其他用户就又可以恢复登陆了，这只是限于能登陆 shel l的用户来说的，对于那些登陆shell 为<code>/sbin/nologin</code>的用户来说没有影响，因为他们本身就无法登陆shell。</p></li></ul></li><li><p>总结：<code>/etc/nologin</code> 文件存在时 除 root 用户外其他任意用户无法登录</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> OS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> OS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>一次命令行与程序间的交流</title>
      <link href="/2017/10/26/popen%E5%87%BD%E6%95%B0/"/>
      <url>/2017/10/26/popen%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><ul><li><p>最近学习刚好遇到一个问题：在程序里面传递一个命令来让终端命令行执行，然后将结果返回到主程序，主程序用返回的结果来操作。</p></li><li><p>思路：</p><ul><li>我在一开始想的是直接在终端执行命令然后写到一个临时文件(读取完就删除)里面，然后主程序读取文件的内容进行操作，但是考虑到我的程序要承受高并发操作(而且每次执行一下，都要创建一个临时文件，这种开销太大)，并且每次都要对磁盘进行操作，遇见大数据量的话效率太低，所以这种办法行不通</li><li>放弃了第一种方法，然后我想到的是利用子进程调用exec()函数来完成，但是最后的结果返回到父进程没有想通，无果。</li><li>后面我想到管道这个ipc方法，创建一个子进程继续利用exec()函数来执行命令，然后将执行的结果输出到管道的输入端，父进程读取即可，这是个方法。</li><li>然后我考虑这种方法的替代方案，无果，网上查询资料发现有函数popen()可以实现，故记录。</li></ul></li></ul><a id="more"></a><h4 id="第一次尝试"><a href="#第一次尝试" class="headerlink" title="第一次尝试"></a>第一次尝试</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    system(<span class="string">"ls &gt; tmp"</span>);  <span class="comment">//执行ls &gt; tmp命令</span></span><br><span class="line">    FILE *fp = fopen(<span class="string">"tmp"</span>, <span class="string">"rb"</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">NULL</span> == fp)&#123;</span><br><span class="line">        perror(<span class="string">"open file"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span> ch[MAXSIZE];</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((ch[i] = fgetc(fp)) != EOF)&#123;</span><br><span class="line">        <span class="comment">//读取fp描述符缓冲区的数据存放在ch数组里</span></span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(fp);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第二次尝试"><a href="#第二次尝试" class="headerlink" title="第二次尝试"></a>第二次尝试</h4><ul><li>说明：fork 一个子进程，并创建一个匿名管道，在子进程中执行shell 命令，并将其标准输出 dup 到匿名管道的输入端，父进程从管道中读取</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">execmd</span><span class="params">(<span class="keyword">char</span>* cmd, <span class="keyword">char</span>* buf, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>   fd[<span class="number">2</span>];</span><br><span class="line">      <span class="keyword">pid_t</span> pid;</span><br><span class="line">    <span class="keyword">int</span>   n, count;</span><br><span class="line">    bzero(buf, len);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pipe(fd) &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span> ((pid = fork()) &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (pid &gt; <span class="number">0</span>)&#123;</span><br><span class="line">          close(fd[<span class="number">1</span>]);</span><br><span class="line">          <span class="keyword">while</span> ((n = read(fd[<span class="number">0</span>], buf + count, len)) &gt; <span class="number">0</span> &amp;&amp; count &gt; len)</span><br><span class="line">                count += n;</span><br><span class="line"></span><br><span class="line">          close(fd[<span class="number">0</span>]);</span><br><span class="line">          <span class="keyword">if</span> (waitpid(pid, <span class="literal">NULL</span>, <span class="number">0</span>) &gt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          close(fd[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">if</span> (fd[<span class="number">1</span>] != STDOUT_FILENO)&#123;</span><br><span class="line">              <span class="keyword">if</span> (dup2(fd[<span class="number">1</span>], STDOUT_FILENO) != STDOUT_FILENO)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              close(fd[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (execl(<span class="string">"/bin/sh"</span>, <span class="string">"sh"</span>, <span class="string">"-c"</span>, cmd, (<span class="keyword">char</span>*)<span class="number">0</span>) == <span class="number">-1</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第三次尝试"><a href="#第三次尝试" class="headerlink" title="第三次尝试"></a>第三次尝试</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">execmd</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *cmd, <span class="keyword">char</span> *result)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">char</span> ps[<span class="number">1024</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    FILE *fp;</span><br><span class="line">    <span class="built_in">strcpy</span>(ps, cmd);</span><br><span class="line">    <span class="keyword">if</span>((fp = popen(ps, <span class="string">"rb"</span>))!= <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">while</span>(fgets(buf, <span class="number">1024</span>, fp)!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">           <span class="built_in">strcat</span>(result, buf);</span><br><span class="line">           <span class="keyword">if</span>(<span class="built_in">strlen</span>(result)&gt;<span class="number">1024</span>)</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pclose(fp);</span><br><span class="line">        ptr = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"popen %s error/n"</span>, ps);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>总结：</p><ul><li>可以利用popen函数进行命令行和程序间的参数传递，巧妙利用string系列函数 可以和程序的参数 argv 结合，然后传递给 popen 得到返回结果</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Function </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>open系列函数</title>
      <link href="/2017/10/25/open%E7%B3%BB%E5%88%97%E5%87%BD%E6%95%B0/"/>
      <url>/2017/10/25/open%E7%B3%BB%E5%88%97%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="fopen函数"><a href="#fopen函数" class="headerlink" title="- fopen函数"></a>- fopen函数</h4><ul><li><p>说明：fopen()是一个常用的函数，用来以指定的方式打开文件</p></li><li><p>头文件：<code>#include &lt;stdio.h&gt;</code></p></li><li><p>原型：<code>FILE *fopen(const char *path, const char *mode)</code></p>  <a id="more"></a><ul><li>mode:</li></ul></li></ul><table><thead><tr><th>打开方式</th><th>说明</th></tr></thead><tbody><tr><td>r</td><td>以只读方式打开文件，该文件必须存在。</td></tr><tr><td>r+</td><td>以读/写方式打开文件，该文件必须存在。</td></tr><tr><td>rb+</td><td>以读/写方式打开一个二进制文件，只允许读/写数据。</td></tr><tr><td>rt+</td><td>以读/写方式打开一个文本文件，允许读和写。</td></tr><tr><td>w</td><td>打开只写文件，若文件存在则长度清为0，即该文件内容消失，若不存在则创建该文件。</td></tr><tr><td>w+</td><td>打开可读/写文件，若文件存在则文件长度清为零，即该文件内容会消失。若文件不存在则建立该文件。</td></tr><tr><td>a</td><td>以附加的方式打开只写文件。若文件不存在，则会建立该文件，如果文件存在，写入的数据会被加到文件尾，即文件原先的内容会被保留（EOF符保留)。</td></tr><tr><td>a+</td><td>以附加方式打开可读/写的文件。若文件不存在，则会建立该文件，如果文件存在，则写入的数据会被加到文件尾后，即文件原先的内容会被保留（原来的EOF符 不保留)。</td></tr><tr><td>wb</td><td>以只写方式打开或新建一个二进制文件，只允许写数据。</td></tr><tr><td>wb+</td><td>以读/写方式打开或建立一个二进制文件，允许读和写。</td></tr><tr><td>wt+</td><td>以读/写方式打开或建立一个文本文件，允许读写。</td></tr><tr><td>at+</td><td>以读/写方式打开一个文本文件，允许读或在文本末追加数据。</td></tr><tr><td>ab+</td><td>以读/写方式打开一个二进制文件，允许读或在文件末追加数据。</td></tr></tbody></table><ul><li><p>返回值：文件顺利打开后，指向该流的文件指针就会被返回。若果文件打开失败则返回NULL，并把错误代码存在errno 中</p></li><li><p>示例：</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE* fp;</span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">100</span>] = <span class="string">"Hello World!"</span>;</span><br><span class="line">    fstream=fopen(<span class="string">"test.txt"</span>, <span class="string">"at+"</span>);</span><br><span class="line">    <span class="keyword">if</span>(fp == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"open file test.txt failed!\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"open file test.txt succeed!\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(fp);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注意：</p><ul><li>若打开文件失败，接下来的读写动作也无法顺利进行，所以在fopen()后请作错误判断及处理</li><li>文件操作完成后，需要将文件关闭，一定要注意，否则会造成文件所占用内存泄露和在下次访问文件时出现问题</li><li>文件读取方式<code>(文本文件与二进制文件的区别在系统存储上它们实际上并没有什么区别，都是以二进制的方式存储于硬盘上。之所以分二进制文件和文本文件，主要是逻辑上的区分，文本文件更人为可读而已)</code><ul><li>二进制：二进制方式很简单，读文件时，会原封不动的读出文件的全部內容，写的時候，也是把內存缓冲区的內容原封不动的写到文件中</li><li>文本方式(仅Windows和DOS)：在写文件时，会将换行符号<code>CRLF(0x0D 0x0A)</code> 全部转换成单个的 <code>0x0A</code>，并且当遇到结束符 <code>CTRLZ(0x1A)</code>时，就认为文件已经结束。相应的，写文件时，会将所有的 <code>0x0A</code> 换成 <code>0x0D0x0A</code>。所以，若使用文本方式打开二进制文件时，就很容易出现文件读不完整，或內容不对的错误。</li></ul></li></ul></li></ul><h4 id="open函数"><a href="#open函数" class="headerlink" title="- open函数"></a>- open函数</h4><ul><li><p>说明：打开和创建文件</p></li><li><p>头文件：<code>#include &lt;sys/types.h&gt;`</code> include &lt;sys/stat.h&gt;<code></code>#include &lt;fcntl.h&gt;`</p></li><li><p>原型：<code>int open(const char *pathname, int flags)</code> <code>int open(const char *pathname, int flags, mode_t mode)</code></p><ul><li><p>flags：<code>(下面前三种互斥，利用&quot;|&quot;来组合使用)</code></p><ul><li>O_RDONLY 以只读方式打开文件</li><li>O_WRONLY 以只写方式打开文件</li><li>O_RDWR 以可读写方式打开文件</li><li>O_CREAT 若欲打开的文件不存在则自动建立该文件。</li><li>O_EXCL 如果O_CREAT 也被设置，此指令会去检查文件是否存在。文件若不存在则建立该文件，否则将导致打开文件错误。此外，若O_CREAT与O_EXCL同时设置，并且欲打开的文件为符号连接，则会打开文件失败。</li><li>O_NOCTTY 如果欲打开的文件为终端机设备时，则不会将该终端机当成进程控制终端机。</li><li>O_TRUNC 若文件存在并且以可写的方式打开时，此旗标会令文件长度清为0，而原来存于该文件的 资料也会消失。</li><li>O_APPEND 当读写文件时会从文件尾开始移动，也就是所写入的数据会以附加的方式加入到文件后面。</li><li>O_NONBLOCK 以不可阻断的方式打开文件，也就是无论有无数据读取或等待，都会立即返回进程之中。</li><li>O_NDELAY 同O_NONBLOCK。</li><li>O_SYNC 以同步的方式打开文件。</li><li>O_NOFOLLOW 如果参数pathname 所指的文件为一符号连接，则会令打开文件失败。</li><li>O_DIRECTORY 如果参数pathname 所指的文件并非为一目录，则会令打开文件失败</li></ul></li><li><p>mode：<code>(只有创建新文件时才生效，用于指定文件的权限(权限受到umask的限制))</code></p><ul><li>S_IRWXU,  00700 权限, 代表该文件所有者具有可读、可写及可执行的权限.</li><li>S_IRUSR 或S_IREAD, 00400 权限, 代表该文件所有者具有可读取的权限.</li><li>S_IWUSR 或S_IWRITE, 00200 权限, 代表该文件所有者具有可写入的权限.</li><li>S_IXUSR 或S_IEXEC, 00100 权限, 代表该文件所有者具有可执行的权限.</li><li>S_IRWXG 00070 权限, 代表该文件用户组具有可读、可写及可执行的权限.</li><li>S_IRGRP 00040 权限, 代表该文件用户组具有可读的权限.</li><li>S_IWGRP 00020 权限, 代表该文件用户组具有可写入的权限.</li><li>S_IXGRP 00010 权限, 代表该文件用户组具有可执行的权限.</li><li>S_IRWXO 00007 权限, 代表其他用户具有可读、可写及可执行的权限.</li><li>S_IROTH 00004 权限, 代表其他用户具有可读的权限</li><li>S_IWOTH 00002 权限, 代表其他用户具有可写入的权限.</li><li>S_IXOTH 00001 权限, 代表其他用户具有可执行的权限.</li></ul></li></ul></li><li><p>返回值：成功则返回文件描述符，否则返回 -1</p></li><li><p>错误代码：</p><ul><li>EEXIST 参数pathname 所指的文件已存在, 却使用了O_CREAT 和O_EXCL 旗标.</li><li>EACCESS 参数pathname 所指的文件不符合所要求测试的权限.</li><li>EROFS 欲测试写入权限的文件存在于只读文件系统内.</li><li>EFAULT 参数pathname 指针超出可存取内存空间.</li><li>EINVAL 参数mode 不正确.</li><li>ENAMETOOLONG 参数 pathname 太长.</li><li>ENOTDIR 参数pathname 不是目录.</li><li>ENOMEM 核心内存不足.</li><li>ELOOP 参数pathname 有过多符号连接问题.</li><li>EIO I/O 存取错误.</li></ul></li><li><p>示例：</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fp = open(<span class="string">"test.txt"</span>, O_RDWR | O_CREAT, <span class="number">0666</span>);</span><br><span class="line">    <span class="keyword">if</span>(fp == <span class="number">-1</span>)&#123;</span><br><span class="line">        perror(<span class="string">"open file"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"success!\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    close(fp);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>运行结果<br><img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/open.png" alt></p></li><li><p>说明：umask为0002，创建的时候使用0666，最终的权限为<code>0666-0002=0664(-rw-rw-r–)</code></p></li></ul><h4 id="fdopen函数"><a href="#fdopen函数" class="headerlink" title="- fdopen函数"></a>- fdopen函数</h4><ul><li><p>说明：fdopen()会将参数fildes 的文件描述词, 转换为对应的文件指针</p></li><li><p>头文件：<code>#include &lt;stdio.h&gt;</code></p></li><li><p>原型：<code>FILE *fdopen(int fd, const char *mode)</code></p><ul><li>mode:参考fopen(必须和原先文件描述词读写模式相同)</li></ul></li><li><p>返回值：转换成功时返回指向该流的文件指针. 失败则返回NULL, 并把错误代码存在errno 中</p></li><li><p>示例：</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE * fp = fdopen(<span class="number">0</span>, <span class="string">"w+"</span>);</span><br><span class="line">    <span class="keyword">if</span>(fp == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        perror(<span class="string">"fdopen"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">fprintf</span>(fp, <span class="string">"%s\n"</span>, <span class="string">"hello!"</span>);</span><br><span class="line">    fclose(fp);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="popen函数"><a href="#popen函数" class="headerlink" title="- popen函数"></a>- popen函数</h4><ul><li><p>说明：popen()会使用pipe()建立管道然后调用fork()产生子进程，然后从子进程中调用/bin/sh -c 来执行参数command 的指令，通过管道将结果传送至父进程</p></li><li><p>头文件：<code>#include &lt;stdio.h&gt;</code></p></li><li><p>原型：<code>FILE *popen(const char *command, const char *type)</code></p><ul><li>type:”r”代表读取，”w”代表写入</li></ul></li><li><p>返回值：若成功则返回文件指针, 否则返回NULL, 错误原因存于errno 中</p></li><li><p>示例：</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE *fp;</span><br><span class="line">    <span class="keyword">char</span> buffer[<span class="number">80</span>];</span><br><span class="line">    fp = popen(<span class="string">"cat /etc/passwd"</span>, <span class="string">"r"</span>);</span><br><span class="line">    fgets(buffer, <span class="keyword">sizeof</span>(buffer), fp);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, buffer);</span><br><span class="line">    pclose(fp);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>从内核文件系统看文件读写过程</title>
      <link href="/2017/10/25/%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E8%BF%87%E7%A8%8B/"/>
      <url>/2017/10/25/%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h4 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h4><ul><li><p>操作系统的主要功能是为管理硬件资源和为应用程序开发人员提供良好的环境，但是计算机系统的各种硬件资源是有限的，因此为了保证每一个进程都能安全的执行。处理器设有两种模式：“用户模式”与“内核模式”。一些容易发生安全问题的操作都被限制在只有内核模式下才可以执行，例如I/O操作，修改基址寄存器内容等。而连接用户模式和内核模式的接口称之为系统调用。</p></li><li><p>应用程序代码运行在用户模式下，当应用程序需要实现内核模式下的指令时，先向操作系统发送调用请求。操作系统收到请求后，执行系统调用接口，使处理器进入内核模式。当处理器处理完系统调用操作后，操作系统会让处理器返回用户模式，继续执行用户代码。</p>  <a id="more"></a></li><li><p>进程的虚拟地址空间可分为两部分，内核空间和用户空间。内核空间中存放的是内核代码和数据，而进程的用户空间中存放的是用户程序的代码和数据。不管是内核空间还是用户空间，它们都处于虚拟空间中，都是对物理地址的映射。</p></li><li><p>应用程序中实现对文件的操作过程就是典型的系统调用过程。</p></li></ul><h4 id="虚拟文件系统"><a href="#虚拟文件系统" class="headerlink" title="虚拟文件系统"></a>虚拟文件系统</h4><ul><li><p>一个操作系统可以支持多种底层不同的文件系统（比如NTFS, FAT, ext3, ext4），为了给内核和用户进程提供统一的文件系统视图，Linux在用户进程和底层文件系统之间加入了一个抽象层，即虚拟文件系统(Virtual File System, VFS)，进程所有的文件操作都通过VFS，由VFS来适配各种底层不同的文件系统，完成实际的文件操作。</p></li><li><p>通俗的说，VFS就是定义了一个通用文件系统的接口层和适配层，一方面为用户进程提供了一组统一的访问文件，目录和其他对象的统一方法，另一方面又要和不同的底层文件系统进行适配。如图所示：</p><p>  <img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/VFS%E6%BC%94%E7%A4%BA.png" alt></p></li><li><p>虚拟文件系统主要模块</p><ul><li><p>超级块（super_block），用于保存一个文件系统的所有元数据，相当于这个文件系统的信息库，为其他的模块提供信息。因此一个超级块可代表一个文件系统。文件系统的任意元数据修改都要修改超级块。超级块对象是常驻内存并被缓存的。</p></li><li><p>目录项模块，管理路径的目录项。比如一个路径 /home/foo/hello.txt，那么目录项有home, foo, hello.txt。目录项的块，存储的是这个目录下的所有的文件的inode号和文件名等信息。其内部是树形结构，操作系统检索一个文件，都是从根目录开始，按层次解析路径中的所有目录，直到定位到文件。</p></li><li><p>inode模块，管理一个具体的文件，是文件的唯一标识，一个文件对应一个inode。通过inode可以方便的找到文件在磁盘扇区的位置。同时inode模块可链接到address_space模块，方便查找自身文件数据是否已经缓存。</p></li><li><p>打开文件列表模块，包含所有内核已经打开的文件。已经打开的文件对象由open系统调用在内核中创建，也叫文件句柄。打开文件列表模块中包含一个列表，每个列表表项是一个结构体struct file，结构体中的信息用来表示打开的一个文件的各种状态参数。</p></li><li><p>file_operations模块。这个模块中维护一个数据结构，是一系列函数指针的集合，其中包含所有可以使用的系统调用函数，例如open、read、write、mmap等。每个打开文件（打开文件列表模块的一个表项）都可以连接到file_operations模块，从而对任何已打开的文件，通过系统调用函数，实现各种操作。</p></li><li><p>address_space模块，它表示一个文件在页缓存中已经缓存了的物理页。它是页缓存和外部设备中文件系统的桥梁。如果将文件系统可以理解成数据源，那么address_space可以说关联了内存系统和文件系统。我们会在文章后面继续讨论。</p></li><li><p>模块间的相互作用和逻辑关系如下图所示：<br><img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/VFS%E6%A8%A1%E5%9D%97%E9%97%B4%E5%85%B3%E7%B3%BB.png" alt></p></li><li><p>由图可以看出：</p><ul><li><p>每个模块都维护了一个X_op指针指向它所对应的操作对象X_operations。</p></li><li><p>超级块维护了一个s_files指针指向了“已打开文件列表模块”，即内核所有的打开文件的链表，这个链表信息是所有进程共享的。</p></li><li><p>目录操作模块和inode模块都维护了一个X_sb指针指向超级块，从而可以获得整个文件系统的元数据信息。</p></li><li><p>目录项对象和inode对象各自维护了指向对方的指针，可以找到对方的数据。</p></li><li><p>已打开文件列表上每一个file结构体实例维护了一个f_dentry指针，指向了它对应的目录项，从而可以根据目录项找到它对应的inode信息。</p></li><li><p>已打开文件列表上每一个file结构体实例维护了一个f_op指针，指向可以对这个文件进行操作的所有函数集合file_operations。</p></li><li><p>inode中不仅有和其他模块关联的指针，重要的是它可以指向address_space模块，从而获得自身文件在内存中的缓存信息。</p></li><li><p>address_space内部维护了一个树结构来指向所有的物理页结构page，同时维护了一个host指针指向inode来获得文件的元数据。</p></li></ul></li></ul></li><li><p>进程和虚拟文件系统交互</p><ul><li><p>内核使用task_struct来表示单个进程的描述符，其中包含维护一个进程的所有信息。task_struct结构体中维护了一个 files的指针（和“已打开文件列表”上的表项是不同的指针）来指向结构体files_struct，files_struct中包含文件描述符表和打开的文件对象信息。</p></li><li><p>file_struct中的文件描述符表实际是一个file类型的指针列表（和“已打开文件列表”上的表项是相同的指针），可以支持动态扩展，每一个指针指向虚拟文件系统中文件列表模块的某一个已打开的文件。</p></li><li><p>file结构一方面可从f_dentry链接到目录项模块以及inode模块，获取所有和文件相关的信息，另一方面链接file_operations子模块，其中包含所有可以使用的系统调用函数，从而最终完成对文件的操作。这样，从进程到进程的文件描述符表，再关联到已打开文件列表上对应的文件结构，从而调用其可执行的系统调用函数，实现对文件的各种操作。</p></li><li><p>进程 vs 文件列表 vs Inode</p><ul><li><p>多个进程可以同时指向一个打开文件对象（文件列表表项），例如父进程和子进程间共享文件对象；</p></li><li><p>一个进程可以多次打开一个文件，生成不同的文件描述符，每个文件描述符指向不同的文件列表表项。但是由于是同一个文件，inode唯一，所以这些文件列表表项都指向同一个inode。通过这样的方法实现文件共享（共享同一个磁盘文件）；</p></li></ul></li></ul></li></ul><h4 id="I-O-缓冲区"><a href="#I-O-缓冲区" class="headerlink" title="I/O 缓冲区"></a>I/O 缓冲区</h4><ul><li><p>概念</p><ul><li><p>如高速缓存（cache）产生的原理类似，在I/O过程中，读取磁盘的速度相对内存读取速度要慢的多。因此为了能够加快处理数据的速度，需要将读取过的数据缓存在内存里。而这些缓存在内存里的数据就是高速缓冲区（buffer cache），下面简称为“buffer”。</p></li><li><p>具体来说，buffer（缓冲区）是一个用于存储速度不同步的设备或优先级不同的设备之间传输数据的区域。一方面，通过缓冲区，可以使进程之间的相互等待变少，从而使从速度慢的设备读入数据时，速度快的设备的操作进程不发生间断。另一方面，可以保护硬盘或减少网络传输的次数。</p></li></ul></li><li><p>Buffer和Cache</p><ul><li>buffer和cache是两个不同的概念：cache是高速缓存，用于CPU和内存之间的缓冲；buffer是I/O缓存，用于内存和硬盘的缓冲；简单的说，cache是加速“读”，而buffer是缓冲“写”，前者解决读的问题，保存从磁盘上读出的数据，后者是解决写的问题，保存即将要写入到磁盘上的数据。</li></ul></li><li><p>Buffer Cache和 Page Cache</p><ul><li><p>buffer cache和page cache都是为了处理设备和内存交互时高速访问的问题。buffer cache可称为块缓冲器，page cache可称为页缓冲器。在linux不支持虚拟内存机制之前，还没有页的概念，因此缓冲区以块为单位对设备进行。在linux采用虚拟内存的机制来管理内存后，页是虚拟内存管理的最小单位，开始采用页缓冲的机制来缓冲内存。Linux-6之后内核将这两个缓存整合，页和块可以相互映射，同时，页缓存page cache面向的是虚拟内存，块I/O缓存Buffer cache是面向块设备。需要强调的是，页缓存和块缓存对进程来说就是一个存储系统，进程不需要关注底层的设备的读写。</p></li><li><p>buffer cache和page cache两者最大的区别是缓存的粒度。buffer cache面向的是文件系统的块。而内核的内存管理组件采用了比文件系统的块更高级别的抽象：页page，其处理的性能更高。因此和内存管理交互的缓存组件，都使用页缓存。</p></li></ul></li></ul><h4 id="Page-Cache"><a href="#Page-Cache" class="headerlink" title="Page Cache"></a>Page Cache</h4><ul><li><p>页缓存是面向文件，面向内存的。通俗来说，它位于内存和文件之间缓冲区，文件IO操作实际上只和page cache交互，不直接和内存交互。page cache可以用在所有以文件为单元的场景下，比如网络文件系统等等。page cache通过一系列的数据结构，比如inode, address_space, struct page，实现将一个文件映射到页的级别：</p><ul><li><p>struct page结构标志一个物理内存页，通过page + offset就可以将此页帧定位到一个文件中的具体位置。同时struct page还有以下重要参数：</p><ul><li><p>标志位flags来记录该页是否是脏页，是否正在被写回等等；</p></li><li><p>mapping指向了地址空间address_space，表示这个页是一个页缓存中页，和一个文件的地址空间对应；</p></li><li><p>index记录这个页在文件中的页偏移量；</p></li></ul></li><li><p>文件系统的inode实际维护了这个文件所有的块block的块号，通过对文件偏移量offset取模可以很快定位到这个偏移量所在的文件系统的块号，磁盘的扇区号。同样，通过对文件偏移量offset进行取模可以计算出偏移量所在的页的偏移量。</p></li><li><p>page cache缓存组件抽象了地址空间address_space这个概念来作为文件系统和页缓存的中间桥梁。地址空间address_space通过指针可以方便的获取文件inode和struct page的信息，所以可以很方便地定位到一个文件的offset在各个组件中的位置，即通过：文件字节偏移量 –&gt; 页偏移量 –&gt; 文件系统块号 block  –&gt;  磁盘扇区号</p></li><li><p>页缓存实际上就是采用了一个基数树结构将一个文件的内容组织起来存放在物理内存struct page中。一个文件inode对应一个地址空间address_space。而一个address_space对应一个页缓存基数树。它们之间的关系如下：<br><img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/%E9%A1%B5%E7%BC%93%E5%AD%9-png" alt></p></li></ul></li></ul><h4 id="Address-Space"><a href="#Address-Space" class="headerlink" title="Address Space"></a>Address Space</h4><ul><li><p>下面我们总结已经讨论过的address_space所有功能。address_space是Linux内核中的一个关键抽象，它被作为文件系统和页缓存的中间适配器，用来指示一个文件在页缓存中已经缓存了的物理页。因此，它是页缓存和外部设备中文件系统的桥梁。如果将文件系统可以理解成数据源，那么address_space可以说关联了内存系统和文件系统。</p></li><li><p>由图中可以看到，地址空间address_space链接到页缓存基数树和inode，因此address_space通过指针可以方便的获取文件inode和page的信息。那么页缓存是如何通过address_space实现缓冲区功能的？我们再来看完整的文件读写流程。</p></li></ul><h4 id="文件读写基本流程"><a href="#文件读写基本流程" class="headerlink" title="- 文件读写基本流程"></a>- 文件读写基本流程</h4><ul><li><p>读文件</p><ul><li><p>进程调用库函数向内核发起读文件请求；</p></li><li><p>内核通过检查进程的文件描述符定位到虚拟文件系统的已打开文件列表表项；</p></li><li><p>调用该文件可用的系统调用函数read()</p></li><li><p>read()函数通过文件表项链接到目录项模块，根据传入的文件路径，在目录项模块中检索，找到该文件的inode；</p></li><li><p>在inode中，通过文件内容偏移量计算出要读取的页；</p></li><li><p>通过inode找到文件对应的address_space；</p></li><li><p>在address_space中访问该文件的页缓存树，查找对应的页缓存结点：</p><ul><li><p>如果页缓存命中，那么直接返回文件内容；</p></li><li><p>如果页缓存缺失，那么产生一个页缺失异常，创建一个页缓存页，同时通过inode找到文件该页的磁盘地址，读取相应的页填充该缓存页；重新进行第6步查找页缓存；</p></li></ul></li><li><p>文件内容读取成功。</p></li></ul></li><li><p>写文件</p><p>  前6步和读文件一致，在address_space中查询对应页的页缓存是否存在：</p><ul><li><p>如果页缓存命中，直接把文件内容修改更新在页缓存的页中。写文件就结束了。这时候文件修改位于页缓存，并没有写回到磁盘文件中去。</p></li><li><p>如果页缓存缺失，那么产生一个页缺失异常，创建一个页缓存页，同时通过inode找到文件该页的磁盘地址，读取相应的页填充该缓存页。此时缓存页命中，进行第6步。</p></li><li><p>一个页缓存中的页如果被修改，那么会被标记成脏页。脏页需要写回到磁盘中的文件块。有两种方式可以把脏页写回磁盘：</p></li><li><p>手动调用sync()或者fsync()系统调用把脏页写回</p></li><li><p>pdflush进程会定时把脏页写回到磁盘</p></li></ul></li><li><p>同时注意，脏页不能被置换出内存，如果脏页正在被写回，那么会被设置写回标记，这时候该页就被上锁，其他写请求被阻塞直到锁释放。</p></li></ul><h4 id="出处"><a href="#出处" class="headerlink" title="出处"></a>出处</h4><ul><li><p>说明：本文读写操作从底层说起，在后面学习零拷贝等技术时，能有更好的理解！</p></li><li><p>转载自：<a href="http://www.cnblogs.com/huxiao-tee/p/4657851.html" target="_blank" rel="noopener">http://www.cnblogs.com/huxiao-tee/p/4657851.html</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> OS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Others </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux 中的零拷贝技术</title>
      <link href="/2017/10/25/Linux%E4%B8%AD%E7%9A%84%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%8A%80%E6%9C%AF/"/>
      <url>/2017/10/25/Linux%E4%B8%AD%E7%9A%84%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<h4 id="Linux-中的零拷贝函数"><a href="#Linux-中的零拷贝函数" class="headerlink" title="Linux 中的零拷贝函数"></a>Linux 中的零拷贝函数</h4><ul><li><p><a href="https://www.ibm.com/developerworks/cn/linux/l-cn-directio/index.html" target="_blank" rel="noopener">直接IO</a></p><p>  如果应用程序可以直接访问网络接口存储，那么在应用程序访问数据之前存储总线就不需要被遍历，数据传输所引起的开销将会是最小的。应用程序或者运行在用户模式下的库函数可以直接访问硬件设备的存储，操作系统内核除了进行必要的虚拟存储配置工作之外，不参与数据传输过程中的其它任何事情。直接 I/O 使得数据可以直接在应用程序和外围设备之间进行传输，完全不需要操作系统内核页缓存的支持</p><p>  <img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/%E7%9B%B4%E6%8E%A5IO.jpg" alt></p></li></ul><a id="more"></a><ul><li><p>针对数据传输不需要经过应用程序地址空间的零拷贝技术</p><ul><li><p>利用 mmap()</p><p>在 Linux 中，减少拷贝次数的一种方法是调用 mmap() 来代替调用 read，比如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tmp_buf = mmap(file, len);</span><br><span class="line">write(socket, tmp_buf, len);</span><br></pre></td></tr></table></figure></li><li><p>首先，应用程序调用了 mmap() 之后，数据会先通过 DMA 拷贝到操作系统内核的缓冲区中去。接着，应用程序跟操作系统共享这个缓冲区，这样，操作系统内核和应用程序存储空间就不需要再进行任何的数据拷贝操作。应用程序调用了 write() 之后，操作系统内核将数据从原来的内核缓冲区中拷贝到与 socket 相关的内核缓冲区中。接下来，数据从内核 socket 缓冲区拷贝到协议引擎中去，这是第三次数据拷贝操作。</p><p><img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/mmap.jpg" alt></p></li><li><p>通过使用 mmap() 来代替 read(), 已经可以减半操作系统需要进行数据拷贝的次数。当大量数据需要传输的时候，这样做就会有一个比较好的效率。但是，这种改进也是需要代价的，使用 mmap() 其实是存在潜在的问题的。当对文件进行了内存映射，然后调用 write() 系统调用，如果此时其他的进程截断了这个文件，那么 write() 系统调用将会被总线错误信号 SIGBUS 中断，因为此时正在执行的是一个错误的存储访问。这个信号将会导致进程被杀死，解决这个问题可以通过以下这两种方法：</p><ul><li>为 SIGBUS 安装一个新的信号处理器，这样，write() 系统调用在它被中断之前就返回已经写入的字节数目，errno 会被设置成 success。但是这种方法也有其缺点，它不能反映出产生这个问题的根源所在，因为 BIGBUS 信号只是显示某进程发生了一些很严重的错误。</li><li><p>第二种方法是通过文件租借锁来解决这个问题的，这种方法相对来说更好一些。我们可以通过内核对文件加读或者写的租借锁，当另外一个进程尝试对用户正在进行传输的文件进行截断的时候，内核会发送给用户一个实时信号：RT_SIGNAL_LEASE 信号，这个信号会告诉用户内核破坏了用户加在那个文件上的写或者读租借锁，那么 write() 系统调用则会被中断，并且进程会被 SIGBUS 信号杀死，返回值则是中断前写的字节数，errno 也会被设置为 success。文件租借锁需要在对文件进行内存映射之前设置。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(fcntl(diskfd, F_SETSIG, RT_SIGNAL_LEASE) == <span class="number">-1</span>) &#123;</span><br><span class="line">    perror(<span class="string">"kernel lease set signal"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* l_type can be F_RDLCK F_WRLCK  加锁*/</span></span><br><span class="line"><span class="comment">/* l_type can be  F_UNLCK 解锁*/</span></span><br><span class="line"><span class="keyword">if</span>(fcntl(diskfd, F_SETLEASE, l_type))&#123;</span><br><span class="line">    perror(<span class="string">"kernel lease set type"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>使用 mmap 是 POSIX 兼容的，但是使用 mmap 并不一定能获得理想的数据传输性能。数据传输的过程中仍然需要一次 CPU 拷贝操作，而且映射操作也是一个开销很大的虚拟存储操作，这种操作需要通过更改页表以及冲刷 TLB <code>(TLB(Translation Lookaside Buffer)转换检测缓冲区是一个内存管理单元,用于改进虚拟地址到物理地址转换速度的缓存)</code> （使得 TLB 的内容无效）来维持存储的一致性。但是，因为映射通常适用于较大范围，所以对于相同长度的数据来说，映射所带来的开销远远低于 CPU 拷贝所带来的开销。</p></li><li><p>sendfile()</p><p>为了简化用户接口，同时还要继续保留 mmap()/write() 技术的优点：减少 CPU 的拷贝次数，Linux 在版本 -1 中引入了 sendfile() 这个系统调用。</p><ul><li><p>sendfile() 不仅减少了数据拷贝操作，它也减少了上下文切换。首先：sendfile() 系统调用利用 DMA 引擎将文件中的数据拷贝到操作系统内核缓冲区中，然后数据被拷贝到与 socket 相关的内核缓冲区中去。接下来，DMA 引擎将数据从内核 socket 缓冲区中拷贝到协议引擎中去。如果在用户调用 sendfile () 系统调用进行数据传输的过程中有其他进程截断了该文件，那么 sendfile () 系统调用会简单地返回给用户应用程序中断前所传输的字节数，errno 会被设置为 success。如果在调用 sendfile() 之前操作系统对文件加上了租借锁，那么 sendfile() 的操作和返回状态将会和 mmap()/write () 一样。</p><p><img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/sendfile.jpg" alt></p></li><li><p>sendfile() 系统调用不需要将数据拷贝或者映射到应用程序地址空间中去，所以 sendfile() 只是适用于应用程序地址空间不需要对所访问数据进行处理的情况。相对于 mmap() 方法来说，因为 sendfile 传输的数据没有越过用户应用程序 / 操作系统内核的边界线，所以 sendfile () 也极大地减少了存储管理的开销。但是，sendfile () 也有很多局限性，如下所列：</p></li><li>sendfile() 局限于基于文件服务的网络应用程序，比如 web 服务器。据说，在 Linux 内核中实现 sendfile() 只是为了在其他平台上使用 sendfile() 的 Apache 程序。</li><li>由于网络传输具有异步性，很难在 sendfile () 系统调用的接收端进行配对的实现方式，所以数据传输的接收端一般没有用到这种技术。</li><li>基于性能的考虑来说，sendfile () 仍然需要有一次从文件到 socket 缓冲区的 CPU 拷贝操作，这就导致页缓存有可能会被传输的数据所污染。</li><li>在我们调用sendfile时，如果有其它进程截断了文件会发生什么呢？假设我们没有设置任何信号处理程序，sendfile调用仅仅返回它在被中断之前已经传输的字节数，errno会被置为success。如果我们在调用sendfile之前给文件加了锁，sendfile的行为仍然和之前相同，我们还会收到RT_SIGNAL_LEASE的信号</li></ul></li><li><p>带有 DMA 收集拷贝功能的 sendfile()</p><ul><li>上小节介绍的 sendfile() 技术在进行数据传输仍然还需要一次多余的数据拷贝操作，通过引入一点硬件上的帮助，这仅有的一次数据拷贝操作也可以避免。为了避免操作系统内核造成的数据副本，需要用到一个支持收集操作的网络接口，这也就是说，待传输的数据可以分散在存储的不同位置上，而不需要在连续存储中存放。这样一来，从文件中读出的数据就根本不需要被拷贝到 socket 缓冲区中去，而只是需要将缓冲区描述符传到网络协议栈中去，之后其在缓冲区中建立起数据包的相关结构，然后通过 DMA 收集拷贝功能将所有的数据结合成一个网络数据包。网卡的 DMA 引擎会在一次操作中从多个位置读取包头和数据。</li><li><p>Linux 2.4 版本中的 socket 缓冲区就可以满足这种条件，这也就是用于 Linux 中的众所周知的零拷贝技术，这种方法不但减少了因为多次上下文切换所带来开销，同时也减少了处理器造成的数据副本的个数。对于用户应用程序来说，代码没有任何改变。首先，sendfile() 系统调用利用 DMA 引擎将文件内容拷贝到内核缓冲区去；然后，将带有文件位置和长度信息的缓冲区描述符添加到 socket 缓冲区中去，此过程不需要将数据从操作系统内核缓冲区拷贝到 socket 缓冲区中，DMA 引擎会将数据直接从内核缓冲区拷贝到协议引擎中去，这样就避免了最后一次数据拷贝。</p><p><img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/DMA_sendfile.jpg" alt></p></li><li><p>通过这种方法，CPU 在数据传输的过程中不但避免了数据拷贝操作，理论上，CPU 也永远不会跟传输的数据有任何关联，这对于 CPU 的性能来说起到了积极的作用：首先，高速缓冲存储器没有受到污染；其次，高速缓冲存储器的一致性不需要维护，高速缓冲存储器在 DMA 进行数据传输前或者传输后不需要被刷新。然而实际上，后者实现起来非常困难。源缓冲区有可能是页缓存的一部分，这也就是说一般的读操作可以访问它，而且该访问也可以是通过传统方式进行的。只要存储区域可以被 CPU 访问到，那么高速缓冲存储器的一致性就需要通过 DMA 传输之前冲刷新高速缓冲存储器来维护。而且，这种数据收集拷贝功能的实现是需要硬件以及设备驱动程序支持的。</p></li></ul></li><li><p>splice()</p><ul><li>splice() 是　 Linux 　中与 mmap() 和　 sendfile() 类似的一种方法。它也可以用于用户应用程序地址空间和操作系统地址空间之间的数据传输。splice() 适用于可以确定数据传输路径的用户应用程序，它不需要利用用户地址空间的缓冲区进行显式的数据传输操作。那么，当数据只是从一个地方传送到另一个地方，过程中所传输的数据不需要经过用户应用程序的处理的时候，spice() 就成为了一种比较好的选择。splice() 可以在操作系统地址空间中整块地移动数据，从而减少大多数数据拷贝操作。而且，splice() 进行数据传输可以通过异步的方式来进行，用户应用程序可以先从系统调用返回，而操作系统内核进程会控制数据传输过程继续进行下去。splice() 可以被看成是类似于基于流的管道的实现，管道可以使得两个文件描述符相互连接，splice 的调用者则可以控制两个设备（或者协议栈）在操作系统内核中的相互连接。</li><li>splice() 系统调用和 sendfile() 非常类似，用户应用程序必须拥有两个已经打开的文件描述符，一个用于表示输入设备，一个用于表示输出设备。与 sendfile() 不同的是，splice() 允许任意两个文件之间互相连接，而并不只是文件到 socket 进行数据传输。对于从一个文件描述符发送数据到 socket 这种特例来说，一直都是使用 sendfile() 这个系统调用，而 splice 一直以来就只是一种机制，它并不仅限于 sendfile() 的功能。也就是说，sendfile() 只是 splice() 的一个子集，在 Linux -6.23 中，sendfile() 这种机制的实现已经没有了，但是这个 API 以及相应的功能还存在，只不过 API 以及相应的功能是利用了 splice() 这种机制来实现的。</li><li>在数据传输的过程中，splice() 机制交替地发送相关的文件描述符的读写操作，并且可以将读缓冲区重新用于写操作。它也利用了一种简单的流控制，通过预先定义的水印（ watermark ）来阻塞写请求。有实验表明，利用这种方法将数据从一个磁盘传输到另一个磁盘会增加 30% 到 70% 的吞吐量，数据传输的过程中， CPU 的负载也会减少一半。</li><li><p>Linux 2.6.17 内核引入了 splice() 系统调用，但是，这个概念在此之前 ] 其实已经存在了很长一段时间了。1988 年，Larry McVoy 提出了这个概念，它被看成是一种改进服务器端系统的 I/O 性能的一种技术，尽管在之后的若干年中经常被提及，但是 splice 系统调用从来没有在主流的 Linux 操作系统内核中实现过，一直到 Linux 2.6.17 版本的出现。splice 系统调用需要用到四个参数，其中两个是文件描述符，一个表示文件长度，还有一个用于控制如何进行数据拷贝。splice 系统调用可以同步实现，也可以使用异步方式来实现。在使用异步方式的时候，用户应用程序会通过信号 SIGIO 来获知数据传输已经终止。splice() 系统调用的接口如下所示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">splice</span><span class="params">(<span class="keyword">int</span> fdin, <span class="keyword">int</span> fdout, <span class="keyword">size_t</span> len, <span class="keyword">unsigned</span> <span class="keyword">int</span> flags)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>调用 splice() 系统调用会导致操作系统内核从数据源 fdin 移动最多 len 个字节的数据到 fdout 中去，这个数据的移动过程只是经过操作系统内核空间，需要最少的拷贝次数。使用 splice() 系统调用需要这两个文件描述符中的一个必须是用来表示一个管道设备的。不难看出，这种设计具有局限性，Linux 的后续版本针对这一问题将会有所改进。参数 flags 用于表示拷贝操作的执行方法，当前的 flags 有如下这些取值：</p><ul><li>SPLICE_F_NONBLOCK：splice 操作不会被阻塞。然而，如果文件描述符没有被设置为不可被阻塞方式的 I/O ，那么调用 splice 有可能仍然被阻塞。</li><li>SPLICE_F_MORE：告知操作系统内核下一个 splice 系统调用将会有更多的数据传来。</li><li>SPLICE_F_MOVE：如果输出是文件，这个值则会使得操作系统内核尝试从输入管道缓冲区直接将数据读入到输出地址空间，这个数据传输过程没有任何数据拷贝操作发生。</li><li><p>Splice() 系统调用利用了 Linux 提出的管道缓冲区（ pipe buffer ）机制，这就是为什么这个系统调用的两个文件描述符参数中至少有一个必须要指代管道设备的原因。为了支持 splice 这种机制，Linux 在用于设备和文件系统的 file_operations 结构中增加了下边这两个定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ssize_t</span> (*splice_write)(struct inode *pipe, strucuct file *out, <span class="keyword">size_t</span> len, <span class="keyword">unsigned</span> <span class="keyword">int</span> flags);</span><br><span class="line"><span class="keyword">ssize_t</span> (*splice_read)(struct inode *in, strucuct file *pipe, <span class="keyword">size_t</span> len, <span class="keyword">unsigned</span> <span class="keyword">int</span> flags);</span><br></pre></td></tr></table></figure></li><li><p>这两个新的操作可以根据 flags 的设定在 pipe 和 in 或者 out 之间移动 len 个字节。Linux 文件系统已经实现了具有上述功能并且可以使用的操作，而且还实现了一个 generic_splice_sendpage() 函数用于和 socket 之间的接合。</p></li></ul></li></ul></li></ul></li></ul><h4 id="对应用程序地址空间和内核之间的数据传输进行优化的零拷贝技术"><a href="#对应用程序地址空间和内核之间的数据传输进行优化的零拷贝技术" class="headerlink" title="对应用程序地址空间和内核之间的数据传输进行优化的零拷贝技术"></a>对应用程序地址空间和内核之间的数据传输进行优化的零拷贝技术</h4><ul><li><p>前面提到的几种零拷贝技术都是通过尽量避免用户应用程序和操作系统内核缓冲区之间的数据拷贝来实现的，使用上面那些零拷贝技术的应用程序通常都要局限于某些特殊的情况：要么不能在操作系统内核中处理数据，要么不能在用户地址空间中处理数据。而这一小节提出的零拷贝技术保留了传统在用户应用程序地址空间和操作系统内核地址空间之间传递数据的技术，但却在传输上进行优化。我们知道，数据在系统软件和硬件之间的传递可以通过 DMA 传输来提高效率，但是对于用户应用程序和操作系统之间进行数据传输这种情况来说，并没有类似的工具可以使用。本节介绍的技术就是针对这种情况提出来的。</p></li><li><p>利用写时复制(copy on write)</p><p>  在某些情况下，Linux 操作系统内核中的页缓存可能会被多个应用程序所共享，操作系统有可能会将用户应用程序地址空间缓冲区中的页面映射到操作系统内核地址空间中去。如果某个应用程序想要对这共享的数据调用　 write() 系统调用，那么它就可能破坏内核缓冲区中的共享数据，传统的 write() 系统调用并没有提供任何显示的加锁操作，Linux 中引入了写时复制这样一种技术用来保护数据。</p><ul><li><p>什么是写时复制</p><ul><li><p>写时复制是计算机编程中的一种优化策略，它的基本思想是这样的：如果有多个应用程序需要同时访问同一块数据，那么可以为这些应用程序分配指向这块数据的指针，在每一个应用程序看来，它们都拥有这块数据的一份数据拷贝，当其中一个应用程序需要对自己的这份数据拷贝进行修改的时候，就需要将数据真正地拷贝到该应用程序的地址空间中去，也就是说，该应用程序拥有了一份真正的私有数据拷贝，这样做是为了避免该应用程序对这块数据做的更改被其他应用程序看到。这个过程对于应用程序来说是透明的，如果应用程序永远不会对所访问的这块数据进行任何更改，那么就永远不需要将数据拷贝到应用程序自己的地址空间中去。这也是写时复制的最主要的优点。</p></li><li><p>写时复制的实现需要 MMU 的支持，MMU 需要知晓进程地址空间中哪些特殊的页面是只读的，当需要往这些页面中写数据的时候，MMU 就会发出一个异常给操作系统内核，操作系统内核就会分配新的物理存储空间，即将被写入数据的页面需要与新的物理存储位置相对应。</p></li><li><p>写时复制的最大好处就是可以节约内存。不过对于操作系统内核来说，写时复制增加了其处理过程的复杂性。</p></li></ul></li><li><p>数据传输的实现及其局限性</p><ul><li>数据发送端<br>  对于数据传输的发送端来说，实现相对来说是比较简单的，对与应用程序缓冲区相关的物理页面进行加锁，并将这些页面映射到操作系统内核的地址空间，并标识为“ write only ”。当系统调用返回的时候，用户应用程序和网络堆栈就都可以读取该缓冲区中的数据。在操作系统已经传送完所有的数据之后，应用程序就可以对这些数据进行写操作。如果应用程序尝试在数据传输完成之前对数据进行写操作，那么就会产生异常，这个时候操作系统就会将数据拷贝到应用程序自己的缓冲区中去，并且重置应用程序端的映射。数据传输完成之后，对加锁的页面进行解锁操作，并重置 COW(copy on write) 标识。</li><li>数据接收端<br>  对于数据接收端来说，该技术的实现则需要处理复杂得多的情况。如果 read() 系统调用是在数据包到达之前发出的，并且应用程序是被阻塞的，那么 read() 系统调用就会告知操作系统接收到的数据包中的数据应该存放到什么地方去。在这种情况下，根本没有必要进行页面重映射，网络接口卡可以提供足够的支持让数据直接存入用户应用程序的缓冲区中去。如果数据接收是异步的，在 read() 系统调用发出之前，操作系统不知道该把数据写到哪里，因为它不知道用户应用程序缓冲区的位置，所以操作系统内核必须要先把数据存放到自己的缓冲区中去。</li><li>局限性<ul><li>写时复制技术有可能会导致操作系统的处理开销很大．所有相关的缓冲区都必须要进行页对齐处理，并且使用的 MMU <code>(MMU是Memory Management Unit的缩写，中文名是内存管理单元，它是中央处理器（CPU）中用来管理虚拟存储器、物理存储器的控制线路，同时也负责虚拟地址映射为物理地址，以及提供硬件机制的内存访问授权，多用户多进程操作系统)</code> 页面一定要是整数个的。对于发送端来说，这不会造成什么问题。但是对于接收端来说，它需要有能力处理更加复杂的情况。</li><li>首先，数据包的尺寸大小要合适，大小需要恰到好处能够覆盖一整页的数据，这就限制了那些 MTU 大小大于系统内存页的网络，比如 FDDI 和 ATM。其次，为了在没有任何中断的情况下将页面重映射到数据包的流，数据包中的数据部分必须占用整数个页面。对于异步接收数据的情况来说，为了将数据高效地移动到用户地址空间中去，可以使用这样一种方法：利用网络接口卡的支持，传来的数据包可以被分割成包头和数据两部分，数据被存放在一个单独的缓冲区内，虚拟存储系统然后就会将数据映射到用户地址空间缓冲区去。</li><li>使用这种方法需要满足两个先决条件，也就是上面提到过的：一是应用程序缓冲区必须是页对齐的，并且在虚拟存储上是连续的；二是传来的数据有一页大小的时候才可以对数据包进行分割。事实上，这两个先决条件是很难满足的。如果应用程序缓冲区不是页对齐的，或者数据包的大小超过一个页，那么数据就需要被拷贝。对于数据发送端来说，就算数据在传输的过程中对于应用程序来说是写保护的，应用程序仍然需要避免使用这些忙缓冲区，这是因为写时拷贝操作所带来的开销是很大的。如果没有端到端这一级别的通知，那么应用程序很难会知道某缓冲区是否已经被释放还是仍然在被占用。</li></ul></li></ul></li><li><p>这种零拷贝技术比较适用于那种写时复制事件发生比较少的情况，因为写时复制事件所产生的开销要远远高于一次 CPU 拷贝所产生的开销。实际情况中，大多数应用程序通常都会多次重复使用相同的缓冲区，所以，一次使用完数据之后，不要从操作系统地址空间解除页面的映射，这样会提高效率。考虑到同样的页面可能会被再次访问，所以保留页面的映射可以节省管理开销，但是，这种映射保留不会减少由于页表往返移动和 TLB 冲刷所带来的开销，这是因为每次页面由于写时复制而进行加锁或者解锁的时候，页面的只读标志都要被更改。</p></li></ul></li><li><p>缓冲区共享</p><ul><li><p>还有另外一种利用预先映射机制的共享缓冲区的方法也可以在应用程序地址空间和操作系统内核之间快速传输数据。采用缓冲区共享这种思想的架构最先在 Solaris 上实现，该架构使用了“ fbufs ”这个概念。这种方法需要修改 API。应用程序地址空间和操作系统内核地址空间之间的数据传递需要严格按照 fbufs 体系结构来实现，操作系统内核之间的通信也是严格按照 fbufs 体系结构来完成的。每一个应用程序都有一个缓冲区池，这个缓冲区池被同时映射到用户地址空间和内核地址空间，也可以在必要的时候才创建它们。通过完成一次虚拟存储操作来创建缓冲区，fbufs 可以有效地减少由存储一致性维护所引起的大多数性能问题。</p></li><li><p>为什么要扩展 Linux I/O API</p><ul><li>传统的 Linux 输入输出接口，比如读和写系统调用，都是基于拷贝的，也就是说，数据需要在操作系统内核和应用程序定义的缓冲区之间进行拷贝。对于读系统调用来说，用户应用程序呈现给操作系统内核一个预先分配好的缓冲区，内核必须把读进来的数据放到这个缓冲区内。对于写系统调用来说，只要系统调用返回，用户应用程序就可以自由重新利用数据缓冲区。</li><li>为了支持上面这种机制，Linux 需要能够为每一个操作都进行建立和删除虚拟存储映射。这种页面重映射的机制依赖于机器配置、cache 体系结构、TLB 未命中处理所带来的开销以及处理器是单处理器还是多处理器等多种因素。如果能够避免处理 I/O 请求的时候虚拟存储 / TLB 操作所产生的开销，则会极大地提高 I/O 的性能。fbufs 就是这样一种机制。使用 fbufs 体系结构就可以避免虚拟存储操作。由数据显示，fbufs 这种结构在 DECStation™ 5000/200 这个单处理器工作站上会取得比上面提到的页面重映射方法好得多的性能。如果要使用 fbufs 这种体系结构，必须要扩展 Linux API，从而实现一种有效而且全面的零拷贝技术。</li></ul></li><li><p>快速缓冲区（ Fast Buffers ）原理介绍</p><ul><li><p>I/O 数据存放在一些被称作 fbufs 的缓冲区内，每一个这样的缓冲区都包含一个或者多个连续的虚拟存储页。应用程序访问 fbuf 是通过保护域来实现的，有如下这两种方式：</p><ul><li>如果应用程序分配了 fbuf，那么应用程序就有访问该 fbuf 的权限</li><li><p>如果应用程序通过 IPC 接收到了 fbuf，那么应用程序对这个 fbuf 也有访问的权限</p></li><li><p>对于第一种情况来说，这个保护域被称作是 fbuf 的“ originator ”；对于后一种情况来说，这个保护域被称作是 fbuf 的“ receiver ”。</p></li></ul></li><li><p>传统的 Linux I/O 接口支持数据在应用程序地址空间和操作系统内核之间交换，这种交换操作导致所有的数据都需要进行拷贝。如果采用 fbufs 这种方法，需要交换的是包含数据的缓冲区，这样就消除了多余的拷贝操作。应用程序将 fbuf 传递给操作系统内核，这样就能减少传统的 write 系统调用所产生的数据拷贝开销。同样的，应用程序通过 fbuf 来接收数据，这样也可以减少传统 read 系统调用所产生的数据拷贝开销。如下图所示：</p><p><img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/Linux_IO_API.jpg" alt></p></li><li><p>I/O 子系统或者应用程序都可以通过 fbufs 管理器来分配 fbufs。一旦分配了 fbufs，这些 fbufs 就可以从程序传递到 I/O 子系统，或者从 I/O 子系统传递到程序。使用完后，这些 fbufs 会被释放回 fbufs 缓冲区池。</p></li><li><p>fbufs 在实现上有如下这些特性：</p><ul><li>fbuf 需要从 fbufs 缓冲区池里分配。每一个 fbuf 都存在一个所属对象，要么是应用程序，要么是操作系统内核。fbuf 可以在应用程序和操作系统之间进行传递，fbuf 使用完之后需要被释放回特定的 fbufs 缓冲区池，在 fbuf 传递的过程中它们需要携带关于 fbufs 缓冲区池的相关信息。</li><li>每一个 fbufs 缓冲区池都会和一个应用程序相关联，一个应用程序最多只能与一个 fbufs 缓冲区池相关联。应用程序只有资格访问它自己的缓冲区池。</li><li>fbufs 不需要虚拟地址重映射，这是因为对于每个应用程序来说，它们可以重新使用相同的缓冲区集合。这样，虚拟存储转换的信息就可以被缓存起来，虚拟存储子系统方面的开销就可以消除。<br>4,。 I/O 子系统（设备驱动程序，文件系统等）可以分配 fbufs，并将到达的数据直接放到这些 fbuf 里边。这样，缓冲区之间的拷贝操作就可以避免。</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/fbufs.jpg" alt></p><ul><li>前面提到，这种方法需要修改 API，如果要使用 fbufs 体系结构，应用程序和 Linux 操作系统内核驱动程序都需要使用新的 API，如果应用程序要发送数据，那么它就要从缓冲区池里获取一个 fbuf，将数据填充进去，然后通过文件描述符将数据发送出去。接收到的 fbufs 可以被应用程序保留一段时间，之后，应用程序可以使用它继续发送其他的数据，或者还给缓冲区池。<code>但是，在某些情况下，需要对数据包内的数据进行重新组装，那么通过 fbuf 接收到数据的应用程序就需要将数据拷贝到另外一个缓冲区内。</code>再者，应用程序不能对当前正在被内核处理的数据进行修改，基于这一点，fbufs 体系结构引入了强制锁的概念以保证其实现。对于应用程序来说，如果 fbufs 已经被发送给操作系统内核，那么应用程序就不会再处理这些 fbufs。</li></ul></li><li><p>fbufs 存在的一些问题</p><ul><li>管理共享缓冲区池需要应用程序、网络软件、以及设备驱动程序之间的紧密合作。对于数据接收端来说，网络硬件必须要能够将到达的数据包利用 DMA 传输到由接收端分配的正确的存储缓冲区池中去。</li><li>而且，应用程序稍微不注意就会更改之前发到共享存储中的数据的内容，从而导致数据被破坏，但是这种问题在应用程序端是很难调试的。</li><li>同时，共享存储这种模型很难与其他类型的存储对象关联使用，但是应用程序、网络软件以及设备驱动程序之间的紧密合作是需要其他存储管理器的支持的。</li><li>对于共享缓冲区这种技术来说，虽然这种技术看起来前景光明，但是这种技术不但需要对 API 进行更改，而且需要对驱动程序也进行更改，并且这种技术本身也存在一些未解决的问题，这就使得这种技术目前还只是出于试验阶段。在测试系统中，这种技术在性能上有很大的改进，不过这种新的架构的整体安装目前看起来还是不可行的。这种预先分配共享缓冲区的机制有时也因为粒度问题需要将数据拷贝到另外一个缓冲区中去。</li></ul></li></ul></li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li><p>针对 Linux 操作系统平台提出并实现了很多种零拷贝技术，但是并不是所有这些零拷贝技术都被广泛应用于现实中的操作系统中的。比如，fbufs 体系结构，它在很多方面看起来都很吸引人，但是使用它需要更改 API 以及驱动程序，它还存在其他一些实现上的困难，这就使得 fbufs 还只是停留在实验的阶段。动态地址重映射技术只是需要对操作系统做少量修改，虽然不需要修改用户软件，但是当前的虚拟存储体系结构并不能很好地支持频繁的虚拟地址重映射操作。而且为了保证存储的一致性，重映射之后还必须对 TLB 和一级缓存进行刷新。事实上，利用地址重映射实现的零拷贝技术适用的范围是很小的，这是因为虚拟存储操作所带来的开销往往要比 CPU 拷贝所产生的开销还要大。此外，为了完全消除 CPU 访问存储，通常都需要额外的硬件来支持，而这种硬件的支持并不是很普及，同时也是非常昂贵的。</p></li><li><p>本文的目的是帮助读者理清这些出现在 Linux 操作系统中的零拷贝技术都是从何种角度来帮助改善数据传输过程中遇到的性能问题的。关于各种零拷贝技术的具体实现细节，本文没有做详细描述。同时，零拷贝技术一直是在不断地发展和完善当中的，本文并没有涵盖 Linux 上出现的所有零拷贝技术。</p></li></ul><h4 id="出处"><a href="#出处" class="headerlink" title="出处"></a>出处</h4><ul><li><p>阅读完后会明白零拷贝技术的发展及原因，能够梳理自己的知识体系，为自己平常的使用提供基础(在原文上做了补充及修改)</p></li><li><p>转载自：<a href="https://www.ibm.com/developerworks/cn/linux/l-cn-zerocopy2/index.html" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/linux/l-cn-zerocopy2/index.html</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 零拷贝 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux下文件权限判断和目录操作</title>
      <link href="/2017/10/24/%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E5%88%A4%E6%96%AD/"/>
      <url>/2017/10/24/%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E5%88%A4%E6%96%AD/</url>
      
        <content type="html"><![CDATA[<h4 id="access函数"><a href="#access函数" class="headerlink" title="access函数"></a>access函数</h4><ul><li><p>说明：按照实际用户ID和实际组进行访问权限测试</p></li><li><p>头文件：<code>#include &lt;unistd.h&gt;</code></p></li><li><p>原型：<code>int access(const char *pathname, int mode)</code></p>  <a id="more"></a><ul><li>mode取值:<ul><li>F_OK:测试文件是否存在</li><li>R_OK:测试读权限</li><li>W_OK:测试写权限</li><li>X_OK:测试执行权限</li></ul></li></ul></li><li><p>返回值：文件路径为空或者不存在返回（失败）-1，成功返回0</p></li><li><p>示例：</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FILESIZE 20</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> fileName[FILESIZE];</span><br><span class="line">    bzero(fileName, FILESIZE);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"please input fileName:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, &amp;fileName);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(access(fileName, R_OK) == <span class="number">-1</span>)&#123;</span><br><span class="line">        perror(<span class="string">"access error:"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="opendir函数与readdir函数"><a href="#opendir函数与readdir函数" class="headerlink" title="opendir函数与readdir函数"></a>opendir函数与readdir函数</h4><ul><li><p>说明：</p><ul><li>opendir()用来打开参数name 指定的目录, 并返回DIR*形态的目录流, 和open()类似, 接下来对目录的读取和搜索都要使用此返回值</li><li>readdir()返回参数dir 目录流的下个目录进入点</li></ul></li><li><p>头文件：<code>#include &lt;sys/types.h&gt;</code> <code>#include &lt;dirent.h&gt;</code></p></li><li><p>原型：</p><ul><li><code>DIR *opendir（const char *name）</code></li><li><code>struct dirent * readdir(DIR * dir)</code></li><li><p>DIR结构体：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">dirstream</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">void</span> *__fd;</span><br><span class="line">    <span class="keyword">char</span> *__data;</span><br><span class="line">    <span class="keyword">int</span> __entry_data;</span><br><span class="line">    <span class="keyword">char</span> *__ptr;</span><br><span class="line">    <span class="keyword">int</span> __entry_ptr;</span><br><span class="line">    <span class="keyword">size_t</span> __allocation;</span><br><span class="line">    <span class="keyword">size_t</span> __size;</span><br><span class="line">    __libc_lock_define (, __lock)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> __<span class="title">dirstream</span> <span class="title">DIR</span>;</span></span><br></pre></td></tr></table></figure></li><li><p>diret结构体：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dirent</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">ino_t</span> d_ino; <span class="comment">//d_ino 此目录进入点的inode</span></span><br><span class="line">    <span class="keyword">ff_t</span> d_off; <span class="comment">//d_off 目录文件开头至此目录进入点的位移</span></span><br><span class="line">    <span class="keyword">signed</span> <span class="keyword">short</span> <span class="keyword">int</span> d_reclen; <span class="comment">//d_reclen _name 的长度, 不包含NULL 字符</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> d_type; <span class="comment">//d_type d_name 所指的文件类型 d_name 文件名</span></span><br><span class="line">    har d_name[<span class="number">256</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>返回值：</p><ul><li>opendir()函数成功则返回DIR* 型态的目录流, 打开失败则返回NULL</li><li>readdir()函数成功则返回下个目录进入点. 有错误发生或读取到目录文件尾则返回NULL</li></ul></li><li><p>错误代码：</p><ul><li>EACCESS 权限不足。</li><li>EMFILE 已达到进程可同时打开的文件数上限。</li><li>ENFILE 已达到系统可同时打开的文件数上限。</li><li>ENOTDIR 参数name 非真正的目录。</li><li>ENOENT 参数name 指定的目录不存在, 或是参数name 为一空字符串。</li><li>ENOMEM 核心内存不足。</li></ul></li><li><p>注意：</p><ul><li>在操作完毕后，记住调用<code>int closedir(DIR *dir)</code>函数进行关闭</li></ul></li><li><p>示例：</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dirent.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DIR *dir;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dirent</span> *<span class="title">ptr</span>;</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    dir = opendir(<span class="string">"/etc/rc.d"</span>);</span><br><span class="line">    <span class="keyword">while</span>((ptr = readdir(dir)) != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"d_name : %s\n"</span>, ptr-&gt;d_name);</span><br><span class="line">    &#125;</span><br><span class="line">    closedir(dir);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Function </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>零拷贝技术分析</title>
      <link href="/2017/10/24/%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%8A%80%E6%9C%AF/"/>
      <url>/2017/10/24/%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><ul><li><p>传统的 Linux 操作系统的标准 I/O 接口是基于数据拷贝操作的，即 I/O 操作会导致数据在操作系统内核地址空间的缓冲区和应用程序地址空间定义的缓冲区之间进行传输。这样做最大的好处是可以减少磁盘 I/O 的操作，因为如果所请求的数据已经存放在操作系统的高速缓冲存储器中，那么就不需要再进行实际的物理磁盘 I/O 操作。但是数据传输过程中的数据拷贝操作却导致了极大的 CPU 开销，限制了操作系统有效进行数据传输操作的能力。</p></li><li><p>零拷贝（ zero-copy ）这种技术可以有效地改善数据传输的性能，在内核驱动程序（比如网络堆栈或者磁盘存储驱动程序）处理 I/O 数据的时候，零拷贝技术可以在某种程度上减少甚至完全避免不必要的 CPU 数据拷贝操作。现代的 CPU 和存储体系结构提供了很多特征可以有效地实现零拷贝技术，但是因为存储体系结构非常复杂，而且网络协议栈有时需要对数据进行必要的处理，所以零拷贝技术有可能会产生很多负面的影响，甚至会导致零拷贝技术自身的优点完全丧失。</p></li></ul><a id="more"></a><h4 id="为什么需要零拷贝技术"><a href="#为什么需要零拷贝技术" class="headerlink" title="为什么需要零拷贝技术"></a>为什么需要零拷贝技术</h4><ul><li><p>如今，很多网络服务器都是基于客户端 - 服务器(C-S)这一模型的。在这种模型中，客户端向服务器端请求数据或者服务；服务器端则需要响应客户端发出的请求，并为客户端提供它所需要的数据。随着网络服务的逐渐普及，video 这类应用程序发展迅速。当今的计算机系统已经具备足够的能力去处理 video 这类应用程序对客户端所造成的重负荷，但是对于服务器端来说，它应付由 video 这类应用程序引起的网络通信量就显得捉襟见肘了。而且，客户端的数量增长迅速，那么服务器端就更容易成为性能瓶颈。而对于负荷很重的服务器来说，操作系统通常都是引起性能瓶颈的罪魁祸首。举个例子来说，当数据“写”操作或者数据“发送”操作的系统调用发出时，操作系统通常都会将数据从应用程序地址空间的缓冲区拷贝到操作系统内核的缓冲区中去。操作系统这样做的好处是接口简单，但是却在很大程度上损失了系统性能，因为这种数据拷贝操作不单需要占用 CPU 时间片，同时也需要占用额外的内存带宽。</p></li><li><p>一般来说，客户端通过网络接口卡向服务器端发送请求，操作系统将这些客户端的请求传递给服务器端应用程序，服务器端应用程序会处理这些请求，请求处理完成以后，操作系统还需要将处理得到的结果通过网络适配器传递回去。</p></li></ul><h4 id="Linux中传统服务器进行数据传输的流程"><a href="#Linux中传统服务器进行数据传输的流程" class="headerlink" title="Linux中传统服务器进行数据传输的流程"></a>Linux中传统服务器进行数据传输的流程</h4><ul><li><p>Linux中传统的 I/O 操作是一种缓冲 I/O，I/O 过程中产生的数据传输通常需要在缓冲区中进行多次的拷贝操作。一般来说，在传输数据的时候，用户应用程序需要分配一块大小合适的缓冲区用来存放需要传输的数据。应用程序从文件中读取一块数据，然后把这块数据通过网络发送到接收端去。用户应用程序只是需要调用两个系统调用 read() 和 write() 就可以完成这个数据传输操作，应用程序并不知晓在这个数据传输的过程中操作系统所做的数据拷贝操作。对于 Linux 操作系统来说，基于数据排序或者校验等各方面因素的考虑，操作系统内核会在处理数据传输的过程中进行多次拷贝操作。在某些情况下，这些数据拷贝操作会极大地降低数据传输的性能，如：<code>(如果我们需要传递的是一个容量很大的数据，它们不能长期存储于内存中，就会涉及到从磁盘取出，然后传递给目标进程，目标进程再把数据发给磁盘或socket fd的情景。在这个情况下，由于多次数据复制和CPU状态的切换，会导致数据传输性能低下，严重制约整体服务的负载能力)</code>。</p></li><li><p>当应用程序需要访问某块数据的时候，操作系统内核会先检查这块数据是不是因为前一次对相同文件的访问而已经被存放在操作系统内核地址空间的缓冲区内，如果在内核缓冲区中找不到这块数据，Linux 操作系统内核会先将这块数据从磁盘读出来放到操作系统内核的缓冲区里去。如果这个数据读取操作是由 DMA 完成的，那么在 DMA 进行数据读取的这一过程中，CPU 只是需要进行缓冲区管理，以及创建和处理 DMA ，除此之外，CPU 不需要再做更多的事情，DMA 执行完数据读取操作之后，会通知操作系统做进一步的处理。Linux 操作系统会根据 read() 系统调用指定的应用程序地址空间的地址，把这块数据存放到请求这块数据的应用程序的地址空间中去，在接下来的处理过程中，操作系统需要将数据再一次从用户应用程序地址空间的缓冲区拷贝到与网络堆栈相关的内核缓冲区中去，这个过程也是需要占用 CPU 的。数据拷贝操作结束以后，数据会被打包，然后发送到网络接口卡上去。在数据传输的过程中，应用程序可以先返回进而执行其他的操作。之后，在调用 write() 系统调用的时候，用户应用程序缓冲区中的数据内容可以被安全的丢弃或者更改，因为操作系统已经在内核缓冲区中保留了一份数据拷贝，当数据被成功传送到硬件上之后，这份数据拷贝就可以被丢弃。</p></li><li><p>从上面的描述可以看出，在这种传统的数据传输过程中，数据至少发生了四次拷贝操作，即便是使用了 DMA 来进行与硬件的通讯，CPU 仍然需要访问数据两次。在 read() 读数据的过程中，数据并不是直接来自于硬盘，而是必须先经过操作系统的文件系统层。在 write() 写数据的过程中，为了和要传输的数据包的大小相吻合，数据必须要先被分割成块，而且还要预先考虑包头，并且要进行数据校验和操作。</p><p>  <img src="https://raw.githubusercontent.com/paulRoux/Pictures/master/image001.jpg" alt="传统使用read和write系统调用的数据传输"></p></li></ul><h4 id="零拷贝（zero-copy）技术概述"><a href="#零拷贝（zero-copy）技术概述" class="headerlink" title="零拷贝（zero copy）技术概述"></a>零拷贝（zero copy）技术概述</h4><ul><li><p>什么是零拷贝？</p><ul><li>简单一点来说，零拷贝就是一种避免 CPU 将数据从一块存储拷贝到另外一块存储的技术。针对操作系统中的设备驱动程序、文件系统以及网络协议堆栈而出现的各种零拷贝技术极大地提升了特定应用程序的性能，并且使得这些应用程序可以更加有效地利用系统资源。这种性能的提升就是通过在数据拷贝进行的同时，允许 CPU 执行其他的任务来实现的。零拷贝技术可以减少数据拷贝和共享总线操作的次数，消除传输数据在存储器之间不必要的中间拷贝次数，从而有效地提高数据传输效率。而且，零拷贝技术减少了用户应用程序地址空间和操作系统内核地址空间之间因为上下文切换而带来的开销。进行大量的数据拷贝操作其实是一件简单的任务，从操作系统的角度来说，如果 CPU 一直被占用着去执行这项简单的任务，那么这将会是很浪费资源的；如果有其他比较简单的系统部件可以代劳这件事情，从而使得 CPU 解脱出来可以做别的事情，那么系统资源的利用则会更加有效。综上所述，零拷贝技术的目标可以概括如下：</li><li><p>避免数据拷贝</p><ul><li>避免操作系统内核缓冲区之间进行数据拷贝操作。</li><li>避免操作系统内核和用户应用程序地址空间这两者之间进行数据拷贝操作。</li><li>用户应用程序可以避开操作系统直接访问硬件存储。</li><li>数据传输尽量让 DMA 来做。</li></ul></li><li><p>将多种操作结合在一起</p><ul><li>避免不必要的系统调用和上下文切换。</li><li>需要拷贝的数据可以先被缓存起来。</li><li>对数据进行处理尽量让硬件来做。</li></ul></li></ul></li><li><p>前文提到过，对于高速网络来说，零拷贝技术是非常重要的。这是因为高速网络的网络链接能力与 CPU 的处理能力接近，甚至会超过 CPU 的处理能力。如果是这样的话，那么 CPU 就有可能需要花费几乎所有的时间去拷贝要传输的数据，而没有能力再去做别的事情，这就产生了性能瓶颈，限制了通讯速率，从而降低了网络链接的能力。一般来说，一个 CPU 时钟周期可以处理一位的数据。举例来说，一个 1 GHz 的处理器可以对 1Gbit/s 的网络链接进行传统的数据拷贝操作，但是如果是 10 Gbit/s 的网络，那么对于相同的处理器来说，零拷贝技术就变得非常重要了。对于超过 1 Gbit/s 的网络链接来说，零拷贝技术在超级计算机集群以及大型的商业数据中心中都有所应用。然而，随着信息技术的发展，1 Gbit/s，10 Gbit/s 以及 100 Gbit/s 的网络会越来越普及，那么零拷贝技术也会变得越来越普及，这是因为网络链接的处理能力比 CPU 的处理能力的增长要快得多。传统的数据拷贝受限于传统的操作系统或者通信协议，这就限制了数据传输性能。零拷贝技术通过减少数据拷贝次数，简化协议处理的层次，在应用程序和网络之间提供更快的数据传输方法，从而可以有效地降低通信延迟，提高网络吞吐率。零拷贝技术是实现主机或者路由器等设备高速网络接口的主要技术之一。</p></li><li><p>现代的 CPU 和存储体系结构提供了很多相关的功能来减少或避免 I/O 操作过程中产生的不必要的 CPU 数据拷贝操作，但是，CPU 和存储体系结构的这种优势经常被过高估计。存储体系结构的复杂性以及网络协议中必需的数据传输可能会产生问题，有时甚至会导致零拷贝这种技术的优点完全丧失。</p></li></ul><h4 id="零拷贝技术分类"><a href="#零拷贝技术分类" class="headerlink" title="零拷贝技术分类"></a>零拷贝技术分类</h4><ul><li><p>零拷贝技术的发展很多样化，现有的零拷贝技术种类也非常多，而当前并没有一个适合于所有场景的零拷贝技术的出现。对于 Linux 来说，现存的零拷贝技术也比较多，这些零拷贝技术大部分存在于不同的 Linux 内核版本，有些旧的技术在不同的 Linux 内核版本间得到了很大的发展或者已经渐渐被新的技术所代替。本文针对这些零拷贝技术所适用的不同场景对它们进行了划分。概括起来，Linux 中的零拷贝技术主要有下面这几种：</p><ul><li><p>直接 I/O：对于这种数据传输方式来说，应用程序可以直接访问硬件存储，操作系统内核只是辅助数据传输：这类零拷贝技术针对的是操作系统内核并不需要对数据进行直接处理的情况，数据可以在应用程序地址空间的缓冲区和磁盘之间直接进行传输，完全不需要 Linux 操作系统内核提供的页缓存的支持。</p></li><li><p>在数据传输的过程中，避免数据在操作系统内核地址空间的缓冲区和用户应用程序地址空间的缓冲区之间进行拷贝。有的时候，应用程序在数据进行传输的过程中不需要对数据进行访问，那么，将数据从 Linux 的页缓存拷贝到用户进程的缓冲区中就可以完全避免，传输的数据在页缓存中就可以得到处理。在某些特殊的情况下，这种零拷贝技术可以获得较好的性能。Linux 中提供类似的系统调用主要有 mmap()，sendfile() 以及 splice()。</p></li><li><p>对数据在 Linux 的页缓存和用户进程的缓冲区之间的传输过程进行优化。该零拷贝技术侧重于灵活地处理数据在用户进程的缓冲区和操作系统的页缓存之间的拷贝操作。这种方法延续了传统的通信方式，但是更加灵活。在　 Linux 　中，该方法主要利用了写时复制技术。</p></li></ul></li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li><p>前两类方法的目的主要是为了避免应用程序地址空间和操作系统内核地址空间这两者之间的缓冲区拷贝操作。这两类零拷贝技术通常适用在某些特殊的情况下，比如要传送的数据不需要经过操作系统内核的处理或者不需要经过应用程序的处理。第三类方法则继承了传统的应用程序地址空间和操作系统内核地址空间之间数据传输的概念，进而针对数据传输本身进行优化。</p></li><li><p>我们知道，硬件和软件之间的数据传输可以通过使用 DMA 来进行，DMA 　进行数据传输的过程中几乎不需要　CPU 参与，这样就可以把 CPU 解放出来去做更多其他的事情，但是当数据需要在用户地址空间的缓冲区和 Linux 操作系统内核的页缓存之间进行传输的时候，并没有类似 DMA 这种工具可以使用，CPU 需要全程参与到这种数据拷贝操作中，所以第三类方法的目的是可以有效地改善数据在用户地址空间和操作系统内核地址空间之间传递的效率。</p></li></ul><h4 id="DMA解释"><a href="#DMA解释" class="headerlink" title="DMA解释"></a>DMA解释</h4><ul><li>DMA(Direct Memory Access，直接内存存取) 是所有现代电脑的重要特色，它允许不同速度的硬件装置来沟通，而不需要依赖于 CPU 的大量中断负载。否则，CPU 需要从来源把每一片段的资料复制到暂存器，然后把它们再次写回到新的地方。在这个时间中，CPU 对于其他的工作来说就无法使用</li></ul><h4 id="出处"><a href="#出处" class="headerlink" title="出处"></a>出处</h4><ul><li><p>说明：本文包含了自己的理解与参考了一些资料的补充</p></li><li><p>转载自：<a href="https://www.ibm.com/developerworks/cn/linux/l-cn-zerocopy1/index.html" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/linux/l-cn-zerocopy1/index.html</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 零拷贝 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>stat系列函数</title>
      <link href="/2017/10/24/stat%E7%B3%BB%E5%88%97%E5%87%BD%E6%95%B0/"/>
      <url>/2017/10/24/stat%E7%B3%BB%E5%88%97%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><ul><li><p>说明：</p><ul><li>stat系列函数有三种情况:分别对应文件名称(stat)、文件描述符(fstat)和符号链接文件(lstat)</li><li><p>stat结构：(不同的Linux下有小的区别，不影响使用)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stat</span> &#123;</span></span><br><span class="line">        <span class="keyword">mode_t</span>    st_mode;    <span class="comment">// 文件权限和文件类型信息</span></span><br><span class="line">        <span class="keyword">ino_t</span>     st_ino;     <span class="comment">// 与该文件关联的inode</span></span><br><span class="line">        <span class="keyword">dev_t</span>     st_dev;     <span class="comment">// 保存文件的设备 number(filesystem)</span></span><br><span class="line">        <span class="keyword">dev_t</span>     st_rdev;    <span class="comment">// 若此文件为装置设备文件, 则为其设备编号</span></span><br><span class="line">        <span class="keyword">nlink_t</span>   st_nlink;   <span class="comment">// 该文件上硬连接的个数</span></span><br><span class="line">        <span class="keyword">uid_t</span>     st_uid;     <span class="comment">// 文件属主的UID号</span></span><br><span class="line">        <span class="keyword">gid_t</span>     st_gid;     <span class="comment">// 文件属主的GID号</span></span><br><span class="line">        <span class="keyword">off_t</span>     st_size;    <span class="comment">// 普通文件的大小</span></span><br><span class="line">        <span class="keyword">time_t</span>    st_atime;   <span class="comment">// 文件上一次被访问的时间</span></span><br><span class="line">        <span class="keyword">time_t</span>    st_mtime;   <span class="comment">// 文件的内容上一次被修改的时间</span></span><br><span class="line">        <span class="keyword">time_t</span>    st_ctime;   <span class="comment">// 文件的权限、属主、组或内容上一次被修改的时间</span></span><br><span class="line">        <span class="keyword">long</span>      st_blksize; <span class="comment">// I/O 文件系统的I/O 缓冲区大小</span></span><br><span class="line">        <span class="keyword">long</span>      st_blocks;  <span class="comment">// 占用文件区块的个数, 每一区块大小为512 个字节</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>  <a id="more"></a><ul><li>st_mode相关宏(这些宏就是一些特定位置为1的二进制数的定义,用它们和st_mode进行”&amp;”操作，从而就可以得到某些特定的信息)<ul><li>文件类型标志<ul><li>S_IFBLK：文件是一个特殊的块设备</li><li>S_IFDIR：文件是一个目录</li><li>S_IFCHR：文件是一个特殊的字符设备</li><li>S_IFIFO：文件是一个FIFO设备</li><li>S_IFREG：文件是一个普通文件（REG即使regular啦）</li><li>S_IFLNK：文件是一个符号链接</li></ul></li><li>用于解释st_mode标志的掩码<ul><li>S_IFMT：文件类型</li><li>S_IRWXU：属主的读/写/执行权限，可以分成S_IXUSR, S_IRUSR, S_IWUSR</li><li>S_IRWXG：属组的读/写/执行权限，可以分成S_IXGRP, S_IRGRP, S_IWGRP</li><li>S_IRWXO：其他用户的读/写/执行权限，可以分为S_IXOTH, S_IROTH, S_IWOTH</li></ul></li></ul></li></ul></li><li><p>我们可以通过stat获取文件的类型和文件大小等信息。文件类型有：普通文件、目录文件、块特殊文件、字符特殊文件、FIFO、套接字和符号链接。要想通过stat系列函数来判断文件或者目录是否存在，当执行stat函数，如果文件存在时，还需进一步判断该文件是普通文件还是目录文件</p></li><li><p>错误代码：</p><ul><li>ENOENT 参数file_name 指定的文件不存在</li><li>ENOTDIR 路径中的目录存在但却非真正的目录</li><li>ELOOP 欲打开的文件有过多符号连接问题, 上限为16 符号连接</li><li>EFAULT 参数buf 为无效指针, 指向无法存在的内存空间</li><li>EACCESS 存取文件时被拒绝</li><li>ENOMEM 核心内存不足</li><li>ENAMETOOLONG 参数file_name 的路径名称太长</li></ul></li></ul></li><li><p>stat系列函数</p></li><li><p>头文件：<code>#include &lt;sys/stat.h&gt;</code> <code>#include &lt;unistd.h&gt;</code> <code>#include &lt;sys.stat.h&gt;</code></p></li><li><p>原型：</p><ul><li><code>int stat(const char *path, struct stat *buf)</code></li><li><code>int fstat(int fd, struct stat *buf)</code></li><li><code>int lstat(const char *path, struct stat *buf)</code></li></ul></li><li><p>说明：</p><ul><li>stat() 用来将参数 path 所指的文件状态, 复制到参数 buf 所指的结构中</li><li>fstat() 用来将参数 fd 所指的文件状态, 复制到参数 buf 所指的结构中(struct stat)</li><li>lstat() 与 stat()作用完全相同, 都是取得参数 path 所指的文件状态, 其差别在于, 当文件为符号连接时, lstat()会返回该 link 本身的状态</li></ul></li><li><p>返回值：若成功则为0，若出错则为-1</p></li><li><p>示例：</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">buf</span>;</span></span><br><span class="line">stat(<span class="string">"/etc/hosts"</span>, &amp;buf);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"stat: /etc/hosts file size = %d\n"</span>, buf.st_size);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> filefd = open(<span class="string">"test.txt"</span>, O_RDONLY);</span><br><span class="line">fstat(filefd, &amp;buf);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"fstat: /etc/hosts file size = %d\n"</span>, buf.st_size);</span><br><span class="line"></span><br><span class="line">lstat(<span class="string">"/etc/hosts"</span>, &amp;buf);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"lstat: /etc/hosts file size = %d\n"</span>, buf.st_size);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Function </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>C语言NULL和0的区别详解</title>
      <link href="/2017/10/17/NULL%E5%92%8C0%E7%9A%84%E5%8C%BA%E5%88%AB%E8%AF%A6%E8%A7%A3/"/>
      <url>/2017/10/17/NULL%E5%92%8C0%E7%9A%84%E5%8C%BA%E5%88%AB%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><pre><code>0 would digit zero, that is, a numerical value.&apos;0&apos; could be the character capital oh or the character zero. For example: char word[10] = &quot;Oxford&quot;; char number[10] = &quot;01234&quot;;Depending on typeface used &apos;O&apos; may look exactly like &apos;0&apos; making it difficult to tell them apart out of context.&apos;\0&apos; is the null character used to terminate strings in C/C++.&quot;\0&quot; is an empty string.</code></pre><ul><li>在C语言及其派生语言中，\0不是一个单独的转义序列，而是一个以<strong>八进制</strong>表示常数，而常数的数值为0，\0后面不能接0至7的数字，不然会视为是一个八进制的数字。</li></ul><a id="more"></a><ul><li>NULL和0的值都是<strong>一样的</strong>，但是为了<strong>目的和用途及容易识别</strong>的原因，NULL用于<strong>指针和对象</strong>，0用于<strong>数值</strong>。对于<strong>字符串</strong>的结尾，使用’\0’，它的值也是0，但是让人一看就知道这是字符串的结尾，不是指针，也不是普通的数值。</li></ul><ul><li>在不同的系统中，NULL并非总是和0等同，NULL仅仅代表<strong>空值</strong>，也就是指向一个<strong>不被使用的地址</strong>，在大多数系统中，都将0作为不被使用的地址，所以就有了类似这样的定义。但并非总是如此，也有些系统不将0地址作为NULL，而是用其他的地址，所以说，<strong>千万别将NULL和0等价起来</strong>，特别是在一些跨平台的代码中，这更是将给你带来灾难 #define NULL 0</li></ul><h4 id="空指针常量"><a href="#空指针常量" class="headerlink" title="空指针常量"></a>空指针常量</h4><pre><code>An integer constant expression with the value 0, or such an expression cast to type void *, is called a null pointer constant</code></pre><ul><li>NULL在stdio.h中的定义：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !defined(NULL) &amp;&amp; defined(__NEEDS_NULL)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NULL    0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NULL    ((void *)0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><ul><li>在c++定义为0，在c中定义为(void *)0;的原因：</li></ul><blockquote><p><strong>注意：</strong> 0、0L、’\0’、3 - 3、0 * 17 （它们都是“integer constant expression”）以及 (void*)0 等都是空指针常量（注意 (char*) 0 不叫空指针常量，只是一个空指针值）</p></blockquote><ul><li>一般的 C 系统选择 (void*)0 或者 0 的居多（也有个别的选择 0L）；至于 C++ 系统，由于存在严格的类型转化的要求，void* 不能象 C 中那样自由转换为其它指针类型，所以通常选 0 作为空指针常量</li></ul><h4 id="3-空指针"><a href="#3-空指针" class="headerlink" title="3.空指针"></a><strong>3.空指针</strong></h4><pre><code>If a null pointer constant is converted to a pointer type, the resulting pointer, called a null pointer, is guaranteed to compare unequal to a pointer to any object or function.</code></pre><ul><li><strong>char *p=0；</strong>此时p就是一个<strong>空指针</strong>，不指向任何实际对象。<br>因此，如果 p 是一个指针变量，则 <strong>p = 0;、p = 0L;、p = ‘\0’;、p = 3 - 3;、p = 0 * 17</strong>; 中的任何一种赋值操作之后(对于 C 来说还可以是 p = (void*)0;)，p 都成为一个空指针，由系统保证空指针不指向任何实际的对象或者函数。反过来说，任何对象或者函数的地址都不可能是空指针。<strong>（tyc: 比如这里的(void*)0就是一个空指针</strong></li></ul><h4 id="NULL"><a href="#NULL" class="headerlink" title="NULL"></a>NULL</h4><pre><code>The macro NULL is defined in &lt;stddef.h&gt; (and other headers) as a null pointer constant</code></pre><ul><li>即 NULL 是一个标准规定的宏定义，用来表示<strong>空指针常量</strong>。因此，除了上面的各种赋值方式之外，还可以用 <strong>p = NULL</strong>; 来使 p 成为一个空指针。（tyc：很多系统中的实现：<strong>#define NULL (void*)0</strong>，与这里的“a null pointer constant”并不是完全一致的）</li></ul><h4 id="空指针的内部实现"><a href="#空指针的内部实现" class="headerlink" title="空指针的内部实现"></a>空指针的内部实现</h4><ul><li><p>标准并没有对空指针指向内存中的什么地方这一个问题作出规定，我们<strong>常见的</strong>空指针一般指向 0 地址，即空指针的内部用<strong>全 0</strong> 来表示（zero null pointer，零空指针）；也有一些系统用一些特殊的地址值或者特殊的方式表示空指针（nonzero null pointer，非零空指针）</p></li><li><p><strong>注意：</strong>不要把空指针的内部表示等同于整数 0 的对象表示</p></li></ul><h4 id="判断一个指针是否是一个空指针"><a href="#判断一个指针是否是一个空指针" class="headerlink" title="判断一个指针是否是一个空指针"></a>判断一个指针是否是一个空指针</h4><ul><li><p>假设 p 是一个指针变量，q 是一个同类型的空指针，要检查 p 是否是一个空指针，可以采用下列任意形式之一</p><pre><code>if ( p == 0 )if ( p == &apos;\0&apos; )if ( p == 3 - 3 )if ( p == NULL )if ( NULL == p )if ( !p )if ( p == q )</code></pre></li><li><p><strong>注意：</strong>不可以用 memset 函数来得到一个空指针。<br>因为有的系统存在着“非零空指针” （nonzero null pointer），所以这时 <strong>memset( &amp;p, 0, sizeof(p) ); 和 p = 0;</strong> 这两者<strong>不等价</strong></p></li></ul><h4 id="自定义NULL"><a href="#自定义NULL" class="headerlink" title="自定义NULL"></a>自定义NULL</h4><pre><code>If the program declares or defines an identifier in a context in which it is reserved (other than as allowed by 7.1.4), or defines a reserved identifier as a macro name, the behavior is undefined.</code></pre><ul><li>所以，如果包含了相应的标准头文件而引入了 NULL 的话，则再在程序中重新定义NULL为不同的内容是非法的，其行为是未定义的。即NULL只能是 0</li></ul><h4 id="malloc分配内存失败的的返回"><a href="#malloc分配内存失败的的返回" class="headerlink" title="malloc分配内存失败的的返回"></a>malloc分配内存失败的的返回</h4><pre><code>If the space cannot be allocated, a null pointer is returned.</code></pre><ul><li>malloc 函数是标准C规定的库函数。在标准中明确规定了在其内存分配失败时返回的是一个 “null pointer”（空指针）</li></ul><h4 id="字符的结束符’-0’"><a href="#字符的结束符’-0’" class="headerlink" title="字符的结束符’\0’"></a>字符的结束符’\0’</h4><ul><li><p>‘\0’是C++中字符串的结尾标志，存储在字符串的结尾。</p></li><li><p>eg: char cha[5]表示可以放5个字符的字符串，由于c/c++中规定字符串的结尾标志为’\0’,它虽然不计入串长，但要占内存空间.</p></li><li><p>一个汉字一般用两个字节表示，且c/c++中如一个数组cha[5]，有5个变量，分别是 cha[0] , cha[1] , cha[2] , cha[3] , cha[4] , 所以cha[5]可以放5个字母或者放2个汉字（1个汉字占2个字节，1个字母占一个字节），cha[5]占5个字节内存空间.</p></li></ul><h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><p>链接：</p><ul><li><a href="http://www.cnblogs.com/youxin/archive/2012/03/27/2420023.html" target="_blank" rel="noopener">http://www.cnblogs.com/youxin/archive/2012/03/27/2420023.html</a></li><li><a href="https://zh.wikipedia.org/wiki/%E7%A9%BA%E5%AD%97%E7%AC%A6" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/%E7%A9%BA%E5%AD%97%E7%AC%A6</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>进程的终止方式</title>
      <link href="/2017/10/16/%E8%BF%9B%E7%A8%8B%E7%9A%84%E7%BB%88%E6%AD%A2%E6%96%B9%E5%BC%8F/"/>
      <url>/2017/10/16/%E8%BF%9B%E7%A8%8B%E7%9A%84%E7%BB%88%E6%AD%A2%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="终止类别"><a href="#终止类别" class="headerlink" title="终止类别"></a>终止类别</h4><ul><li><p>正常终止</p><ul><li>从main函数返回</li><li>调用exit(标准c库函数)</li><li>调用_exit或者_Exit(系统调用)</li><li>最后一个线程从其启动例程(进程)返回<ul><li>启动例程会搜集命令行参数给main传参，并搜集环境信息构建环境表给main函数，还会登记进程的终止函数</li><li>在进程的main函数执行前内核会启动</li><li>编译器在编译时会将启动例程编译进可执行文件中</li></ul></li><li><p>最后一个线程调用pthread_exit</p><a id="more"></a></li></ul></li><li><p>异常终止</p><ul><li>调用abort</li><li>接收到一个信号并终止</li><li>最后一个线程对取消请求做处理响应</li></ul></li><li><p>进程返回</p><ul><li>通常进程运行成功返回0，否则返回非0</li><li>在shell中可以查看进程的返回值(echo $?)</li></ul></li></ul><h4 id="自定义终止函数"><a href="#自定义终止函数" class="headerlink" title="自定义终止函数"></a>自定义终止函数</h4><ul><li><p>atexit函数</p><ul><li>原型：<code>int atexit(void (*function) (void));</code></li><li>返回：成功返回0，出错返回-1</li><li>功能：向内核登记终止函数</li><li>注意：<ul><li>每个启动的进程都默认的登记了一个标准的终止函数</li><li>终止函数在进程终止时释放进程所占用的一些资源</li><li>登记的多个终止函数的执行顺序是以栈的方式进行，即先登记后执行</li></ul></li></ul></li><li><p>示例：</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义进程的终止函数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">term_fun1</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"first term fucntion\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">term_fun2</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"second term fucntion\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">term_fun3</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"third term fucntion\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(argc &lt; <span class="number">3</span>)&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"usage: %s file [exit|_exit|return]\n"</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向内核登记终止函数</span></span><br><span class="line">    atexit(term_fun1);</span><br><span class="line">    atexit(term_fun2);</span><br><span class="line">    atexit(term_fun3);</span><br><span class="line"></span><br><span class="line">    FILE *fp = fopen(argv[<span class="number">1</span>], <span class="string">"w"</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(fp, <span class="string">"hello iotek"</span>); <span class="comment">//全缓存函数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(argv[<span class="number">2</span>], <span class="string">"exit"</span>))&#123;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(argv[<span class="number">2</span>], <span class="string">"_exit"</span>))&#123;</span><br><span class="line">        _exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(argv[<span class="number">2</span>], <span class="string">"return"</span>))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"usage: %s file [exit|_exit|return]\n"</span>, argv[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>运行测试</p><ul><li><p>return</p><p>  <img src="https://raw.githubusercontent.com/McXing/Pictures/master/atexit/return.png" alt="return" title="return"></p><ul><li>说明：前面说过终止函数的方式是以栈的方式进行，所以看到3,2,1的顺序</li></ul></li><li><p>exit</p><p>  <img src="https://raw.githubusercontent.com/McXing/Pictures/master/atexit/exit.png" alt="exit" title="exit"></p><ul><li>说明：前面说过终止函数的方式是以栈的方式进行，所以看到3,2,1的顺序，和return不同的是只释放一次资源</li></ul></li><li><p>_exit(_Exit)</p><p>  <img src="https://raw.githubusercontent.com/McXing/Pictures/master/atexit/_exit.png" alt="_exit_" title="_exit"></p><ul><li>说明：在调用的时候，因为fprintf是c语言的带缓冲的库函数，所以存放数据是先存放在自己的缓冲区，等待写满，但是在这之前调用_exit函数导致没有清缓存，最终文件里面也没有数据</li></ul></li></ul></li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><table><thead><tr><th></th><th></th><th>return</th><th>exit</th><th>_exit (_Exit)</th></tr></thead><tbody><tr><td>是否刷新标准I/O缓存</td><td>是</td><td>是</td><td>否</td><td></td></tr><tr><td>是否自动调用终止函数</td><td>是</td><td>是</td><td>否</td><td></td></tr></tbody></table><ul><li>注意：在网络编程时，调用return几次，就释放几次内核资源，调用exit多次，只释放一次。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 进程 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mem函数源码</title>
      <link href="/2017/10/15/mem%E5%8D%9A%E5%AE%A2%E6%80%BB%E7%BB%93/"/>
      <url>/2017/10/15/mem%E5%8D%9A%E5%AE%A2%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h4 id="memcpy函数"><a href="#memcpy函数" class="headerlink" title="memcpy函数"></a>memcpy函数</h4><ul><li><strong>原型</strong>：<code>void *memcpy(void *dest, const void *src, int count)</code></li><li><strong>作用</strong>：由src指定内存区域拷贝count个字符到dest所指定的内存区域。</li><li><p><strong>代码</strong>：</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">my_memcpy</span><span class="params">(<span class="keyword">void</span> *dest, <span class="keyword">const</span> <span class="keyword">void</span> *src, <span class="keyword">int</span> count)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">/*由src指定内存区域拷贝count个字符到dest所指定的内存区域。</span></span><br><span class="line"><span class="comment">  src和dest内存区域不能重叠，函数返回指向dest的指针。*/</span></span><br><span class="line">  <span class="comment">//拷贝完成不会自动加上'\0'</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> *p = (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)dest;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> *q = (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)src;</span><br><span class="line">  <span class="keyword">while</span>(count--)</span><br><span class="line">  &#123;</span><br><span class="line">    *p++ = *q++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> dest;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> a[<span class="number">20</span>];</span><br><span class="line">  <span class="keyword">char</span> *p;</span><br><span class="line">  p = (<span class="keyword">char</span> *)my_memcpy(a, <span class="string">"hello world!"</span>, <span class="number">12</span>);</span><br><span class="line">  *(p+<span class="number">12</span>) = <span class="string">'\0'</span>;  <span class="comment">//为puts做准备</span></span><br><span class="line">  <span class="built_in">puts</span>(a);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><h4 id="memccpy函数"><a href="#memccpy函数" class="headerlink" title="memccpy函数"></a>memccpy函数</h4><ul><li><strong>原型</strong>：<code>void *memccpy(void *dest, const void *src, char ch, int count)</code></li><li><strong>作用</strong>：如果src前n个字节中存在’ch’，返回指向字符’ch’后的第一个字符的指针；<br>返回NULL，并且复制src。</li><li><p><strong>代码</strong>：</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">my_memccpy</span><span class="params">(<span class="keyword">void</span> *dest, <span class="keyword">const</span> <span class="keyword">void</span> *src, <span class="keyword">char</span> ch, <span class="keyword">int</span> count)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">/*如果src前n个字节中存在’ch’，返回指向字符’ch’后的第一个字符的指针；</span></span><br><span class="line"><span class="comment">  返回NULL，并且复制src。</span></span><br><span class="line"><span class="comment">  一个条件达到就结束*/</span></span><br><span class="line">  <span class="comment">//对于数字字符，遇见空格则停止，并返回指向空格的指针</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(count--)</span><br><span class="line">  &#123;</span><br><span class="line">    *(<span class="keyword">char</span> *)dest = *(<span class="keyword">char</span> *)src;</span><br><span class="line">    dest = (<span class="keyword">char</span> *)dest + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(*(<span class="keyword">char</span> *)src == (<span class="keyword">char</span>)ch)</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    src = (<span class="keyword">char</span> *)src + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (count ? (<span class="keyword">char</span> *)dest : <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> a[<span class="number">20</span>];</span><br><span class="line">  <span class="keyword">char</span> *p;</span><br><span class="line">  <span class="keyword">char</span> *str =<span class="string">"hello world!"</span>;</span><br><span class="line">  <span class="keyword">char</span> ch;</span><br><span class="line"></span><br><span class="line">  ch = <span class="string">'9'</span>;</span><br><span class="line">  p = (<span class="keyword">char</span> *)my_memccpy(a, str, ch, <span class="built_in">strlen</span>(str)+<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span>(p == <span class="literal">NULL</span>)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Can't not find character.\n"</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Find the character! \n"</span>);</span><br><span class="line">    *p= <span class="string">'\0'</span>;  <span class="comment">//为下面的puts函数准备</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"The String which has been copied is:  "</span>);</span><br><span class="line">  <span class="built_in">puts</span>(a);  <span class="comment">//puts()从string的开头往stdout中输出字符，直到遇见结束标志 '\0'，'\0'不会被输出到stdout。</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"************************************"</span>);</span><br><span class="line"></span><br><span class="line">  ch = <span class="string">'b'</span>;</span><br><span class="line">  p = (<span class="keyword">char</span> *)my_memccpy(a, str, ch, <span class="built_in">strlen</span>(str)+<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span>(p == <span class="literal">NULL</span>)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Can't not find character.\n"</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\nFind the character! \n"</span>);</span><br><span class="line">    *p = <span class="string">'\0'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"The String which has been copied is:  "</span>);</span><br><span class="line">  <span class="built_in">puts</span>(a);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="memmove函数"><a href="#memmove函数" class="headerlink" title="memmove函数"></a>memmove函数</h4><ul><li><strong>原型</strong>：<code>void *memmove(void *dest, const void *src, int count)</code></li><li><strong>作用</strong>：由src所指定的内存区域赋值count个字符到dest所指定的内存区域。<br>src和dest所指内存区域可以重叠</li><li><p><strong>代码</strong>：</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">my_memmove</span><span class="params">(<span class="keyword">void</span> *dest, <span class="keyword">const</span> <span class="keyword">void</span> *src, <span class="keyword">int</span> count)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">/*由src所指定的内存区域赋值count个字符到dest所指定的内存区域。</span></span><br><span class="line"><span class="comment">  src和dest所指内存区域可以重叠，</span></span><br><span class="line"><span class="comment">  但复制后src的内容会被更改,最终函数返回指向dest的指针。*/</span></span><br><span class="line">  <span class="comment">//可以自己考虑count的大小，大于0，小于src的大小</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>((<span class="keyword">unsigned</span> <span class="keyword">char</span> *)dest &gt;= ((<span class="keyword">unsigned</span> <span class="keyword">char</span> *)src + count))</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">/*若果没有重叠*/</span></span><br><span class="line">      dest = <span class="built_in">memcpy</span> (dest, src, count);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">/*如果有重叠,则从尾部进行拷贝*/</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *p = (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)dest + count;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">char</span> *q = (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)src + count;</span><br><span class="line">        <span class="keyword">while</span> (count--)</span><br><span class="line">        &#123;</span><br><span class="line">            *--p = *--q;</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> dest;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">/*正常的复制*/</span></span><br><span class="line">  <span class="keyword">char</span> a[<span class="number">20</span>];</span><br><span class="line">    <span class="built_in">puts</span>((<span class="keyword">char</span> *)my_memmove(a, <span class="string">"hello world!"</span>, <span class="number">16</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*内存重叠*/</span></span><br><span class="line">    <span class="keyword">char</span> str[] = <span class="string">"memmove can be very useful......"</span>;</span><br><span class="line">    my_memmove (str+<span class="number">20</span>, str+<span class="number">15</span>, <span class="number">11</span>);</span><br><span class="line">    <span class="built_in">puts</span> (str);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="memcmp函数"><a href="#memcmp函数" class="headerlink" title="memcmp函数"></a>memcmp函数</h4><ul><li><strong>原型</strong>：<code>int memcmp(const void *buffer1, const void *buffer2, int count)</code></li><li><strong>作用</strong>：比较内存区域buffer1和buffer2的前count个字节。</li><li><p><strong>代码</strong>：</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_memcmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *buffer1, <span class="keyword">const</span> <span class="keyword">void</span> *buffer2, <span class="keyword">int</span> count)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">/*比较内存区域buffer1和buffer2的前count个字节。</span></span><br><span class="line"><span class="comment">  当buffer1 &lt; buffer2时，返回值 &lt; 0；</span></span><br><span class="line"><span class="comment">  当buffer1 = buffer2时，返回值 0；</span></span><br><span class="line"><span class="comment">  当buffer1 &gt; buffer2时，返回值 &gt; 0。*/</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(!count)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(--count &amp;&amp; *(<span class="keyword">char</span> *)buffer1 == *(<span class="keyword">char</span> *)buffer2)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//判断前count个字符是否相等</span></span><br><span class="line">    buffer1 = (<span class="keyword">char</span> *)buffer1 + <span class="number">1</span>;</span><br><span class="line">    buffer2 = (<span class="keyword">char</span> *)buffer2 + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//返回两个字符串的首个字符的差值</span></span><br><span class="line">  <span class="keyword">return</span> ( *((<span class="keyword">unsigned</span> <span class="keyword">char</span> *)buffer1) - *((<span class="keyword">unsigned</span> <span class="keyword">char</span> *)buffer2) );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *str1 = <span class="string">"hello"</span>;</span><br><span class="line">    <span class="keyword">char</span> *str2 = <span class="string">"world"</span>;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> res = my_memcmp(str1, str2, n);</span><br><span class="line">  <span class="keyword">if</span>(res &gt; <span class="number">0</span>)</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%s Upper Than %s\n"</span>, str1, str2);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(res &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s Lower Than %s\n"</span>, str1, str2);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s Equal %s\n"</span>, str1, str2);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="memchr函数"><a href="#memchr函数" class="headerlink" title="memchr函数"></a>memchr函数</h4><ul><li><strong>原型</strong>：<code>void *memchr(const void *buffer, int ch, int count)</code></li><li><strong>作用</strong>：从buffer所指内存区域的前count个字节查找字符ch，<br>当第一次遇到字符ch时停止查找。</li><li><p><strong>代码</strong>：</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">my_memchr</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *buffer, <span class="keyword">int</span> ch, <span class="keyword">int</span> count)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">/*从buffer所指内存区域的前count个字节查找字符ch，</span></span><br><span class="line"><span class="comment">  当第一次遇到字符ch时停止查找。</span></span><br><span class="line"><span class="comment">  如果成功，返回指向字符ch的指针,否则返回NULL*/</span></span><br><span class="line">  <span class="comment">//对于数字字符，遇见空格则停止，并返回指向空格的指针</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(count-- &amp;&amp; (<span class="keyword">unsigned</span> <span class="keyword">char</span>)ch != *(<span class="keyword">unsigned</span> <span class="keyword">char</span> *)buffer)</span><br><span class="line">  &#123;</span><br><span class="line">    buffer = (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)buffer + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>(count ? (<span class="keyword">void</span> *)buffer : <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *str = <span class="string">"hello world!"</span>;</span><br><span class="line">  <span class="keyword">char</span> *p;</span><br><span class="line">  <span class="keyword">char</span> ch;</span><br><span class="line"></span><br><span class="line">  ch = <span class="string">'1'</span>;</span><br><span class="line">  p = (<span class="keyword">char</span> *)my_memchr(str, ch, <span class="built_in">strlen</span>(str)+<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span>(p == <span class="literal">NULL</span>)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Can't find the character %c !\n"</span>, ch);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Find the character %c !\n"</span>, *p);</span><br><span class="line"></span><br><span class="line">  ch = <span class="string">'d'</span>;</span><br><span class="line">  p = (<span class="keyword">char</span> *)my_memchr(str ,ch, <span class="built_in">strlen</span>(str)+<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span>(p == <span class="literal">NULL</span>)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Can't find the character %c !\n"</span>, ch);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Find the character %c !\n"</span>, *p);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><p>链接：<br><a href="http://www.cnblogs.com/jiangyinglin/p/3247087.html" target="_blank" rel="noopener">http://www.cnblogs.com/jiangyinglin/p/3247087.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mem函数源码</title>
      <link href="/2017/10/15/str%E5%8D%9A%E5%AE%A2%E6%80%BB%E7%BB%93/"/>
      <url>/2017/10/15/str%E5%8D%9A%E5%AE%A2%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>##str函数的源码</p><p>###1、strcpy函数</p><ol><li><strong>原型</strong>：<code>char * strcpy(char * destin, const char * source)</code></li><li><strong>作用</strong>：把source指向的字符串拷贝到destin指向的字符串中</li><li><strong>代码</strong>：</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> * <span class="title">my_strcpy</span><span class="params">(<span class="keyword">char</span> * destin, <span class="keyword">const</span> <span class="keyword">char</span> * source)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/***把source指向的字符串拷贝到destin指向的字符串中***/</span></span><br><span class="line">assert(destin != <span class="literal">NULL</span> &amp;&amp; source != <span class="literal">NULL</span>);  <span class="comment">//检查source和destin的指向是否为空</span></span><br><span class="line"><span class="keyword">char</span> *tmp = destin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">*destin++ = *source++</span><br><span class="line">&#125;<span class="keyword">while</span>(*destin &amp;&amp; *source);  <span class="comment">//将source指向的字符复制给destin指向的字符</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> tmp;  <span class="comment">//返回指向最终结果的指针</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> destination[<span class="number">100</span>] = &#123;<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *source = <span class="string">"abcdefgh"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> *destion = my_strcpy(destination, source);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, destion);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>###2、strncpy函数</p><ol><li><strong>原型</strong>：<code>char * strncpy(char * str1, char * str2, int count)</code></li><li><strong>作用</strong>：把str2指向的前count个字符拷贝到str1指向的字符串中</li><li><strong>代码</strong>：</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> * <span class="title">my_strncpy</span><span class="params">(<span class="keyword">char</span> * str1, <span class="keyword">char</span> * str2, <span class="keyword">int</span> count)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">assert(str1 != <span class="literal">NULL</span>);  <span class="comment">//检验str1是否为空</span></span><br><span class="line"><span class="keyword">while</span>(count &amp;&amp; (*str1++ = *str2++))  <span class="comment">//把str2的前n个字符复制给str1</span></span><br><span class="line">&#123;</span><br><span class="line">count--;  <span class="comment">//长度随着复制的进行而减少</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(count--)</span><br><span class="line">&#123;</span><br><span class="line">*str1++ = <span class="string">'\0'</span>;  <span class="comment">//如果str2的长度小于count那就用NULL填充str1的剩余</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> str1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> destination[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">   <span class="keyword">char</span> *source = <span class="string">"abcdefgh"</span>;</span><br><span class="line">   <span class="keyword">int</span> count = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">   my_strncpy(destination, source, count);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, destination);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>###3、strcmp函数</p><ol><li><strong>原型</strong>：<code>int strcmp(const char * str1, const char * str2)</code></li><li><strong>作用</strong>：比较str1和str2，str1 &gt; str2返回1，str1 == str2返回0</li><li><strong>代码</strong>：</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_strcmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> * str1, <span class="keyword">const</span> <span class="keyword">char</span> * str2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/***比较str1和str2，str1 &gt; str2返回大于0的数，str1 == str2返回0，str1 &lt; str2返回小于0的数***/</span></span><br><span class="line"><span class="keyword">while</span>( ! ((*str1 != *str2) &amp;&amp; str1 != <span class="string">'\0'</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//如果str1和str2的字符相等且字符str1没有到末尾则进入循环</span></span><br><span class="line">str1++;  <span class="comment">//指针str1向后加一位</span></span><br><span class="line">str2++;  <span class="comment">//指针str2向后加一位</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (*str1 - *str2);  <span class="comment">//返回跳出循环的str1和str2当前的字符的差值比较的结果(0或1或-1)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *buf1 = <span class="string">"aaaa"</span>,</span><br><span class="line"> *buf2 = <span class="string">"aaaab"</span>,</span><br><span class="line"> *buf3 = <span class="string">"aaaac"</span>;</span><br><span class="line">    <span class="keyword">int</span> ptr = <span class="number">0</span>;  <span class="comment">//定义变量用来存放my_strcmp返回的值</span></span><br><span class="line"></span><br><span class="line">    ptr = my_strcmp(buf2, buf1);</span><br><span class="line">    <span class="keyword">if</span> (ptr &gt; <span class="number">0</span>)</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"string 2 is bigger than string 1\n"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"string 2 is smaller than string 1\n"</span>);</span><br><span class="line"></span><br><span class="line">    ptr = my_strcmp(buf2, buf3);</span><br><span class="line">    <span class="keyword">if</span> (ptr &gt; <span class="number">0</span>)</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"string 2 is bigger than string 3\n"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"string 2 is smaller than string 3\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>###4、strncmp函数</p><ol><li><strong>原型</strong>：<code>int strncmp(const char * str1, const char * str2, int count)</code></li><li><strong>作用</strong>：比较str1和str2的前n个字符</li><li><strong>代码</strong>：</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_strncmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> * str1, <span class="keyword">const</span> <span class="keyword">char</span> * str2, <span class="keyword">int</span> count)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/***比较str1和str2的前n个字符***/</span></span><br><span class="line"><span class="keyword">if</span>(!count)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(--count &amp;&amp; *str1 &amp;&amp; *str1 == *str2)</span><br><span class="line">&#123;</span><br><span class="line">str1++;</span><br><span class="line">str2++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (*str1 - *str2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *str1 = <span class="string">"China is a nation!"</span>;</span><br><span class="line"><span class="keyword">char</span> *str2 = <span class="string">"French is a nation!"</span>;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">5</span>,</span><br><span class="line">ptr = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">ptr = my_strncmp(str1, str2, count);</span><br><span class="line"><span class="keyword">if</span>(ptr != <span class="number">0</span>)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"str1 is not equal to str2!\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>###5、stricmp函数</p><ol><li><strong>原型</strong>：<code>int my_stricmp(const char *str1, const char *str2)</code></li><li><strong>作用</strong>：不区分大小写的比较str1和str2</li><li><strong>代码</strong>：</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_stricmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str1, <span class="keyword">const</span> <span class="keyword">char</span> *str2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/***不区分大小写的比较str1和str2***/</span></span><br><span class="line"><span class="keyword">char</span> ch1 = <span class="string">'0'</span>,</span><br><span class="line"> ch2 = <span class="string">'0'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((ch1 = (<span class="keyword">unsigned</span> <span class="keyword">char</span>)(*(str1++))) &gt;= <span class="string">'A'</span> &amp;&amp; ch1 &lt;= <span class="string">'Z'</span>)</span><br><span class="line">ch1 += <span class="number">0x20</span>;</span><br><span class="line"><span class="keyword">if</span>((ch2 = (<span class="keyword">unsigned</span> <span class="keyword">char</span>)(*(str2++))) &gt;= <span class="string">'A'</span> &amp;&amp; ch2 &lt;= <span class="string">'Z'</span>)</span><br><span class="line">ch2 += <span class="number">0x20</span>;</span><br><span class="line">&#125;<span class="keyword">while</span>(ch1 &amp;&amp; (ch1 == ch2));  <span class="comment">// 判断是否相等且str1不为'\0'，是则进入循环</span></span><br><span class="line"><span class="keyword">return</span> (ch1 - ch2);  <span class="comment">//返回两个数的大小</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *str1= <span class="string">"ammana"</span>;</span><br><span class="line">    <span class="keyword">char</span> *str2 = <span class="string">"bibi"</span>;</span><br><span class="line">    <span class="keyword">char</span> *str3 = <span class="string">"AMMANA"</span>;</span><br><span class="line">    <span class="keyword">int</span> ptr = <span class="number">0</span>,</span><br><span class="line">    ptr1 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    ptr = my_stricmp(str1, str2);</span><br><span class="line">    <span class="keyword">if</span>(ptr &gt; <span class="number">0</span>)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"str1 bigger than str2!\n"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"str1 smaller than str2!\n"</span>);</span><br><span class="line"></span><br><span class="line">    ptr1 = my_stricmp(str1, str3);</span><br><span class="line">    <span class="keyword">if</span>(ptr1 &gt; <span class="number">0</span>)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"str1 bigger than str3!\n"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ptr1 &lt; <span class="number">0</span>)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"str1 smaller than str3!\n"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"str1 equal to str3!\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>###6、strlen函数</p><ol><li><strong>原型</strong>：<code>unsigned int strlen(const char * str)</code></li><li><strong>作用</strong>：计算str的长度并返回</li><li><strong>代码</strong>：</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">my_strlen</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> * str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/***计算str的长度并返回***/</span></span><br><span class="line"><span class="keyword">unsigned</span> length = <span class="number">0</span>;  <span class="comment">//定义无符号变量length统计str的长度</span></span><br><span class="line"><span class="keyword">while</span>(*str != <span class="string">'\0'</span>)  <span class="comment">//判断str指向的字符是否为'\0'</span></span><br><span class="line">&#123;</span><br><span class="line">length++;  <span class="comment">//长度加1</span></span><br><span class="line">str++;  <span class="comment">//指向的地址向后加1位</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> * str = <span class="string">"abcdefgh"</span>;</span><br><span class="line"><span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">len = my_strlen(str);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, len);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>###7、strcat函数</p><ol><li><strong>原型</strong>：<code>char * strcat(char* destin, const char *source)</code></li><li><strong>作用</strong>：连接两个字符串，将source连接到destin</li><li><strong>代码</strong>：</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> * <span class="title">my_strcat</span><span class="params">(<span class="keyword">char</span>* destin, <span class="keyword">const</span> <span class="keyword">char</span> *source)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/***连接两个字符串，将source连接到destin***/</span></span><br><span class="line"><span class="keyword">char</span> * temp = destin;  <span class="comment">//定义temp指针变量存放destin的地址</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(*temp)  <span class="comment">//判断temp字符串是否读到了'\0'</span></span><br><span class="line">&#123;</span><br><span class="line">temp++;  <span class="comment">//将temp指针读到字符串末尾</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(*temp++ = *source++)<span class="comment">//把source字符串从temp末尾开始复制给temp</span></span><br><span class="line">&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> temp;  <span class="comment">//返回链接好的字符串的指针</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/***对函数Strcat的调用***/</span></span><br><span class="line"><span class="keyword">char</span> destination[<span class="number">25</span>];  <span class="comment">//定义一个大小为25的数组</span></span><br><span class="line">    <span class="keyword">char</span> *space = <span class="string">" "</span>,</span><br><span class="line">     *String = <span class="string">"C++!"</span>,</span><br><span class="line">     *Hello = <span class="string">"Hello"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">strcpy</span>(destination, Hello);  <span class="comment">//进行拷贝</span></span><br><span class="line">    my_strcat(destination, space);</span><br><span class="line">    my_strcat(destination, String);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, destination);  <span class="comment">//打印最终结果</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>###8、strchr函数</p><ol><li><strong>原型</strong>：<code>char * strchr(char * str, const char c)</code></li><li><strong>作用</strong>：查找str中c首次出现的位置，并返回位置或者NULL</li><li><strong>代码</strong>：</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> * <span class="title">my_strchr</span><span class="params">(<span class="keyword">char</span> * str, <span class="keyword">const</span> <span class="keyword">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/***查找str中c首次出现的位置，并返回位置或者NULL***/</span></span><br><span class="line"><span class="keyword">while</span>(*str != <span class="string">'\0'</span> &amp;&amp; *str != c)  <span class="comment">//判断str是否为'\0'且等于c</span></span><br><span class="line">&#123;</span><br><span class="line">str++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断如果str等于c则返回与c匹配的str否则返回NULL</span></span><br><span class="line"><span class="keyword">return</span> (*str == c ? str : <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> * <span class="built_in">string</span> = <span class="string">"abcdefgh"</span>;</span><br><span class="line"><span class="keyword">char</span> c = <span class="string">'d'</span>,</span><br><span class="line"> *ptr = <span class="literal">NULL</span>,  <span class="comment">//存放my_strchr的返回值</span></span><br><span class="line"></span><br><span class="line">ptr = my_strchr(<span class="built_in">string</span>, c);</span><br><span class="line"><span class="keyword">if</span>(ptr)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c\n"</span>, c);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Not Found!\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>###9、strrchr函数</p><ol><li><strong>原型</strong>：<code>char * strrchr(char * str, const char c)</code></li><li><strong>作用</strong>：查找str中c最后一次出现的位置，并返回位置或者NULL</li><li><strong>代码</strong>：</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> * <span class="title">my_strrchr</span><span class="params">(<span class="keyword">char</span> * str, <span class="keyword">const</span> <span class="keyword">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/***查找str中c最后一次出现的位置，并返回位置或者NULL***/</span></span><br><span class="line"><span class="keyword">char</span> * end = str + <span class="built_in">strlen</span>(str);  <span class="comment">//定义指针end存放str的末尾地址</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(*str != *end &amp;&amp; *end != c)  <span class="comment">//判断end没有到头部且没找到和c匹配的字符</span></span><br><span class="line">&#123;</span><br><span class="line">end--;  <span class="comment">//向前进行移动</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(*end == *str &amp;&amp; *end != c)  <span class="comment">//如果没找到则返回NULL</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> end;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> * <span class="built_in">string</span> = <span class="string">"abcdefgh"</span>;</span><br><span class="line"><span class="keyword">char</span> c = <span class="string">'d'</span>,</span><br><span class="line"> *ptr = <span class="literal">NULL</span>,  <span class="comment">//存放my_strchr的返回值</span></span><br><span class="line"></span><br><span class="line">ptr = my_strrchr(<span class="built_in">string</span>, c);</span><br><span class="line"><span class="keyword">if</span>(ptr)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c\n"</span>, c);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Not Found!\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>###10、strrev函数</p><ol><li><strong>原型</strong>：<code>char * strrev(char * str)</code></li><li><strong>作用</strong>：翻转字符串并返回字符串指针</li><li><strong>代码</strong>：</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> * <span class="title">my_strrev</span><span class="params">(<span class="keyword">char</span> * str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/***翻转字符串并返回字符串指针***/</span></span><br><span class="line">assert(str != <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">char</span> *end = str;</span><br><span class="line"><span class="keyword">char</span> *head = str;</span><br><span class="line"><span class="keyword">char</span> temp = <span class="string">'0'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(*end++)</span><br><span class="line">&#123;&#125;;</span><br><span class="line"></span><br><span class="line">end--;  <span class="comment">/* 与end++抵消 */</span></span><br><span class="line">end--;  <span class="comment">/* 回跳过结束符'\0' */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 当head和end未重合时，交换它们所指向的字符 */</span></span><br><span class="line"><span class="keyword">while</span>(head &lt; end)</span><br><span class="line">&#123;</span><br><span class="line">temp = *head;</span><br><span class="line">*head++ = *end;  <span class="comment">/* head向尾部移动 */</span></span><br><span class="line">*end-- = temp;  <span class="comment">/* end向头部移动 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line"><span class="comment">/*第二种实现方式*/</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> * <span class="title">my_strrev</span><span class="params">(<span class="keyword">char</span> * str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/***翻转字符串并返回字符串指针***/</span></span><br><span class="line">assert(str != <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">char</span> *end = <span class="built_in">strlen</span>(str) + str <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">char</span> temp = <span class="string">'0'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(str &lt; end)</span><br><span class="line">&#123;</span><br><span class="line">temp = *str;</span><br><span class="line">*str = *end;</span><br><span class="line">*end = temp;</span><br><span class="line">str++;</span><br><span class="line">end--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/***只能逆置字符数组，而不能逆置字符串指针指向的字符串，</span></span><br><span class="line"><span class="comment">    因为字符串指针指向的是字符串常量，常量不能被修改***/</span></span><br><span class="line"><span class="keyword">char</span> str[] = <span class="string">"Hello World"</span>;  <span class="comment">//定义str数组</span></span><br><span class="line"></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"Before reversal: %s\n"</span>, str);</span><br><span class="line">  my_strrev(str);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"After reversal:  %s\n"</span>, str);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>###11、strdup函数</p><ol><li><strong>原型</strong>：<code>char * strdup(const char * str)</code></li><li><strong>作用</strong>：拷贝字符串到新申请的内存中返回内存指针，否则返回NULL</li><li><strong>代码</strong>：</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> * <span class="title">my_strdup</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> * str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/***拷贝字符串到新申请的内存中返回内存指针，否则返回NULL***/</span></span><br><span class="line"><span class="keyword">char</span> * temp = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="built_in">strlen</span>(str) + <span class="number">1</span>);  <span class="comment">//给temp申请内存</span></span><br><span class="line">assert(str != <span class="literal">NULL</span> &amp;&amp; temp != <span class="literal">NULL</span>);  <span class="comment">//进行检查是否为NULL</span></span><br><span class="line"><span class="built_in">strcpy</span>(temp, str);  <span class="comment">//进行拷贝</span></span><br><span class="line"><span class="keyword">return</span> temp;  <span class="comment">//返回的内存在堆中需要手动释放内存</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *str = <span class="literal">NULL</span>,</span><br><span class="line"> *<span class="built_in">string</span> = <span class="string">"abcde"</span>;</span><br><span class="line"></span><br><span class="line">    str = my_strdup(<span class="built_in">string</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, str);</span><br><span class="line">    <span class="built_in">free</span>(str);  <span class="comment">//释放内存</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>###12、strstr函数</p><ol><li><strong>原型</strong>：<code>char * strstr(const char * str1, char * str2)</code></li><li><strong>作用</strong>：查找str2在str1中出现的位置，找到返回位置，否则返回NULL</li><li><strong>代码</strong>：</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> * <span class="title">my_strstr</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> * str1, <span class="keyword">char</span> * str2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/***查找str2在str1中出现的位置，找到返回位置，否则返回NULL***/</span></span><br><span class="line">assert(str1 != <span class="literal">NULL</span> &amp; str2 != <span class="literal">NULL</span>);  <span class="comment">//检查str1和str2</span></span><br><span class="line"><span class="keyword">int</span> len1 = <span class="built_in">strlen</span>(str1);  <span class="comment">//定len1来获取str1的长度</span></span><br><span class="line"><span class="keyword">int</span> len2 = <span class="built_in">strlen</span>(str2);  <span class="comment">//定len2来获取str2的长度</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(len1 &gt;= len2)  <span class="comment">//必须str1的长度大于str2的长度</span></span><br><span class="line">&#123;</span><br><span class="line">len1--;  <span class="comment">//str1的长度每一次减去一个</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">strncmp</span>(str1, str2, len2))  <span class="comment">//进行比较str2和str1的前len2个字符</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> str2;  <span class="comment">//如果匹配返回str2</span></span><br><span class="line">&#125;</span><br><span class="line">str1++;  <span class="comment">//str1每一次都要向后走一步</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *str1 = <span class="string">"China is a nation!"</span>,</span><br><span class="line"> *str2 = <span class="string">"nation"</span>,</span><br><span class="line"> *ptr = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">   ptr = my_strstr(str1, str2);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"The string is: %s\n"</span>, ptr);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>###13、strpbrk函数</p><ol><li><strong>原型</strong>：<code>char *strpbrk(const char *str1, const char *str2)</code></li><li><strong>作用</strong>：从str1的第一个字符向后检索，直到’\0’，如果当前字符存在于str2中，那么返回当前字符的地址，并停止检索.</li><li><strong>代码</strong>：</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">my_strpbrk</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str1, <span class="keyword">const</span> <span class="keyword">char</span> *str2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/***strpbrk()从str1的第一个字符向后检索，直到'\0'，如果当前字符存在于str2中，</span></span><br><span class="line"><span class="comment">    那么返回当前字符的地址，并停止检索***/</span></span><br><span class="line">assert(str1 != <span class="literal">NULL</span> &amp;&amp; str2 != <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *str3 = str2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(*str1)  <span class="comment">//判断石头人字符串str1是否结束</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(str3 = str2; *str3; ++str3)  <span class="comment">//str2进行循环与str1的自费比较</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(*str1 == *str3)  <span class="comment">//如果相等则进行str1的下一个判断</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(*str3)  <span class="comment">//如果str3结束则结束比较</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">str1++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(*str3 == <span class="string">'\0'</span>)  <span class="comment">//如果str1到末尾则返回NULL</span></span><br><span class="line">str1 = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">char</span>*)str1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> s1[] = <span class="string">"http://see.xidian.edu.cn/cpp/u/xitong/"</span>;</span><br><span class="line">    <span class="keyword">char</span> s2[] = <span class="string">"see"</span>;</span><br><span class="line">    <span class="keyword">char</span> *p = my_strpbrk(s1, s2);</span><br><span class="line">    <span class="keyword">if</span>(p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"The result is: %s\n"</span>,p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Sorry!\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>###14、strspn函数</p><ol><li><strong>原型</strong>：<code>int my_strspn(const char *str1, const char *str2)</code></li><li><strong>作用</strong>：从参数str1字符串的开头计算连续的字符,而这些字符都完全是str2所指字符串中的字符。</li><li><strong>代码</strong>：</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/***strspn()函数检索区分大小写***/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_strspn</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str1, <span class="keyword">const</span> <span class="keyword">char</span> *str2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/***从参数str1字符串的开头计算连续的字符,而这些字符都完全是str2所指字符串中的字符。</span></span><br><span class="line"><span class="comment">简单的说,若strspn()返回的数值为n,则代表字符串str1开头连续有n个字符都是属于字符串str2内的字符***/</span></span><br><span class="line">assert(str1 != <span class="literal">NULL</span> &amp;&amp; str2 != <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *tmp = str1;  <span class="comment">//临时变量存储str1的地址</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *str3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(*tmp)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(str3 = str2; *str3; ++str3)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(*str3 == *tmp)  <span class="comment">//判断str1是否存在str2的字符</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(*str3 == <span class="string">'\0'</span>)  <span class="comment">//如果str2结束则跳出循环str1++</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">tmp++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> tmp - str1;  <span class="comment">//返回差值，即str1共有几个连续的字符是str2中存在的</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> s1[] = <span class="string">"hello world!"</span>;</span><br><span class="line">    <span class="keyword">char</span> s2[] = <span class="string">"i am lihua"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> p = my_strspn(s1, s2);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"The result is:%d\n"</span>, p);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>###15、strtok函数</p><ol><li><strong>原型</strong>：<code>char *my_strtok(char *sou, char *delim)</code></li><li><strong>作用</strong>：将字符串分割成一个个片段</li><li><strong>代码</strong>：</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***因strtok函数内部使用了静态指针，因此它不是线程安全的***/</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> *olds;  <span class="comment">//定义全局变量来进行定位</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">my_strtok</span><span class="params">(<span class="keyword">char</span> *sou, <span class="keyword">char</span> *delim)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/***strtok函数用来将字符串分割成一个个片段，</span></span><br><span class="line"><span class="comment">在参数sou的字符串中发现到参数delim的分割字符时则会将该字符改为\0 字符***/</span></span><br><span class="line"><span class="comment">//参数sou指向欲分割的字符串，参数delim为分割字符串</span></span><br><span class="line"><span class="comment">//在第一次调用时，strtok()必需给予参数sou字符串，往后的调用则将参数sou设置成NULL</span></span><br><span class="line"><span class="comment">//每次调用成功则返回下一个分割后的字符串指针</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> *token = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span>(sou == <span class="literal">NULL</span>)  <span class="comment">//如果sou为空则将上一次的位置给sou</span></span><br><span class="line">&#123;</span><br><span class="line">sou = olds;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*将指针移到第一个非delim的位置*/</span></span><br><span class="line">sou += <span class="built_in">strspn</span>(sou, delim);</span><br><span class="line"><span class="keyword">if</span>(*sou == <span class="string">'\0'</span>)  <span class="comment">//如果是结束符，则将结束符保存并退出函数</span></span><br><span class="line">&#123;</span><br><span class="line">olds = sou;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*获取delim的字符在字符串sou中第一次出现的位置*/</span></span><br><span class="line">token = sou;</span><br><span class="line">sou = <span class="built_in">strpbrk</span>(token, delim);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(sou == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">olds = __rawmemchr (token, <span class="string">'\0'</span>);  <span class="comment">//参考http://dev.wikl.net/89401.html</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">*sou = <span class="string">'\0'</span>;  <span class="comment">//将分隔符的位置用'\0'替换</span></span><br><span class="line">olds = sou + <span class="number">1</span>;  <span class="comment">//将olds指向下一次需要操作的位置</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> token;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//strtok处理的是函数的局部状态信息，所以不能同时解析两个字符串</span></span><br><span class="line"><span class="keyword">char</span> sou[<span class="number">100</span>] = <span class="string">" Micael_SX is so good"</span>;</span><br><span class="line"><span class="keyword">char</span> *delim = <span class="string">" "</span>;</span><br><span class="line"><span class="keyword">char</span> *token;</span><br><span class="line">token = my_strtok(sou, delim);</span><br><span class="line"><span class="keyword">while</span>(token != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, token);</span><br><span class="line">    token = my_strtok(<span class="literal">NULL</span>, delim);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>###16、strsep函数</p><ol><li><strong>原型</strong>：<code>char *my_strsep(char **stringp, const char *delim)</code></li><li><strong>作用</strong>：将字符串分割成一个个片段</li><li><strong>代码</strong>：</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************************************************</span></span><br><span class="line"><span class="comment">a：如果*stringp为NULL，则该函数不进行任何操作，直接返回NULL；</span></span><br><span class="line"><span class="comment">b：strsep每次都是从*stringp指向的位置开始搜索，搜索到任一分割字符之后，将其置为’\0’，</span></span><br><span class="line"><span class="comment">   并使*stringp指向它的下一个字符。如果找不到任何分割字符，则将*stringp置为NULL。</span></span><br><span class="line"><span class="comment">c：strsep内部没有使用静态指针，因而strsep是线程安全的。</span></span><br><span class="line"><span class="comment">d：strsep返回的子串有可能是空字符串，实际上，就是因为strtok无法返回空子串，才引入的strsep函数。</span></span><br><span class="line"><span class="comment">   不过strtok符合C89/C99标准，因而移植性更好。但strsep却不是。</span></span><br><span class="line"><span class="comment">e: "二八定律",即80%情况下分隔符只有一个字节，使用strchr完成,20%情况有多个字节,调用strpbrk完成</span></span><br><span class="line"><span class="comment">*************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">my_strsep</span><span class="params">(<span class="keyword">char</span> **stringp, <span class="keyword">const</span> <span class="keyword">char</span> *delim)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/***strsep函数用来将字符串分割成一个个片段***/</span></span><br><span class="line"><span class="keyword">char</span> *begin,</span><br><span class="line"> *end;</span><br><span class="line">begin = *stringp;</span><br><span class="line"><span class="keyword">if</span>(begin == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*delim分隔符是单个字符的情况是非常频繁的，因此不需要使用代价昂贵的strpbrk函数</span></span><br><span class="line"><span class="comment">     而只需要调用strchr就能解决*/</span></span><br><span class="line"><span class="keyword">if</span>(delim[<span class="number">0</span>] == <span class="string">'\0'</span> || delim[<span class="number">1</span>] == <span class="string">'\0'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> ch = delim[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">if</span>(ch == <span class="string">'\0'</span>)</span><br><span class="line">&#123;</span><br><span class="line">end = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(*begin == ch)</span><br><span class="line">&#123;</span><br><span class="line">end = begin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(*begin == <span class="string">'\0'</span>)</span><br><span class="line">&#123;</span><br><span class="line">end = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">end = <span class="built_in">strchr</span>(begin + <span class="number">1</span>, ch);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/*delim有两个字符以上,才调用strpbrk*/</span></span><br><span class="line">end = <span class="built_in">strpbrk</span>(begin, delim);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(end)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/*用0封闭这个token；返回stringp，指向一个null指针*/</span></span><br><span class="line">*end++ = <span class="string">'\0'</span>;</span><br><span class="line">*stringp = end;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/*没有出现delim，这是最后一个token*/</span></span><br><span class="line">*stringp = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> begin;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> source[] = <span class="string">"hello, world! welcome to China!"</span>;</span><br><span class="line">    <span class="keyword">char</span> delim[] = <span class="string">" ,!"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> *s = strdup(source);</span><br><span class="line">    <span class="keyword">char</span> *token;</span><br><span class="line">    <span class="keyword">for</span>(token = my_strsep(&amp;s, delim); token != <span class="literal">NULL</span>; token = my_strsep(&amp;s, delim))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(token);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"+"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>###参考文章<br><strong>链接:</strong></p><ol><li><a href="http://blog.csdn.net/kangroger/article/details/24383571" target="_blank" rel="noopener">http://blog.csdn.net/kangroger/article/details/24383571</a></li><li><a href="http://zheng-ji.info/blog/2014/02/05/shen-ru-strtokhan-shu/" target="_blank" rel="noopener">http://zheng-ji.info/blog/2014/02/05/shen-ru-strtokhan-shu/</a></li><li><a href="http://blog.csdn.net/gqtcgq/article/details/48399957" target="_blank" rel="noopener">http://blog.csdn.net/gqtcgq/article/details/48399957</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>127.0.0.1和0.0.0.0分析</title>
      <link href="/2017/10/13/127.0.0.1%E5%92%8C0.0.0.0/"/>
      <url>/2017/10/13/127.0.0.1%E5%92%8C0.0.0.0/</url>
      
        <content type="html"><![CDATA[<h4 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h4><ul><li><p>IP地址表示:</p><blockquote><p>-IP地址由两个部分组成，net-id和host-id，即网络号和主机号。</p><blockquote><ul><li>net-id:表示ip地址所在的网络号。</li><li>host-id：表示ip地址所在网络中的某个主机号码。</li></ul></blockquote></blockquote><blockquote><p>-<code>IP-address ::=  { &lt;Network-number&gt;, &lt;Host-number&gt; }</code></p></blockquote>  <a id="more"></a></li><li><p>IP地址分类:</p><blockquote><p>IP地址一共分为5类，即A～E，它们分类的依据是网络号和主机号，全0和全1的都保留不用。</p><blockquote><ul><li>A类地址：第一个字节为网络号，后三个字节为主机号。该类IP地址的最前面为<code>“0”</code>，所以地址的网络号取值于<code>1~126</code>之间。一般用于大型网络。</li><li>B类地址：前两个字节为网络号，后两个字节为主机号。该类IP地址的最前面为<code>“10”</code>，所以地址的网络号取值于<code>128~191</code>之间。一般用于中等规模网络。</li><li>C类地址：前三个字节为网络号，最后一个字节为主机号。该类IP地址的最前面为<code>“110”</code>，所以地址的网络号取值于<code>192~223</code>之间。一般用于小型网络。</li><li>D类地址：是多播地址。该类IP地址的最前面为<code>“1110”</code>，所以地址的网络号取值于<code>224~239</code>之间。一般用于多路广播用户。</li><li>E类地址：是保留地址。该类IP地址的最前面为<code>“1111”</code>，所以地址的网络号取值于<code>240~255</code>之间。<br>其中，ABC三类地址为单播地址（unicast),用于一对一通信，是最常用的。</li></ul></blockquote></blockquote></li><li><p>特殊IP地址:</p><blockquote><ul><li><code>{0,0}</code>:网络号和主机号都全部为0，表示“本网络上的本主机”，只能用作源地址。</li><li><code>{0，host-id}</code>:本网络上的某台主机。只能用作源地址。</li><li><code>{-1,-1}</code>：表示网络号和主机号的所有位上都是1（二进制），用于本网络上的广播，只能用作目的地址，发到该地址的数据包不能转发到源地址所在网络之外。</li><li><code>{net-id,-1}</code>:直接广播到指定网络的所有子网络上。只能用作目的地址。</li><li><code>{net-id,subnet-id,-1}</code>:直接广播到指定网络的指定子网络上。只用作目的地址。</li><li><code>{net-id,-1,-1}</code>:直接广播到指定网络的所有子网络上。只能用作目的地址。</li><li><code>{127，}</code>:即网络号为127的任意ip地址。都是内部主机回环地址(loopback),永远都不能出现在主机外部的网络中。</li></ul></blockquote></li></ul><h4 id="二、127-0-0-1"><a href="#二、127-0-0-1" class="headerlink" title="二、127.0.0.1"></a>二、127.0.0.1</h4><blockquote><p><code>127.0.0.1</code>是一个回环地址，这个地址也是给本机<code>loop back</code>接口所预留的IP地址，但是并不表示”本机”。</p></blockquote><ul><li><p>测试使用：</p><blockquote><p>-收到<code>127.0.0.1</code>的响应表示主机的TCP/IP安装成功。<br>-此方法只是测试网络层的ip联通性。此响应来自网络层。<br>-无法测试出具体TCP/IP的配置(地址、掩码、和网关)是否正确，也无法测试出网卡是否正常，因为数据在离开IP层之前就已经被送回去了。</p></blockquote></li><li><p>本机进程间的通信：</p><blockquote><p>-如<code>apache+php+mysql</code>这样的应用环境，应用程序与mysql数据库同时存在于同一个系统上面，常用环回地址<code>127.0.0.1</code>做套接字的ip地址。<br>-使用环回地址主要的原因是方便和稳定，如：网络接口的地址可能因为某种原因被更改（如服务器搬迁到别的地理位置），或者应用被迁移到另外的系统，导致ip改变，而使用环回地址就不会受ip地址改变的影响。</p></blockquote></li><li><p>DDos攻击防御：</p><blockquote><p>网站收到DDos攻击之后，将域名A记录到127.0.0.1，即让攻击者自己攻击自己。</p></blockquote></li></ul><h4 id="三、0-0-0-0"><a href="#三、0-0-0-0" class="headerlink" title="三、0.0.0.0"></a>三、0.0.0.0</h4><ul><li><p>说明：<code>0.0.0.0</code>表示整个网络(此网络上的此主机的源地址)</p><ul><li><p>RFC:<br><code>0.0.0.0/8 - Addresses in this block refer to source hosts on &quot;this&quot;network. Address 0.0.0.0/32 may be used as a source address for thishost on this network; other addresses within 0.0.0.0/8 may be used torefer to specified hosts on this network ([RFC1122], Section 3.2.1.3).</code></p><blockquote><ul><li><code>0.0.0.0/8</code>可以表示本网络中的所有主机</li><li><code>0.0.0.0/32</code>可以用作本机的源地址</li><li><code>0.0.0.0/8</code>也可表示本网络上的某个特定主机</li></ul></blockquote></li><li><p>注：在路由器配置中可用<code>0.0.0.0/0</code>表示默认路由，作用是帮助路由器发送路由表中无法查询的包。如果设置了全零网络的路由，路由表中无法查询的包都将送到全零网络的路由中去。</p></li></ul></li><li><p>作用：</p><blockquote><ul><li>当一台主机还没有被(DHCP)分配一个IP地址的时候，用于表示主机本身。</li><li>用作默认路由，表示”任意IPV4主机”。</li><li>用来表示目标机器不可用。</li><li>用作服务端，表示本机上的任意IPV4地址。</li></ul></blockquote></li></ul><h4 id="四、总结："><a href="#四、总结：" class="headerlink" title="四、总结："></a>四、总结：</h4><ul><li>127.0.0.1 是一个环回地址。并不表示“本机”。</li><li>0.0.0.0才是真正表示“本网络中的本机”。</li><li>一般我们在服务端绑定端口的时候可以选择绑定到0.0.0.0，这样我的服务访问方就可以通过我的多个ip地址访问我的服务(只需要内网访问的服务，可以只绑定内网地址，否则会出现内网能访问，外网不能访问)</li></ul><h4 id="五、参考："><a href="#五、参考：" class="headerlink" title="五、参考："></a>五、参考：</h4><ul><li>链接：<br>  <a href="https://tools.ietf.org/html/rfc5735#section-3" target="_blank" rel="noopener">https://tools.ietf.org/html/rfc5735#section-3</a><br>  <a href="https://en.wikipedia.org/wiki/0.0.0.0" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/0.0.0.0</a><br>  <a href="https://fossbytes.com/ip-address-0-0-0-0-meaning-default-route-uses/" target="_blank" rel="noopener">https://fossbytes.com/ip-address-0-0-0-0-meaning-default-route-uses/</a><br>  <a href="http://baike.baidu.com/item/127.0.0.1" target="_blank" rel="noopener">http://baike.baidu.com/item/127.0.0.1</a><br>  <a href="http://www.cnblogs.com/hnrainll/archive/2011/10/13/2210101.html" target="_blank" rel="noopener">http://www.cnblogs.com/hnrainll/archive/2011/10/13/2210101.html</a><br>  <a href="http://blog.onlycatch.com/post/7e371ca28621" target="_blank" rel="noopener">http://blog.onlycatch.com/post/7e371ca28621</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Others </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Sublime Text3--打造完美的Markdown编辑器</title>
      <link href="/2017/10/11/Markdown%E7%BC%96%E8%BE%91%E5%99%A8/"/>
      <url>/2017/10/11/Markdown%E7%BC%96%E8%BE%91%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><ul><li><strong>注意：</strong>由于在前面已经讲过了插件的安装和一些配置、操作等，这里就不在赘述。<blockquote><p>不了解的请移步：<a href="http://blog.csdn.net/xingerr/article/details/70231554" title="Sublime Text3--插件安装" target="_blank" rel="noopener">Sublime Text3–插件安装</a></p></blockquote></li></ul><a id="more"></a><h4 id="所需的插件"><a href="#所需的插件" class="headerlink" title="所需的插件"></a>所需的插件</h4><ul><li><p><a href="https://packagecontrol.io/packages/MarkdownEditing" title="Markdown Editing" target="_blank" rel="noopener">Markdown Editing</a></p><blockquote><p>提供辅助提示，比如输入 <em>，编辑器应当自动补上一个 </em>，并使光标保持在两 * 之间，</p></blockquote><blockquote><p>又比如应当支持选中一段文字快捷键添加链接</p></blockquote></li><li><p><a href="https://packagecontrol.io/packages/Markdown%20Extended" title="Markdown Extended" target="_blank" rel="noopener">Markdown Extended</a></p><blockquote><p>让 Markdown 格式在 Sublime 中支持高亮</p></blockquote></li><li><p><a href="https://packagecontrol.io/search/Monokai%20Extended" title="Monokai Extended" target="_blank" rel="noopener">Monokai Extended</a></p><blockquote><p>提供主题支持 Markdown 的高亮（包括 Markdown 代码块内的代码）</p></blockquote></li><li><p><a href="https://packagecontrol.io/packages/MarkdownTOC" title="MarkdownTOC" target="_blank" rel="noopener">MarkdownTOC</a></p><blockquote><p>编写 heading 较多的长文档，希望能够自动生成目录方便跳转，MarkdownTOC 可以帮助我们实现</p></blockquote></li><li><p><a href="https://packagecontrol.io/packages/Table%20Editor" title="Table Editor" target="_blank" rel="noopener">Table Editor</a></p><blockquote><p>键入表格是个体力活，Table Editor 可以帮助我们减轻工作量</p></blockquote></li><li><p><a href="https://packagecontrol.io/packages/OmniMarkupPreviewer" title="OmniMarkupPreviewer" target="_blank" rel="noopener">OmniMarkupPreviewer</a></p><blockquote><p>提供了LaTex的数学公式渲染的支持，用浏览器打开以后支持浏览器的实时渲染和更新预览</p></blockquote></li></ul><h4 id="插件的配置-默认都是在-Setting-User"><a href="#插件的配置-默认都是在-Setting-User" class="headerlink" title="插件的配置(默认都是在:Setting - User)"></a>插件的配置(默认都是在:Setting - User)</h4><ul><li>[MarkdownTOC]:</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"default_autolink"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"default_bracket"</span>: <span class="string">"round"</span>,</span><br><span class="line">  <span class="attr">"default_depth"</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>[OmniMarkupPreviewer]</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"renderer_options-MarkdownRenderer"</span>:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"extensions"</span>: [<span class="string">"tables"</span>, <span class="string">"fenced_code"</span>, <span class="string">"codehilite"</span>],</span><br><span class="line">    <span class="attr">"parser"</span>: <span class="string">"markdown"</span>,</span><br><span class="line">    <span class="attr">"enabled_parsers"</span>: [<span class="string">"markdown"</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>注意：</strong>这个插件在配置完成后，有可能会出现无法使用，并且报错：</li></ul><p><code>404错误预览...“buffer_id（29）无效（关闭或不支持的文件格式）”</code><br>(我就是这个错)</p><blockquote><ul><li>这里给出解决方案(上面的配置文件已经好了)：<blockquote><ul><li>如上面的配置去掉了原文件 <code>&quot;extensions&quot;: [&quot;tables&quot;, &quot;strikeout&quot;, &quot;fenced_code&quot;, &quot;codehilite&quot;]</code>的<strong>“strikeout”</strong></li><li>找到python-markdown Sublime Text3的包。<blockquote><ul><li>Mac: <code>subl &quot;/Users/&lt;username&gt;/Library/Application Support/Sublime Text 3/Packages/OmniMarkupPreviewer/OmniMarkupLib/Renderers/libs/mdx_strikeout.py&quot;</code></li></ul></blockquote></li></ul></blockquote></li></ul></blockquote><blockquote><blockquote><ul><li>用以下makeExtension()方法替换方法：<br><code>def makeExtension(*args, **kwargs):  return StrikeoutExtension(*args, **kwargs)</code></li><li>保存，退出并重新加载升级文本。</li></ul></blockquote></blockquote><blockquote><ul><li>链接：<a href="https://github.com/timonwong/OmniMarkupPreviewer/issues/85" target="_blank" rel="noopener">https://github.com/timonwong/OmniMarkupPreviewer/issues/85</a></li></ul></blockquote><ul><li><p>[OmniMarkupPreviewer]续：</p><ul><li>打开OmniMarkupPreviewer的默认配置文件Setting-Default</li><li>查看参数：<br><code>&quot;server_host&quot;: &quot;127.0.0.1&quot;,</code> (开启预览服务的 IP 地址, 默认为 localhost)<br><code>&quot;html_template_name&quot;: &quot;github&quot;,</code> (预览使用的模板名称，默认为 Github)<br><code>&quot;browser_command&quot;: [],</code> (预览默认为跟随系统默认浏览器，[“open”, “-a”, “Google Chrome”, “{url}”]亦可利用这样的格式进行指定)<br><code>&quot;ignored_renderers&quot;: [&quot;LiterateHaskellRenderer&quot;],</code>(忽略/关闭的标记语言渲染器)<br><code>&quot;mathjax_enabled&quot;: false,</code>(公式的渲染使用了MathJax库，所以需要在OmniMarkupPreviewer的设置中，将”mathjax_enabled”设置为“true”)</li></ul></li></ul><h4 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h4><ul><li><p>[MarkdownEditing]</p><blockquote><p>Option + Command + K - 插入链接；<br>Option + Command + V - 粘贴为链接格式；<br>Shift + Command + K - 插入图片。</p></blockquote></li><li><p>快捷键设定</p><blockquote><p>自己没有其他的快捷键，所以就不写了<br>大家可以自己设定快捷键(自行Google)</p></blockquote></li></ul><h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><ul><li><a href="http://webcache.googleusercontent.com/search?q=cache:http://www.itwendao.com/article/detail/75735.html" target="_blank" rel="noopener">http://webcache.googleusercontent.com/search?q=cache:http://www.itwendao.com/article/detail/75735.html</a></li><li><a href="https://blog.mariusschulz.com/2014/12/16/how-to-set-up-sublime-text-for-a-vastly-better-markdown-writing-experience" target="_blank" rel="noopener">https://blog.mariusschulz.com/2014/12/16/how-to-set-up-sublime-text-for-a-vastly-better-markdown-writing-experience</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>解决锐捷校园网环境下VMware虚拟机无法上网问题</title>
      <link href="/2017/10/11/VMware%E6%97%A0%E6%B3%95%E4%B8%8A%E7%BD%91/"/>
      <url>/2017/10/11/VMware%E6%97%A0%E6%B3%95%E4%B8%8A%E7%BD%91/</url>
      
        <content type="html"><![CDATA[<h4 id="1-介绍："><a href="#1-介绍：" class="headerlink" title="1.介绍："></a>1.介绍：</h4><ul><li><p>在介绍笨方法之前首先得说一下VMware虚拟机无法上网的原因，虚拟机要想要上网主机里的VMnetDHCP和VMware NAT Service就必须要开启，可能很多人都没留意这个问题，因为这两个服务好像装好软件之后是默认开启的，在其他网络环境下虚拟机直接选择NAT方式就可以上网了，所以网上请教很多大牛时他们对我们的虚拟机无法上网感到非常费解呀。</p></li><li><p>不过在校园网的话，情况又不一样了，我不知道其他的校园网客户端有没有这种情况，可是使用锐捷校园网客户端的话会自动阻断VMware NAT Service服务的开启，也就是说即使你手动开启了VMware NAT Service过了一会又会被自动关闭，这样就导致不管在虚拟机里面怎么设置都无法上网（注意这里使用的NAT方式，或许其他连接方式有新的解决方法，这里只说NAT方式）。</p></li></ul><a id="more"></a><ul><li><p>如果有人对虚拟机的三种连接方式不是很了解的，可以看看这篇博客: <a href="http://blog.csdn.net/collection4u/article/details/14127671" target="_blank" rel="noopener">http://blog.csdn.net/collection4u/article/details/14127671</a> 。</p></li><li><p>那么知道是因为VMware NAT Service服务自动关闭的话解决的方法自然是让其一直打开，（VirtualBox在锐捷下都是可以上网的），最后想到使用windows批处理的方法，这其实真的是一个笨方法来的，只要写一个无限循序语句判断VMware NAT Service服务是否开启，没有开启就打开，一直循环判断，我试了一下效果，这样虚拟机是可以一直上网的，中间的断网也是不到1s，还是可以接受的，聊胜于无啦。</p></li></ul><h4 id="2-笨方法1："><a href="#2-笨方法1：" class="headerlink" title="2.笨方法1："></a>2.笨方法1：</h4><p>(1)新建一个记事本文件，文件名后缀改成:.bat<br>(2)用记事本打开或者其他编辑工具也可以<br>(3)把下面的代码复制进去后保存：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">:first</span><br><span class="line">for /f &quot;skip=3 tokens=4&quot; %%i in (&apos;sc query &quot;VMware NAT Service&quot;&apos;) do set &quot;zt=%%i&quot; &amp;goto :second</span><br><span class="line"></span><br><span class="line">:second</span><br><span class="line">if /i &quot;%zt%&quot;==&quot;RUNNING&quot; (</span><br><span class="line">echo 该服务已经在运行</span><br><span class="line">) else (</span><br><span class="line">echo 该服务处于停止状态</span><br><span class="line">net start &quot;VMware NAT Service&quot;</span><br><span class="line">)</span><br><span class="line">ping 127.0.0.1 -n 25&gt;nul</span><br><span class="line">goto :first</span><br></pre></td></tr></table></figure><p><strong>注意格式，最好保持相同状态，保存退出。</strong></p><p>(4)使用管理员权限打开该文件，然后让其一直运行不要关闭，直到你不使用虚拟机上网为止。<br>(5)注意虚拟机VMware装好之后默认的就是NAT方式上网，打开了这个文件之后虚拟机不用做任何设置，如果你更改过，<br>    请到虚拟机的setting里面把连接方式改回NAT，网上很多关于设置这些的资料，可以去找找。</p><h4 id="3-笨办法2"><a href="#3-笨办法2" class="headerlink" title="3.笨办法2:"></a>3.笨办法2:</h4><p>(1)打开任务管理器，找到进程，第一个就是8021.exe然后结束此进程<br>(2)打开VMware NAT Service服务，然后就不用管了，这样就可以直接上网</p><ul><li><p><strong>说明</strong>：结束的8021的进程是锐捷客户端的进程，但是不影响锐捷客户端的上网功能，也就是说要不要这个进程都可以。</p></li><li><p>本内容只针对锐捷校园网下虚拟机无法上网问题、VMware NAT Service自动关闭情况做出的解决方法，有错漏之处或者有更好方法欢迎回复交流，希望以后有大牛可以解决锐捷自动关闭VMware NAT Service的问题笨方法解决锐捷校园网环境下VMware虚拟机无法上网问题（centos试用上网成功）</p></li></ul><h4 id="4-笨办法3："><a href="#4-笨办法3：" class="headerlink" title="4.笨办法3："></a>4.笨办法3：</h4><p>(1)下载安装WinHex<br>(2)修改客户端，把VMware NAT Service改成了MMware NAT Service的(或者你自己认为没用的都可以)，<br>    于是VMware NAT Service服务就不会被禁用了</p><h4 id="5-参考文章"><a href="#5-参考文章" class="headerlink" title="5.参考文章"></a>5.参考文章</h4><ul><li><p>说明：本人参考网上的文章，根据自己的经验与探索总结出此文章，内容有原创有转载。</p></li><li><p>链接：<br><a href="http://blog.sina.com.cn/s/blog_66cd08930102w28v.html#cmt_3092817" target="_blank" rel="noopener">http://blog.sina.com.cn/s/blog_66cd08930102w28v.html#cmt_3092817</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VMware </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>wait函数和waitpid函数</title>
      <link href="/2017/10/11/wait%E5%87%BD%E6%95%B0/"/>
      <url>/2017/10/11/wait%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="僵尸进程"><a href="#僵尸进程" class="headerlink" title="僵尸进程"></a>僵尸进程</h4><ul><li><p>说明</p><ul><li>子进程结束但是没有完全释放内存(在内核中的task_struct没有释放)，该进程就会成为僵尸进程</li><li>当僵尸进程的父进程结束后就会被init进程(1号进程)接管，最终被回收</li></ul></li><li><p>僵尸进程的危害</p><ul><li><p>如果你不处理僵尸进程的话，那么保留的那段信息就不会释放，其进程号就会一定被占用，但是系统所能使用的进程号是有限的，如果大量的产生僵尸进程，将因为没有可用的进程号而导致系统不能产生新的进程</p><a id="more"></a></li></ul></li><li><p>避免僵尸进程</p><ul><li>让僵尸进程的父进程来回收，父进程每隔一段时间来查询子进程是否结束并被回收，调用wait或者waitpid函数，通知内核释放僵尸进程</li><li>采用信号SIGCHLD通知处理，并在信号处理程序中调用wait函数</li><li>让僵尸进程成为孤儿进程，并有init进程回收</li></ul></li></ul><h4 id="避免僵尸进程方法一说明"><a href="#避免僵尸进程方法一说明" class="headerlink" title="避免僵尸进程方法一说明"></a>避免僵尸进程方法一说明</h4><ul><li>头文件</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li><p>区别</p><ul><li>在一个进程终止前，wait 使其调用者阻塞</li><li>waitpid 函数有一个选择项，可以使调用者不阻塞</li><li>waitpid 等待一个指定的子进程，wait 等待所有的子进程，返回任一子进程的终止状态</li></ul></li><li><p>参数</p><ul><li><p><strong>status参数</strong></p><ul><li>为空时，代表任意状态结束的子进程，若不为空，则代表指定状态结束的子进程</li></ul></li><li><p><strong>options参数</strong></p><ul><li><strong>WNOHANG：</strong>若由pid指定的子进程没有退出则立即返回，则waitpid不阻塞，此时返回值为0</li><li><strong>WUNTRACED：</strong>若某实现支持作业控制，则由pid指定的任一子进程状态已暂停，且其状态自暂停以来还未报告过，则返回其状态</li></ul></li><li><p>检查 wait 和 waitpid 函数返回终止状态的宏(前面判断，后面获得状态码)</p><ul><li><strong>WIFEXITED/WEXITSTATUS(status)</strong>：若为正常终止子进程的返回的状态，则为真</li><li><strong>WIFSIGNALED/WTERMSIG(status)</strong>：若为异常终止子进程的返回的状态，则为真(接到一个不能捕捉的信号)</li><li><strong>WIFSTOPED/WSTOPSIG(status)</strong>：若为当前暂停子进程的返回的状态，则为真(如果当前进程在终止前暂停过，则获得暂停的状态码)</li></ul></li></ul></li></ul><h4 id="wait函数"><a href="#wait函数" class="headerlink" title="wait函数"></a>wait函数</h4><ul><li>原型： <code>pid_t wait(int *status)</code></li><li>返回：成功返回子进程ID，出错返回-1</li><li>作用：等待子进程退出并回收，防止僵尸进程产生</li></ul><h4 id="waitpid函数"><a href="#waitpid函数" class="headerlink" title="waitpid函数"></a>waitpid函数</h4><ul><li>原型：<code>pid_t waitpid(pid_t pid, int *status, int options)</code></li><li>返回：成功返回子进程ID，出错返回-1</li><li>功能：wait函数的非阻塞版本</li><li>pid参数：<ul><li>pid == -1：等待任一子进程，与功能 wait 相等</li><li>pid &gt; 0：等待其进程ID与 pid 相等的子进程</li><li>pid == 0：等待其组ID等于调用进程的组ID的任一子进程</li><li>pid &lt; -1：等待其组ID等于 pid 的绝对值的任一子进程</li></ul></li></ul><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">out_status</span><span class="params">(<span class="keyword">int</span> status)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(WIFEXITED(status))&#123;</span><br><span class="line">        <span class="comment">//正常终止</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"normal exit: %d\n"</span>, WEXITSTATUS(status));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(WIFSIGNALED(status))&#123;</span><br><span class="line">        <span class="comment">//异常终止</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"abnormal term: %d\n"</span>, WTERMSIG(status));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(WIFSTOPPED(status))&#123;</span><br><span class="line">        <span class="comment">//终止前暂停或者等待过</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"stopped sig: %d\n"</span>, WSTOPSIG(status));</span><br><span class="line">        <span class="comment">//kill -19 测试结果</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"unknow sig\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> status;</span><br><span class="line">    <span class="keyword">pid_t</span> pid;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>((pid = fork()) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        perror(<span class="string">"fork error"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(pid == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"pid: %d, ppid: %d\n"</span>, getpid(), getppid());</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">3</span>); <span class="comment">//子进程终止运行</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//父进程阻塞，等待子进程结束并回收</span></span><br><span class="line">    wait(&amp;status);</span><br><span class="line">    out_status(status);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"--------------------------\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>((pid = fork()) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        perror(<span class="string">"fork error"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(pid == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"pid: %d, ppid: %d\n"</span>, getpid(), getppid());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">3</span>, j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> k = i / j;  <span class="comment">//异常测试</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"k: %d\n"</span>, k);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    wait(&amp;status);</span><br><span class="line">    out_status(status);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"--------------------------\n"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>((pid = fork()) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        perror(<span class="string">"fork error"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(pid == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"pid: %d, ppid: %d\n"</span>, getpid(), getppid());</span><br><span class="line">        pause();  <span class="comment">//暂停测试</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        <span class="comment">//暂停测试需要用waitpid来捕获暂停的信号，并返回</span></span><br><span class="line">        pid = waitpid(pid, &amp;status, WNOHANG | WUNTRACED);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(pid == <span class="number">0</span>)&#123;</span><br><span class="line">            sleep(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">while</span>(pid == <span class="number">0</span>);</span><br><span class="line">    out_status(status);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>运行测试</p><ul><li><p>运行程序</p><p>  <img src="https://raw.githubusercontent.com/McXing/Pictures/master/wait/%E6%B5%8B%E8%AF%951.png" alt="测试" title="测试"></p></li><li><p>发送信号给程序</p><p>  <img src="https://raw.githubusercontent.com/McXing/Pictures/master/wait/%E6%B5%8B%E8%AF%952.png" alt="测试" title="测试"></p></li><li><p>测试结果</p><p>  <img src="https://raw.githubusercontent.com/McXing/Pictures/master/wait/%E6%B5%8B%E8%AF%953.png" alt="测试" title="测试"></p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Function </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>TCP三次握手</title>
      <link href="/2017/10/10/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B/"/>
      <url>/2017/10/10/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B/</url>
      
        <content type="html"><![CDATA[<h4 id="TCP特性"><a href="#TCP特性" class="headerlink" title="TCP特性"></a>TCP特性</h4><ul><li><p>说明：</p><blockquote><ul><li>TCP提供一种面向连接的、可靠的字节流服务</li><li>在一个TCP连接中，仅有两方进行彼此通信。广播和多播不能用于TCP</li><li>TCP使用校验和，确认和重传机制来保证可靠传输</li><li>TCP给数据分节(给每一个传送的数据字节都编号)进行排序，并使用累积确认保证数据的顺序不变和非重复</li><li>TCP使用滑动窗口机制来实现流量控制，通过动态改变窗口的大小进行拥塞控制</li></ul></blockquote></li><li><p>注意：</p><blockquote><p>TCP 并不能保证数据一定会被对方接收到，因为这是不可能的。TCP 能够做到的是，如果有可能，就把数据递送到接收方，否则就（通过放弃重传并且中断连接）通知用户。因此准确说 TCP 也不是 100% 可靠的协议，它所能提供的是数据的可靠递送或故障的可靠通知。</p></blockquote></li></ul><a id="more"></a><h4 id="TCP首部"><a href="#TCP首部" class="headerlink" title="TCP首部"></a>TCP首部</h4><ul><li><p>说明：</p><blockquote><ul><li>TCP（Transmission Control Protocol，传输控制协议）是一种面向连接的、可靠的、基于字节流的通信协议，数据在传输前要建立连接，传输完毕后还要断开连接。</li><li>客户端在收发数据前要使用 connect() 函数和服务器建立连接。建立连接的目的是保证IP地址、端口、物理链路等正确无误，为数据的传输开辟通道。</li><li>TCP建立连接时要传输三个数据包，俗称三次握手（Three-way Handshaking）。</li></ul></blockquote><p>  <img src="https://raw.githubusercontent.com/McXing/Pictures/master/%E6%8F%A1%E6%89%8B/%E6%8A%A5%E6%96%87%E9%A6%96%E9%83%A8.png" alt="TCP/IP" title="TCP/IP"></p><ul><li><p>解释：</p><ul><li>序号：seq（Sequence）序号，占32位，用来标识从TCP源端向目的端发送的字节流，发起方发送数据时对此进行标记。</li><li>确认序号：ack（Acknowledge）序号，占32位，只有ACK标志位为1时，确认序号字段才有效，ack=seq+1。</li><li><p>标志位：每个标志位占用1Bit，共6个，即URG、ACK、PSH、RST、SYN、FIN等，具体含义如下：</p><ul><li>URG：紧急指针（urgent pointer）有效。</li><li>ACK(Acknowledge)：确认序号有效。</li><li>PSH(Push)：接收方应该尽快将这个报文交给应用层。</li></ul><ol start="4"><li>RST(Reset)：重置连接。</li><li>SYN(Synchronous)：发起一个新连接。</li><li>FIN(Finish)：释放一个连接。</li></ol></li><li><p>需要注意的是：</p><ul><li>不要将确认序号 ack(表示确认信息)与标志位中的 ACK(为1表示确认有效)搞混了。</li><li>确认方 ack等于发起方 seq+1，两端配对。</li></ul></li></ul></li></ul></li></ul><h4 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h4><ul><li><p>说明：</p><blockquote><ul><li>所谓三次握手(Three-way Handshake)，是指建立一个 TCP 连接时，需要客户端和服务器总共发送3个包。</li><li>三次握手的目的是连接服务器指定端口，建立 TCP连接，并同步连接双方的序列号和确认号，交换 TCP窗口大小信息。在 socket 编程中，客户端执行 connect() 时。将触发三次握手。</li></ul></blockquote><p>  <img src="https://raw.githubusercontent.com/McXing/Pictures/master/%E6%8F%A1%E6%89%8B/%E6%8F%A1%E6%89%8B%E4%B8%89%E6%AC%A1.png" alt="三次握手" title="三次握手"></p></li><li><p>解释：</p><ul><li><p>第一次握手(SYN=1, seq=x):</p><blockquote><ul><li>客户端发送一个 TCP的 SYN 标志位置1的包，指明客户端打算连接的服务器的端口(请求同步)，并选择序号 seq=x，表明传送数据时的第一个数据字节的序号是 x。(seq是个随机值)</li><li>发送完毕后，客户端进入 SYN_SEND 状态。</li></ul></blockquote></li><li><p>第二次握手(SYN=1, ACK=1, seq=y, ack=x+1):</p><blockquote><ul><li>服务器的TCP收到连接请求报文段后，如同意，则发回确认包(ACK)应答。即 SYN 标志位和 ACK 标志位均为1。服务器端选择自己 ISN 序列号(随机值y)，放到seq 域里，同时将确认序号ack设置为客户的 ISN 加1，即 x+1(即回复对方确认收到了序列号为x开始的包，且希望下次的数据从x+1的位置开始)。</li><li>发送完毕后，服务器端进入 SYN_RCVD 状态。</li></ul></blockquote></li><li><p>第三次握手(ACK=1，ack=y+1，seq=x+1)</p><blockquote><ul><li>客户端收到此报文段后再次发送确认包(ACK)，SYN 标志位为0，ACK 标志位为1，并且把服务器发来 ACK 的序号字段+1，放在确定字段ack中发送给对方，并且告诉服务器自己的seq=x+1</li><li>发送完毕后，客户端进入 ESTABLISHED 状态，当服务器端接收到这个包时，也进入 ESTABLISHED 状态，TCP握手结束。</li></ul></blockquote></li></ul></li><li><p>问题解决：</p><ul><li><p>为什么初始seq要取随机值呢?</p><blockquote><ul><li>首先这个随机值并不是随机的，而是可以预测的。</li><li>其次,它一般基于时钟产生,在rfc793中讲到<strong>“The generator is bound to a (possibly fictitious) 32 bit clock whose low order bit is incremented roughly every 4 microseconds.”</strong>大概就是每 4ms加1,这样<code>ISN</code>循环一次需要4.55小时,而一个连接中传送的 <code>segment</code>在网络中存在的最大时间小于4.55小时。如我们需要 <code>segment</code>的<code>seq</code>为1,则至少4.55小时前的<code>segment</code>其<code>seq</code>才可能为1,而<code>segment</code>不可能在网络中存在4.55小时,所以如果我们接收到<code>seq</code>为 1 的<code>segment</code>则必然是我们需要的<code>segment</code>(恶意攻击除外^_^)。</li><li>这样可以防止上一次连接产生的<code>segment</code>被本次连接错误接收，同时也可以从某种程度上防止其它用户恶意攻击。</li></ul></blockquote></li><li><p>为什么要三次握手，而不是两次握手或者四次握手</p><blockquote><ul><li>为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误或者说是解决网络中存在延迟的重复分组的问题。<blockquote><ul><li><code>已失效的连接请求报文段</code>的产生在这样一种情况下：<code>client</code>发出的第一个连接请求报文段并没有丢失，而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达<code>server</code>。</li><li>本来这是一个早已失效的报文段。但<code>server</code>收到此失效的连接请求报文段后，就误认为是<code>client</code>再次发出的一个新的连接请求。于是就向<code>client</code>发出确认报文段，同意建立连接。</li><li>假设不采用“三次握手”，那么只要<code>server</code>发出确认，新的连接就建立了。由于现在<code>client</code>并没有发出建立连接的请求，因此不会理睬<code>server</code>的确认，也不会向<code>server</code>发送数据。但<code>server</code>却以为新的运输连接已经建立，并一直等待<code>client</code>发来数据。这样，<code>server</code>的很多资源就白白浪费掉了。</li></ul></blockquote></li></ul></blockquote><blockquote><ul><li>因为在上述的三次握手中已经确认并建立了连接，那么就没有必要去进行第四次握手，这样可以节约资源。</li></ul></blockquote></li></ul></li><li><p>补充：</p><ul><li><p>半链接队列</p><blockquote><ul><li>半连接队列：<blockquote><ul><li>在三次握手协议中，服务器维护一个半连接队列，该队列为每个客户端的SYN包开设一个条目（服务器端在接收到SYN包时，就已经创建了<code>request_sock</code>结构，存储在半连接队列中），该条目表明服务器已收到SYN 包，并向客户发出确认，正在等待客户的确认包。这些条目所识别的连接在服务器处于<code>SYN_RCVD</code>状态，当服务器收到客户端的确认包时，删除该条目，服务器进入<code>ESTABLISHED</code>状态。</li><li>未连接队列的大小为<code>max（64， /proc/sys/net/ipv4/tcp_max_syn_backlog）</code>，也就是可以在说未连接队列的大小可以在<code>/proc/sys/net/ipv4/tcp_max_syn_backlog</code>中修改配置，如果服务器经常出现过载，可尝试增加这个数字<code>（tcp_max_syn_backlog）</code>。</li></ul></blockquote></li></ul></blockquote><blockquote><ul><li>半连接（half-open connect）存活时间：<blockquote><ul><li>是指半连接队列的条目存活的最大时间，也即服务器端从收到<code>SYN</code>包确认这个报文无效的最长时间，该时间值是所有重传请求包的最长等待时间总和，有时我们也称半连接存活时间为<code>Timeout</code>时间、<code>SYN_RCVD</code>存活时间。</li></ul></blockquote></li></ul></blockquote></li><li><p>完全连接队列</p><blockquote><ul><li>完全连接队列：<blockquote><ul><li>在第三次握手时，当<code>Server</code>接收到<code>ACK</code>报之后，会进入一个新的叫ACCEPT的队列，该队列的长度为<code>min（backlog， /proc/sys/net/core/somaxconn）</code>，默认情况下，<code>somaxconn</code>的值为128，表示最多有128个ESTABLISHED的连接等待accept()，而<code>backlog</code>值则是由<code>int listen（int sockfd， int backlog）</code>中的第二个参数指定（指定的<code>backlog</code>与半连接状态的<code>backlog</code>无关系），<code>listen</code>里面的<code>backlog</code>可以由我们的程序去指定。</li><li>当服务器绑定、监听某个端口后，这个端口的SYN队列和ACCEPT队列就建立好了。</li></ul></blockquote></li></ul></blockquote><blockquote><ul><li>半连接队列未满但是全连接队列已满：<blockquote><ul><li>客户端发出<code>SYN</code>分节，服务器端收下<code>SYN</code>分节并向客户端发送<code>SYN+ACK</code>，客户端收到服务器端<code>SYN+ACK</code>后，成为<code>ESTABLISHED</code>状态，并向服务器端发送第三次握手<code>ACK</code>，服务器端收到<code>ACK</code>后发现全连接队列已满，默认情况下服务器端什么也不做，状态依然是<code>SYN_RCVD</code>，此时<code>ListenOverflows+1</code>，</li><li>同时服务器端通过对目录：<code>/proc/sys/net/ipv4/tcp_abort_on_overflow</code>进行修改来决定如何返回，<code>0</code>表示直接丢弃，<code>1</code>表示发送<code>RST</code>通知客户端（<code>ListenOverflows默认为0</code>，当全连接队列超过上限时，<code>ListenOverflow+1</code>），客户端会重传<code>SYN</code>（客户端第一次握手发起的请求）和<code>ACK</code>（客户端第三次握手期间发出的确认），并且内核会限制<code>SYN</code>队列的处理速度，如果在<code>SYN</code>队列中收到太多的<code>SYN</code>，服务器端将会丢弃一些，这样丢弃的<code>SYN</code>对应的客户端需要重发<code>SUN</code>包，当达到一定的阈（yù）值（可以理解为连接被动打开方的确认连接的应答最大重试数，即对于一个新建连接，内核需要发送多少<code>SYN</code>连接请求才决定放弃，阈值可以<code>/proc/sys/net/ipv4/tcp_synack_retries</code>中修改），客户端与服务器断开连接，服务器删除客户端在半连接队列中的<code>SYN</code>分节。</li></ul></blockquote></li></ul></blockquote><blockquote><ul><li>不论全连接满没满，若半连接队列已满：<blockquote><ul><li>不开启<code>tcp_syncookies</code>的时候，服务器端会丢弃新来的<code>SYN</code>包，而客户端多次重发<code>SYN包</code>得不到响应而返回超时错误（<code>connection time out</code>）。但是当服务器端开启了<code>tcp_syncookies = 1</code>，那么<code>SYN</code>半连接队列就没有逻辑上的最大值了，并且<code>/proc/sys/net/ipv4/tcp_max_syn_backlog</code>设置的值也会被忽略。</li></ul></blockquote></li></ul></blockquote></li></ul></li><li><p>SYN攻击</p><ul><li><p>在三次握手过程中，Server发送SYN-ACK之后，收到Client的ACK之前的TCP连接称为半连接（half-open connect），此时Server处于<code>SYN_RCVD</code>状态，当收到<code>ACK</code>后，Server转入<code>ESTABLISHED</code>状态。</p><blockquote><ul><li><code>SYN</code>攻击就是Client在短时间内伪造大量不存在的IP地址，并向Server不断地发送<code>SYN</code>包，Server回复确认包，并等待Client的确认，由于源地址是不存在的，因此，Server需要不断重发直至超时，这些伪造的<code>SYN</code>包将长时间占用未连接队列，导致正常的<code>SYN</code>请求因为队列满而被丢弃，从而引起网络堵塞甚至系统瘫痪。</li><li><code>SYN</code>攻击时一种典型的<code>DDOS</code>攻击，检测SYN攻击的方式非常简单，即当Server上有大量半连接状态且源IP地址是随机的，则可以断定遭到<code>SYN</code>攻击了，使用如下命令可以让之现行：<code>#netstat -nap | grep SYN_RECV</code></li></ul></blockquote></li><li><p>SYN攻击处理</p><blockquote><ul><li>减少SYN-ACK数据包的重发次数:<code>sysctl -w net.ipv4.tcp_synack_retries=3</code>,<code>sysctl -w net.ipv4.tcp_syn_retries=1</code></li><li>使用SYN cookie技术:<code>sysctl -w net.ipv4.tcp_syncookies=1</code></li><li>增加半连接队列（默认为1024）:<code>sysctl -w net.ipv4.tcp_max_syn_backlog=2048</code></li><li>限制SYN并发数：<code>iptables -A INPUT -p tcp --syn -m limit --limit 1/s -j ACCEPT --limit 1/s</code></li></ul></blockquote></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Protocol </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>TCP四次挥手</title>
      <link href="/2017/10/10/TCP%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/"/>
      <url>/2017/10/10/TCP%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><ul><li>关于 TCP 三握手以及后面文章用到的东西可以查看我的这篇博文:<a href="http://blog.csdn.net/xingerr/article/details/72834303" title="三次握手" target="_blank" rel="noopener">三次握手</a></li></ul><h4 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h4><ul><li><p>所谓四次挥手（Four-Way Wavehand）即终止 TCP 连接，就是指数据传送完毕需要断开一个 TCP 连接时，需要客户端和服务端总共发送 4 个包以确认连接的断开。在 socket 编程中，这一过程由客户端或服务端任一方执行<code>close</code>来触发，整个流程如下图所示：</p><p>  <img src="https://raw.githubusercontent.com/McXing/Pictures/master/%E6%8F%A1%E6%89%8B/%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B.png" alt="四次挥手" title="四次挥手"></p></li><li><p>由于 TCP 连接是全双工的，因此每个方向都必须单独进行关闭。这个原则是当一方完成它的数据发送任务后就能发送一个<code>FIN</code>来终止这个方向的连接。收到一个<code>FIN</code>只意味着这一方向上没有数据流动，一个 TCP 连接在收到一个<code>FIN</code>后仍能发送数据。首先进行关闭的一方将执行主动关闭，而另一方执行被动关闭。</p>  <a id="more"></a><blockquote><ul><li>第一次挥手(FIN=1，seq=u)<blockquote><ul><li>假设客户端想要关闭连接，客户端发送一个<code>FIN</code>标志位置为 1 的包，表示自己已经没有数据可以发送了，但是仍然可以接受数据。因为有可能服务器还要发送数据，所以发送自己的序列号<code>seq=u</code>，等待服务器确认。</li><li>发送完毕后，客户端进入<code>FIN_WAIT_1</code>状态。</li></ul></blockquote></li></ul></blockquote><blockquote><ul><li>第二次挥手(ACK=1，seq=v，ack=u+1)<blockquote><ul><li>服务器端确认客户端的<code>FIN</code>包，发送一个确认包(<code>ACK=1</code>(确认)，<code>seq=v</code>(自己的序列号)，<code>ack=u+1</code>(确认收到序列号u以前的包，并希望下次发送数据从 u+1 开始))，表明自己接受到了客户端关闭连接的请求，但还没有准备好关闭连接(可能有数据发送)。</li><li>发送完毕后，服务器端进入<code>CLOSE_WAIT</code>状态，客户端接收到这个确认包之后，进入<code>FIN_WAIT_2</code>状态，等待服务器端关闭连接。</li><li>在这过程中 TCP 服务器进程会通知高层应用进程。然后从客户端到服务器这个方向的连接就释放了，TCP 连接处于半关闭状态。但是服务器若发送数据，客户端仍要接收。</li></ul></blockquote></li></ul></blockquote><blockquote><ul><li>第三次挥手(FIN=1，ACK=1，seq=w，ack=u+1)<blockquote><ul><li>若服务器已经没有要向客户端发送的数据，其应用进程就通知 TCP 释放连接。</li><li>服务器端准备好关闭连接时，向客户端发送结束连接请求<code>FIN</code>置为 1，<code>ACK=1</code>，<code>seq=w</code>(有数据发送过)，<code>ack=u+1</code>。</li><li>发送完毕后，服务器端进入<code>LAST_ACK</code>状态，等待来自客户端的最后一个<code>ACK</code>。</li></ul></blockquote></li></ul></blockquote><blockquote><ul><li>第四次挥手(ACK=1，seq=u+1，ack=w+1)<blockquote><ul><li>客户端接收到来自服务器端的关闭请求，发送一个确认包(在确认报文段中<code>ACK=1</code>，确认号<code>ack=w+1</code>，自己的序号<code>seq=u+1</code>)，并进入<code>TIME_WAIT</code>状态，等待可能出现的要求重传的<code>ACK</code>包。(这个确认包是内核进行发送的，上面不能发数据的是客户端的<code>send</code>函数)</li><li>服务器端接收到这个确认包之后，关闭连接，进入<code>CLOSED</code>状态。</li><li>客户端等待了某个固定时间（两个最大段生命周期，<code>2MSL</code>，2 Maximum Segment Lifetime）之后，没有收到服务器端的<code>ACK</code>，认为服务器端已经正常关闭连接，于是自己也关闭连接，进入<code>CLOSED</code>状态。</li></ul></blockquote></li></ul></blockquote></li></ul><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><ul><li><p>为什么关闭的时候是四次握手？</p><blockquote><ul><li>当关闭连接时，服务器端收到了客户端的<code>FIN</code>报文通知，这仅仅表示客户端没有数据发送给服务器端了，我们知道 TCP 是全双工通信，所以未必服务器端的全部数据发送给了客户端，所以服务器端未必会马上关闭 socket ，也许服务器端还需要发送一些数据给客户端之后，再发送<code>FIN</code>报文给客户端，表示同意现在关闭连接，所以服务器端的<code>ACK</code>报文和<code>FIN</code>报文大多数情况下都是<strong>分开发送</strong>的。</li></ul></blockquote><blockquote><ul><li>由于网络服务的不可靠性，必须考虑到在释放连接时，可能由于数据包的失序而使释放连接请求的数据包会比其他数据包先到达目的端。此时，如果目的端由于收到了释放连接请求的数据包而立即释放该连接，则会造成那些先发而后至的数据包丢失。</li></ul></blockquote></li><li><p>TIME_WAIT存在的理由</p><blockquote><ul><li>可靠的实现TCP全双工链接的终止。<blockquote><ul><li>虽然双方都同意关闭连接了，而且握手的4个报文也都协调和发送完毕，按理可以直接回到<code>CLOSED</code>状态（就好比从<code>SYN_SEND</code>状态到<code>ESTABLISH</code>状态那样）；但是因为我们必须要假想网络是不可靠的，你无法保证你最后发送的<code>ACK</code>报文会一定被对方收到，因此对方处于<code>LAST_ACK</code>状态下的SOCKET可能会因为超时未收到<code>ACK</code>报文，而重发<code>FIN</code>报文，所以这个<code>TIME_WAIT</code>状态的作用就是用来重发可能丢失的<code>ACK</code>报文。</li><li>如果客户端不维护这个状态信息，服务器将响应一个以<code>RST</code>(另一种类型的 TCP 分节)，该分节将被解释为一个错误。如果TCP想要执行所有必要的工作以彻底终止某个连接上的两个方向上的数据流(全双工关闭)，那它必须正确处理连接终止序列 4 个分节中任何一个分节丢失的情况。</li></ul></blockquote></li><li>允许老的重复的分节在网络中消逝。<blockquote><ul><li>假设在<code>12.106.32.254</code>的 1500 端口和<code>206.168.211.219</code>的 21 端口之间有一个 TCP 连接。我们关闭这个链接，过一段时间后在 相同的 IP 地址和端口建立另一个连接。后一个链接成为前一个的化身。因为它们的 IP 地址和端口号都相同。TCP 必须防止来自某一个连接的老的重复分组在连接已经终止后再现，从而被误解成属于同一链接的某一个某一个新的化身。</li><li>为做到上面一点，TCP将不给处于<code>TIME_WAIT</code>状态的链接发起新的化身。既然<code>TIME_WAIT</code>状态的持续时间是<code>MSL</code>的 2倍，这就足以让某个方向上的分组最多存活<code>MSL</code>秒即被丢弃，另一个方向上的应答最多存活<code>MSL</code>秒也被丢弃。 通过实施这个规则，我们就能保证每成功建立一个TCP连接时，来自该链接先前化身的重复分组都已经在网络中消逝了。</li></ul></blockquote></li></ul></blockquote></li><li><p>为什么在第三次挥手时需要发送ack和seq</p><blockquote><ul><li>因为 TCP 是可靠的全双工传输，所以需要确保客户端的链接关闭正确，并且防止传送的数据包在网络中延迟出现的错误，如果后面又使用同样的端口建立了一个 TCP 链接而且现在要释放(完成了两次挥手)，刚才延迟的包现在到了，这时也许服务器还有数据要发送，但是客户端收到延迟的包，就直接确认返回ACK，从而出现非正常关闭。</li></ul></blockquote></li><li><p>为什么在第四次挥手的时候还需要发送ack和seq</p><blockquote><ul><li>因为 TCP 是可靠的全双工传输，所以需要确保客户端连接建立和关闭的正确，并且防止传送的数据包在网络中延迟出现的错误，如果后面又使用同样的端口要建立一个 TCP 链接(完成了两次握手)，刚才释放的确认的延迟的包现在到了，但是服务器收到延迟的包，就以为连接已经建立成功，如果这个时候客户端退出或者服务器需要先发数据，就会出现客户端没有建立成功连接但是服务器认为连接建立成功的错误。</li></ul></blockquote></li><li><p>TIME_WAIT状态所带来的影响</p><blockquote><ul><li>当某个连接的一端处于<code>TIME_WAIT</code>状态时，该连接将不能再被使用。事实上，对于我们比较有现实意义的是，这个端口将不能再被使用。</li><li>某个端口处于<code>TIME_WAIT</code>状态(其实应该是这个连接)时，这意味着这个 TCP 连接并没有断开(完全断开)，那么，如果你<code>bind</code>这个端口，就会失败。对于服务器而言，如果服务器突然坏掉了，那么它将无法再<code>2MSL</code>内重新启动，因为<code>bind</code>会失败。</li><li>解决这个问题的一个方法就是设置 socket 的<code>SO_REUSEADDR</code>选项。这个选项意味着你可以重用一个地址。</li></ul></blockquote></li></ul><h4 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h4><ul><li><p>默认情况下(不改变 socket 选项)，当你调用 close ( or closesocket，以下说 close 不再重复)时，如果发送缓冲中还有数据，TCP会继续把数据发送完。</p></li><li><p>发送了FIN只是表示这端不能继续发送数据(应用层不能再调用send发送)，但是还可以接收数据。</p></li><li><p>应用层如何知道对端关闭？通常，在最简单的阻塞模型中，当你调用<code>recv</code>时，如果返回 0，则表示对端关闭。在这个时候通常的做法就是也调用<code>close</code>，那么 TCP 层就发送<code>FIN</code>，继续完成四次握手。如果你不调用<code>close</code>，那么对端就会处于<code>FIN_WAIT_2</code>状态，而本端则会处于<code>CLOSE_WAIT</code>状态。</p></li><li><p>在很多时候，TCP连接的断开都会由TCP层自动进行，例如你CTRL+C终止你的程序，TCP连接依然会正常关闭。</p></li><li><p>当 TCP 连接发生一些物理上的意外情况时，例如网线断开，linux 上的 TCP 实现会依然认为该连接有效，而 windows 则会在一定时间后返回错误信息。</p><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4></li><li><p>2MSL</p><blockquote><ul><li>MSL(Maximum Segment Lifetime)，也就是报文最大生存时间，引用《TCP/IP详解》中的话：“它(MSL)是任何报文段被丢弃前在网络内的最长时间。”<strong>那么，2MSL也就是这个时间的 2 倍</strong>。RFC 1122建议 MSL 的值为 2 分钟，不过源自Berkeley的实现传统上改用30秒这个值。(也就是说<code>TIME_WAIT</code>状态的持续时间在1-4分钟之间。)</li></ul></blockquote></li><li><p>TTL</p><blockquote><ul><li><code>TTL</code>是网络数据包为了防止数据包在网络中无限循环，而设定的网络数据包在网络传输中的最大的转发次数，因为每转发一次在路由器，就会转向下一跳，通常称为最大跳数。</li><li>具体含义即就是：我们本地机器发出一个数据包，数据包经一定数量路由器后传送到目的主机，但由于多种原因，一些数据包不能正常传送到目的主机，那如果不给这些数据包一个生存时间的话，这些数据包就会在网络上不断的传送，导致网络开销的增大。当数据包传送到一个路由器之后，<code>TTL</code>就自动减 1，如果减到 0 了还没有传送到目的主机，那么数据就会自动消失，发送数据的一方则请求超时。</li><li>TTL的各个系统的默认值可以参考：<a href="http://subinsb.com/default-device-ttl-values" title="TTL默认值" target="_blank" rel="noopener">TTL默认值</a></li></ul></blockquote></li></ul><h4 id="TCP的有限状态机"><a href="#TCP的有限状态机" class="headerlink" title="TCP的有限状态机"></a>TCP的有限状态机</h4><p><img src="https://raw.githubusercontent.com/McXing/Pictures/master/%E6%8F%A1%E6%89%8B/%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA.png" alt="有限状态机" title="有限状态机"></p><ul><li><p>解释：</p><blockquote><ul><li>TCP 有限状态机的图中每一个方框都是 TCP 可能具有的状态。</li><li>每个方框中的大写英文字符串是 TCP 标准所使用的 TCP 连接状态名。状态之间的箭头表示可能发生的状态变迁。</li><li>箭头旁边的字，表明引起这种变迁的原因，或表明发生状态变迁后又出现什么动作。</li><li>图中有三种不同的箭头。<blockquote><ul><li>粗实线箭头表示对客户进程的正常变迁。</li><li>粗虚线箭头表示对服务器进程的正常变迁。</li><li>另一种细线箭头表示异常变迁。</li></ul></blockquote></li></ul></blockquote></li></ul><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li>链接：<a href="http://www.cnblogs.com/renyuan/p/3431022.html" target="_blank" rel="noopener">http://www.cnblogs.com/renyuan/p/3431022.html</a></li><li>链接：<a href="http://www.cnblogs.com/zmlctt/p/3690998.html" target="_blank" rel="noopener">http://www.cnblogs.com/zmlctt/p/3690998.html</a></li><li>链接：<a href="http://blog.csdn.net/gc348342215/article/details/70230537" target="_blank" rel="noopener">http://blog.csdn.net/gc348342215/article/details/70230537</a></li><li>《UNIX网络编程卷1》</li><li>《计算机网络》(谢希仁)</li></ul>]]></content>
      
      
      <categories>
          
          <category> Protocol </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>从Google Chrome中删除“由企业策略安装的”扩展名</title>
      <link href="/2017/10/09/Chrome%E4%BC%81%E4%B8%9A%E7%AD%96%E7%95%A5%E5%AE%89%E8%A3%85/"/>
      <url>/2017/10/09/Chrome%E4%BC%81%E4%B8%9A%E7%AD%96%E7%95%A5%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><ul><li>今天不小心点开了一个垃圾程序，然后就给我的Google Chrome安装了两个插件，其中一个是<code>Cookies On-Off</code>本来说手动删除就可以了，谁知道竟然显示是“企业策略安装”，无法删除。只能上网搜索，最终在国外的网站找到了解决方法：</li></ul><a id="more"></a><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><ul><li>通过<code>（Win + R）</code>打开中 windows 的运行框，然后输入<code>cmd</code>命令，进入终端模式</li><li><p>在命令提示符下键入（或复制/粘贴）以下命令：</p><blockquote><ul><li><code>rd /S /Q &quot;%WinDir%\System32\GroupPolicyUsers&quot;</code><br>按回车。</li><li><code>rd /S /Q &quot;%WinDir%\System32\GroupPolicy&quot;</code><br>按回车。</li><li><code>gpupdate /force</code><br>按回车。</li></ul></blockquote></li><li><p>运行命令后，应该会看到以下通知：</p><blockquote><ul><li>用户策略更新已成功完成。</li><li>计算机策略更新已成功完成</li></ul></blockquote></li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li>平常注意，不要裸机运行</li><li>要学会解决问题，平常小心防范各种木马</li><li>这里只给出了一种方法，还有另外的方法参考下面的链接(如果打不开，证明被墙了) ，<a href="https://malwaretips.com/blogs/installed-enterprise-policy-removal/#removal" target="_blank" rel="noopener">链接点我</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Chrome </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
